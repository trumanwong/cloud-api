// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/instance/v1/instance.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstancesRequestMultiError, or nil if none found.
func (m *CreateInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := CreateInstancesRequestValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		err := CreateInstancesRequestValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := CreateInstancesRequestValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := CreateInstancesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ImageId

	// no validation rules for Name

	// no validation rules for InstanceType

	// no validation rules for SystemDiskSize

	// no validation rules for UniqueSuffix

	// no validation rules for Amount

	// no validation rules for Password

	// no validation rules for DryRun

	if len(errors) > 0 {
		return CreateInstancesRequestMultiError(errors)
	}

	return nil
}

// CreateInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by CreateInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstancesRequestMultiError) AllErrors() []error { return m }

// CreateInstancesRequestValidationError is the validation error returned by
// CreateInstancesRequest.Validate if the designated constraints aren't met.
type CreateInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstancesRequestValidationError) ErrorName() string {
	return "CreateInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstancesRequestValidationError{}

// Validate checks the field values on CreateInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstancesResponseMultiError, or nil if none found.
func (m *CreateInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for OrderId

	// no validation rules for TradePrice

	if len(errors) > 0 {
		return CreateInstancesResponseMultiError(errors)
	}

	return nil
}

// CreateInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by CreateInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstancesResponseMultiError) AllErrors() []error { return m }

// CreateInstancesResponseValidationError is the validation error returned by
// CreateInstancesResponse.Validate if the designated constraints aren't met.
type CreateInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstancesResponseValidationError) ErrorName() string {
	return "CreateInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstancesResponseValidationError{}

// Validate checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesRequestMultiError, or nil if none found.
func (m *ListInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := ListInstancesRequestValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		err := ListInstancesRequestValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := ListInstancesRequestValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RegionId

	// no validation rules for PageNumber

	// no validation rules for PageSize

	// no validation rules for NextToken

	// no validation rules for InstanceName

	// no validation rules for DryRun

	if len(errors) > 0 {
		return ListInstancesRequestMultiError(errors)
	}

	return nil
}

// ListInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by ListInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesRequestMultiError) AllErrors() []error { return m }

// ListInstancesRequestValidationError is the validation error returned by
// ListInstancesRequest.Validate if the designated constraints aren't met.
type ListInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesRequestValidationError) ErrorName() string {
	return "ListInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesRequestValidationError{}

// Validate checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesResponseMultiError, or nil if none found.
func (m *ListInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	// no validation rules for PageNumber

	// no validation rules for PageSize

	// no validation rules for TotalCount

	// no validation rules for NextToken

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInstancesResponseValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInstancesResponseValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesResponseValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListInstancesResponseMultiError(errors)
	}

	return nil
}

// ListInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by ListInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponseMultiError) AllErrors() []error { return m }

// ListInstancesResponseValidationError is the validation error returned by
// ListInstancesResponse.Validate if the designated constraints aren't met.
type ListInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponseValidationError) ErrorName() string {
	return "ListInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponseValidationError{}

// Validate checks the field values on ListRegionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegionsRequestMultiError, or nil if none found.
func (m *ListRegionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := ListRegionsRequestValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		err := ListRegionsRequestValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := ListRegionsRequestValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InstanceChargeType

	// no validation rules for ResourceType

	// no validation rules for AcceptLanguage

	if len(errors) > 0 {
		return ListRegionsRequestMultiError(errors)
	}

	return nil
}

// ListRegionsRequestMultiError is an error wrapping multiple validation errors
// returned by ListRegionsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRegionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegionsRequestMultiError) AllErrors() []error { return m }

// ListRegionsRequestValidationError is the validation error returned by
// ListRegionsRequest.Validate if the designated constraints aren't met.
type ListRegionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsRequestValidationError) ErrorName() string {
	return "ListRegionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsRequestValidationError{}

// Validate checks the field values on ListRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegionsResponseMultiError, or nil if none found.
func (m *ListRegionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRegions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRegionsResponseValidationError{
						field:  fmt.Sprintf("Regions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRegionsResponseValidationError{
						field:  fmt.Sprintf("Regions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRegionsResponseValidationError{
					field:  fmt.Sprintf("Regions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRegionsResponseMultiError(errors)
	}

	return nil
}

// ListRegionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListRegionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRegionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegionsResponseMultiError) AllErrors() []error { return m }

// ListRegionsResponseValidationError is the validation error returned by
// ListRegionsResponse.Validate if the designated constraints aren't met.
type ListRegionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsResponseValidationError) ErrorName() string {
	return "ListRegionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsResponseValidationError{}

// Validate checks the field values on ListImagesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListImagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImagesRequestMultiError, or nil if none found.
func (m *ListImagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := ListImagesRequestValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		err := ListImagesRequestValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := ListImagesRequestValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := ListImagesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for ImageId

	// no validation rules for ShowExpired

	// no validation rules for ImageName

	if len(errors) > 0 {
		return ListImagesRequestMultiError(errors)
	}

	return nil
}

// ListImagesRequestMultiError is an error wrapping multiple validation errors
// returned by ListImagesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListImagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImagesRequestMultiError) AllErrors() []error { return m }

// ListImagesRequestValidationError is the validation error returned by
// ListImagesRequest.Validate if the designated constraints aren't met.
type ListImagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImagesRequestValidationError) ErrorName() string {
	return "ListImagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListImagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImagesRequestValidationError{}

// Validate checks the field values on ListImagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListImagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImagesResponseMultiError, or nil if none found.
func (m *ListImagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNumber

	// no validation rules for RequestId

	// no validation rules for TotalCount

	// no validation rules for RegionId

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListImagesResponseValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListImagesResponseValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListImagesResponseValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListImagesResponseMultiError(errors)
	}

	return nil
}

// ListImagesResponseMultiError is an error wrapping multiple validation errors
// returned by ListImagesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListImagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImagesResponseMultiError) AllErrors() []error { return m }

// ListImagesResponseValidationError is the validation error returned by
// ListImagesResponse.Validate if the designated constraints aren't met.
type ListImagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImagesResponseValidationError) ErrorName() string {
	return "ListImagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListImagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImagesResponseValidationError{}

// Validate checks the field values on ListInstanceTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstanceTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstanceTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstanceTypesRequestMultiError, or nil if none found.
func (m *ListInstanceTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstanceTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := ListInstanceTypesRequestValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		err := ListInstanceTypesRequestValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := ListInstanceTypesRequestValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MaxResults

	// no validation rules for NextToken

	if len(errors) > 0 {
		return ListInstanceTypesRequestMultiError(errors)
	}

	return nil
}

// ListInstanceTypesRequestMultiError is an error wrapping multiple validation
// errors returned by ListInstanceTypesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInstanceTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstanceTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstanceTypesRequestMultiError) AllErrors() []error { return m }

// ListInstanceTypesRequestValidationError is the validation error returned by
// ListInstanceTypesRequest.Validate if the designated constraints aren't met.
type ListInstanceTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstanceTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstanceTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstanceTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstanceTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstanceTypesRequestValidationError) ErrorName() string {
	return "ListInstanceTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstanceTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstanceTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstanceTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstanceTypesRequestValidationError{}

// Validate checks the field values on ListInstanceTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstanceTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstanceTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstanceTypesResponseMultiError, or nil if none found.
func (m *ListInstanceTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstanceTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	for idx, item := range m.GetInstanceTypes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInstanceTypesResponseValidationError{
						field:  fmt.Sprintf("InstanceTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInstanceTypesResponseValidationError{
						field:  fmt.Sprintf("InstanceTypes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstanceTypesResponseValidationError{
					field:  fmt.Sprintf("InstanceTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextToken

	if len(errors) > 0 {
		return ListInstanceTypesResponseMultiError(errors)
	}

	return nil
}

// ListInstanceTypesResponseMultiError is an error wrapping multiple validation
// errors returned by ListInstanceTypesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListInstanceTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstanceTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstanceTypesResponseMultiError) AllErrors() []error { return m }

// ListInstanceTypesResponseValidationError is the validation error returned by
// ListInstanceTypesResponse.Validate if the designated constraints aren't met.
type ListInstanceTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstanceTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstanceTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstanceTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstanceTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstanceTypesResponseValidationError) ErrorName() string {
	return "ListInstanceTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstanceTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstanceTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstanceTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstanceTypesResponseValidationError{}

// Validate checks the field values on StartInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartInstancesRequestMultiError, or nil if none found.
func (m *StartInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := StartInstancesRequestValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		err := StartInstancesRequestValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := StartInstancesRequestValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := StartInstancesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := len(m.GetInstanceIds()); l < 1 || l > 100 {
		err := StartInstancesRequestValidationError{
			field:  "InstanceIds",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for BatchOptimization

	// no validation rules for DryRun

	if len(errors) > 0 {
		return StartInstancesRequestMultiError(errors)
	}

	return nil
}

// StartInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by StartInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type StartInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartInstancesRequestMultiError) AllErrors() []error { return m }

// StartInstancesRequestValidationError is the validation error returned by
// StartInstancesRequest.Validate if the designated constraints aren't met.
type StartInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartInstancesRequestValidationError) ErrorName() string {
	return "StartInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartInstancesRequestValidationError{}

// Validate checks the field values on InstanceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceResponseMultiError, or nil if none found.
func (m *InstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for InstanceId

	// no validation rules for CurrentStatus

	// no validation rules for PreviousStatus

	if len(errors) > 0 {
		return InstanceResponseMultiError(errors)
	}

	return nil
}

// InstanceResponseMultiError is an error wrapping multiple validation errors
// returned by InstanceResponse.ValidateAll() if the designated constraints
// aren't met.
type InstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceResponseMultiError) AllErrors() []error { return m }

// InstanceResponseValidationError is the validation error returned by
// InstanceResponse.Validate if the designated constraints aren't met.
type InstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceResponseValidationError) ErrorName() string { return "InstanceResponseValidationError" }

// Error satisfies the builtin error interface
func (e InstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceResponseValidationError{}

// Validate checks the field values on StartInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartInstancesResponseMultiError, or nil if none found.
func (m *StartInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	for idx, item := range m.GetInstanceResponses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartInstancesResponseValidationError{
						field:  fmt.Sprintf("InstanceResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartInstancesResponseValidationError{
						field:  fmt.Sprintf("InstanceResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartInstancesResponseValidationError{
					field:  fmt.Sprintf("InstanceResponses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StartInstancesResponseMultiError(errors)
	}

	return nil
}

// StartInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by StartInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type StartInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartInstancesResponseMultiError) AllErrors() []error { return m }

// StartInstancesResponseValidationError is the validation error returned by
// StartInstancesResponse.Validate if the designated constraints aren't met.
type StartInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartInstancesResponseValidationError) ErrorName() string {
	return "StartInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartInstancesResponseValidationError{}

// Validate checks the field values on StopInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopInstancesRequestMultiError, or nil if none found.
func (m *StopInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := StopInstancesRequestValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		err := StopInstancesRequestValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := StopInstancesRequestValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := StopInstancesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ForceStop

	// no validation rules for StoppedMode

	// no validation rules for BatchOptimization

	if l := len(m.GetInstanceIds()); l < 1 || l > 100 {
		err := StopInstancesRequestValidationError{
			field:  "InstanceIds",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DryRun

	if len(errors) > 0 {
		return StopInstancesRequestMultiError(errors)
	}

	return nil
}

// StopInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by StopInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type StopInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopInstancesRequestMultiError) AllErrors() []error { return m }

// StopInstancesRequestValidationError is the validation error returned by
// StopInstancesRequest.Validate if the designated constraints aren't met.
type StopInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopInstancesRequestValidationError) ErrorName() string {
	return "StopInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopInstancesRequestValidationError{}

// Validate checks the field values on StopInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopInstancesResponseMultiError, or nil if none found.
func (m *StopInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	for idx, item := range m.GetInstanceResponses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StopInstancesResponseValidationError{
						field:  fmt.Sprintf("InstanceResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StopInstancesResponseValidationError{
						field:  fmt.Sprintf("InstanceResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StopInstancesResponseValidationError{
					field:  fmt.Sprintf("InstanceResponses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StopInstancesResponseMultiError(errors)
	}

	return nil
}

// StopInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by StopInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type StopInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopInstancesResponseMultiError) AllErrors() []error { return m }

// StopInstancesResponseValidationError is the validation error returned by
// StopInstancesResponse.Validate if the designated constraints aren't met.
type StopInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopInstancesResponseValidationError) ErrorName() string {
	return "StopInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopInstancesResponseValidationError{}

// Validate checks the field values on RebootInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RebootInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RebootInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RebootInstancesRequestMultiError, or nil if none found.
func (m *RebootInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RebootInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := RebootInstancesRequestValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		err := RebootInstancesRequestValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := RebootInstancesRequestValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := RebootInstancesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ForceStop

	// no validation rules for BatchOptimization

	if l := len(m.GetInstanceIds()); l < 1 || l > 100 {
		err := RebootInstancesRequestValidationError{
			field:  "InstanceIds",
			reason: "value must contain between 1 and 100 items, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DryRun

	if len(errors) > 0 {
		return RebootInstancesRequestMultiError(errors)
	}

	return nil
}

// RebootInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by RebootInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type RebootInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootInstancesRequestMultiError) AllErrors() []error { return m }

// RebootInstancesRequestValidationError is the validation error returned by
// RebootInstancesRequest.Validate if the designated constraints aren't met.
type RebootInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootInstancesRequestValidationError) ErrorName() string {
	return "RebootInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RebootInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRebootInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootInstancesRequestValidationError{}

// Validate checks the field values on RebootInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RebootInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RebootInstancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RebootInstancesResponseMultiError, or nil if none found.
func (m *RebootInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RebootInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	for idx, item := range m.GetInstanceResponses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RebootInstancesResponseValidationError{
						field:  fmt.Sprintf("InstanceResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RebootInstancesResponseValidationError{
						field:  fmt.Sprintf("InstanceResponses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RebootInstancesResponseValidationError{
					field:  fmt.Sprintf("InstanceResponses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RebootInstancesResponseMultiError(errors)
	}

	return nil
}

// RebootInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by RebootInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type RebootInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootInstancesResponseMultiError) AllErrors() []error { return m }

// RebootInstancesResponseValidationError is the validation error returned by
// RebootInstancesResponse.Validate if the designated constraints aren't met.
type RebootInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootInstancesResponseValidationError) ErrorName() string {
	return "RebootInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RebootInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRebootInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootInstancesResponseValidationError{}

// Validate checks the field values on DeleteInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInstancesRequestMultiError, or nil if none found.
func (m *DeleteInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := DeleteInstancesRequestValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeySecret()) < 1 {
		err := DeleteInstancesRequestValidationError{
			field:  "AccessKeySecret",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEndpoint()) < 1 {
		err := DeleteInstancesRequestValidationError{
			field:  "Endpoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := DeleteInstancesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Force

	// no validation rules for TerminateSubscription

	// no validation rules for DryRun

	if len(errors) > 0 {
		return DeleteInstancesRequestMultiError(errors)
	}

	return nil
}

// DeleteInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInstancesRequestMultiError) AllErrors() []error { return m }

// DeleteInstancesRequestValidationError is the validation error returned by
// DeleteInstancesRequest.Validate if the designated constraints aren't met.
type DeleteInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstancesRequestValidationError) ErrorName() string {
	return "DeleteInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstancesRequestValidationError{}

// Validate checks the field values on DeleteInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInstancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInstancesResponseMultiError, or nil if none found.
func (m *DeleteInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if len(errors) > 0 {
		return DeleteInstancesResponseMultiError(errors)
	}

	return nil
}

// DeleteInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInstancesResponseMultiError) AllErrors() []error { return m }

// DeleteInstancesResponseValidationError is the validation error returned by
// DeleteInstancesResponse.Validate if the designated constraints aren't met.
type DeleteInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstancesResponseValidationError) ErrorName() string {
	return "DeleteInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstancesResponseValidationError{}

// Validate checks the field values on ListInstancesResponse_Instance with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse_Instance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesResponse_Instance with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListInstancesResponse_InstanceMultiError, or nil if none found.
func (m *ListInstancesResponse_Instance) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse_Instance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreationTime

	// no validation rules for SerialNumber

	// no validation rules for Status

	// no validation rules for DeploymentSetId

	// no validation rules for KeyPairName

	// no validation rules for SaleCycle

	// no validation rules for DeviceAvailable

	// no validation rules for LocalStorageCapacity

	// no validation rules for Description

	// no validation rules for SpotDuration

	// no validation rules for InstanceNetworkType

	// no validation rules for InstanceName

	// no validation rules for OsNameEn

	// no validation rules for HpcClusterId

	// no validation rules for Memory

	// no validation rules for OsName

	// no validation rules for DeploymentSetGroupNo

	// no validation rules for ImageId

	// no validation rules for GpuSpec

	// no validation rules for AutoReleaseTime

	// no validation rules for DeletionProtection

	// no validation rules for StoppedMode

	// no validation rules for GpuAmount

	// no validation rules for HostName

	// no validation rules for InstanceId

	// no validation rules for InternetMaxBandwidthOut

	// no validation rules for InternetMaxBandwidthIn

	// no validation rules for InstanceType

	// no validation rules for InstanceChargeType

	// no validation rules for RegionId

	// no validation rules for IoOptimized

	// no validation rules for StartTime

	// no validation rules for Cpu

	// no validation rules for LocalStorageAmount

	// no validation rules for ExpiredTime

	// no validation rules for ResourceGroupId

	// no validation rules for InternetChargeType

	// no validation rules for ZoneId

	// no validation rules for Recyclable

	// no validation rules for CreditSpecification

	// no validation rules for InstanceTypeFamily

	// no validation rules for OsType

	for idx, item := range m.GetNetworkInterfaces() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInstancesResponse_InstanceValidationError{
						field:  fmt.Sprintf("NetworkInterfaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInstancesResponse_InstanceValidationError{
						field:  fmt.Sprintf("NetworkInterfaces[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesResponse_InstanceValidationError{
					field:  fmt.Sprintf("NetworkInterfaces[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOperationLocks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInstancesResponse_InstanceValidationError{
						field:  fmt.Sprintf("OperationLocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInstancesResponse_InstanceValidationError{
						field:  fmt.Sprintf("OperationLocks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesResponse_InstanceValidationError{
					field:  fmt.Sprintf("OperationLocks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInstancesResponse_InstanceValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInstancesResponse_InstanceValidationError{
						field:  fmt.Sprintf("Tags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesResponse_InstanceValidationError{
					field:  fmt.Sprintf("Tags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetVpcAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInstancesResponse_InstanceValidationError{
					field:  "VpcAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInstancesResponse_InstanceValidationError{
					field:  "VpcAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVpcAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstancesResponse_InstanceValidationError{
				field:  "VpcAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEipAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInstancesResponse_InstanceValidationError{
					field:  "EipAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInstancesResponse_InstanceValidationError{
					field:  "EipAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEipAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstancesResponse_InstanceValidationError{
				field:  "EipAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDedicatedInstanceAttribute()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInstancesResponse_InstanceValidationError{
					field:  "DedicatedInstanceAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInstancesResponse_InstanceValidationError{
					field:  "DedicatedInstanceAttribute",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDedicatedInstanceAttribute()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstancesResponse_InstanceValidationError{
				field:  "DedicatedInstanceAttribute",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCpuOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInstancesResponse_InstanceValidationError{
					field:  "CpuOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInstancesResponse_InstanceValidationError{
					field:  "CpuOptions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpuOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstancesResponse_InstanceValidationError{
				field:  "CpuOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListInstancesResponse_InstanceMultiError(errors)
	}

	return nil
}

// ListInstancesResponse_InstanceMultiError is an error wrapping multiple
// validation errors returned by ListInstancesResponse_Instance.ValidateAll()
// if the designated constraints aren't met.
type ListInstancesResponse_InstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponse_InstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponse_InstanceMultiError) AllErrors() []error { return m }

// ListInstancesResponse_InstanceValidationError is the validation error
// returned by ListInstancesResponse_Instance.Validate if the designated
// constraints aren't met.
type ListInstancesResponse_InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponse_InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponse_InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponse_InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponse_InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponse_InstanceValidationError) ErrorName() string {
	return "ListInstancesResponse_InstanceValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponse_InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse_Instance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponse_InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponse_InstanceValidationError{}

// Validate checks the field values on
// ListInstancesResponse_Instance_NetworkInterface with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse_Instance_NetworkInterface) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListInstancesResponse_Instance_NetworkInterface with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListInstancesResponse_Instance_NetworkInterfaceMultiError, or nil if none found.
func (m *ListInstancesResponse_Instance_NetworkInterface) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse_Instance_NetworkInterface) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for MacAddress

	// no validation rules for PrimaryIpAddress

	// no validation rules for NetworkInterfaceId

	for idx, item := range m.GetPrivateIpSets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInstancesResponse_Instance_NetworkInterfaceValidationError{
						field:  fmt.Sprintf("PrivateIpSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInstancesResponse_Instance_NetworkInterfaceValidationError{
						field:  fmt.Sprintf("PrivateIpSets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesResponse_Instance_NetworkInterfaceValidationError{
					field:  fmt.Sprintf("PrivateIpSets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetIpv6Sets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInstancesResponse_Instance_NetworkInterfaceValidationError{
						field:  fmt.Sprintf("Ipv6Sets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInstancesResponse_Instance_NetworkInterfaceValidationError{
						field:  fmt.Sprintf("Ipv6Sets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesResponse_Instance_NetworkInterfaceValidationError{
					field:  fmt.Sprintf("Ipv6Sets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListInstancesResponse_Instance_NetworkInterfaceMultiError(errors)
	}

	return nil
}

// ListInstancesResponse_Instance_NetworkInterfaceMultiError is an error
// wrapping multiple validation errors returned by
// ListInstancesResponse_Instance_NetworkInterface.ValidateAll() if the
// designated constraints aren't met.
type ListInstancesResponse_Instance_NetworkInterfaceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponse_Instance_NetworkInterfaceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponse_Instance_NetworkInterfaceMultiError) AllErrors() []error { return m }

// ListInstancesResponse_Instance_NetworkInterfaceValidationError is the
// validation error returned by
// ListInstancesResponse_Instance_NetworkInterface.Validate if the designated
// constraints aren't met.
type ListInstancesResponse_Instance_NetworkInterfaceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponse_Instance_NetworkInterfaceValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListInstancesResponse_Instance_NetworkInterfaceValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListInstancesResponse_Instance_NetworkInterfaceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponse_Instance_NetworkInterfaceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponse_Instance_NetworkInterfaceValidationError) ErrorName() string {
	return "ListInstancesResponse_Instance_NetworkInterfaceValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponse_Instance_NetworkInterfaceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse_Instance_NetworkInterface.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponse_Instance_NetworkInterfaceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponse_Instance_NetworkInterfaceValidationError{}

// Validate checks the field values on
// ListInstancesResponse_Instance_OperationLock with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse_Instance_OperationLock) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListInstancesResponse_Instance_OperationLock with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListInstancesResponse_Instance_OperationLockMultiError, or nil if none found.
func (m *ListInstancesResponse_Instance_OperationLock) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse_Instance_OperationLock) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LockMsg

	// no validation rules for LockReason

	if len(errors) > 0 {
		return ListInstancesResponse_Instance_OperationLockMultiError(errors)
	}

	return nil
}

// ListInstancesResponse_Instance_OperationLockMultiError is an error wrapping
// multiple validation errors returned by
// ListInstancesResponse_Instance_OperationLock.ValidateAll() if the
// designated constraints aren't met.
type ListInstancesResponse_Instance_OperationLockMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponse_Instance_OperationLockMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponse_Instance_OperationLockMultiError) AllErrors() []error { return m }

// ListInstancesResponse_Instance_OperationLockValidationError is the
// validation error returned by
// ListInstancesResponse_Instance_OperationLock.Validate if the designated
// constraints aren't met.
type ListInstancesResponse_Instance_OperationLockValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponse_Instance_OperationLockValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponse_Instance_OperationLockValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponse_Instance_OperationLockValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponse_Instance_OperationLockValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponse_Instance_OperationLockValidationError) ErrorName() string {
	return "ListInstancesResponse_Instance_OperationLockValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponse_Instance_OperationLockValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse_Instance_OperationLock.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponse_Instance_OperationLockValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponse_Instance_OperationLockValidationError{}

// Validate checks the field values on ListInstancesResponse_Instance_Tag with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListInstancesResponse_Instance_Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesResponse_Instance_Tag
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListInstancesResponse_Instance_TagMultiError, or nil if none found.
func (m *ListInstancesResponse_Instance_Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse_Instance_Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TagValue

	// no validation rules for TagKey

	if len(errors) > 0 {
		return ListInstancesResponse_Instance_TagMultiError(errors)
	}

	return nil
}

// ListInstancesResponse_Instance_TagMultiError is an error wrapping multiple
// validation errors returned by
// ListInstancesResponse_Instance_Tag.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesResponse_Instance_TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponse_Instance_TagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponse_Instance_TagMultiError) AllErrors() []error { return m }

// ListInstancesResponse_Instance_TagValidationError is the validation error
// returned by ListInstancesResponse_Instance_Tag.Validate if the designated
// constraints aren't met.
type ListInstancesResponse_Instance_TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponse_Instance_TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponse_Instance_TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponse_Instance_TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponse_Instance_TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponse_Instance_TagValidationError) ErrorName() string {
	return "ListInstancesResponse_Instance_TagValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponse_Instance_TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse_Instance_Tag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponse_Instance_TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponse_Instance_TagValidationError{}

// Validate checks the field values on
// ListInstancesResponse_Instance_VpcAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse_Instance_VpcAttributes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListInstancesResponse_Instance_VpcAttributes with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListInstancesResponse_Instance_VpcAttributesMultiError, or nil if none found.
func (m *ListInstancesResponse_Instance_VpcAttributes) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse_Instance_VpcAttributes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VpcId

	// no validation rules for NatIpAddress

	// no validation rules for VSwitchId

	if len(errors) > 0 {
		return ListInstancesResponse_Instance_VpcAttributesMultiError(errors)
	}

	return nil
}

// ListInstancesResponse_Instance_VpcAttributesMultiError is an error wrapping
// multiple validation errors returned by
// ListInstancesResponse_Instance_VpcAttributes.ValidateAll() if the
// designated constraints aren't met.
type ListInstancesResponse_Instance_VpcAttributesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponse_Instance_VpcAttributesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponse_Instance_VpcAttributesMultiError) AllErrors() []error { return m }

// ListInstancesResponse_Instance_VpcAttributesValidationError is the
// validation error returned by
// ListInstancesResponse_Instance_VpcAttributes.Validate if the designated
// constraints aren't met.
type ListInstancesResponse_Instance_VpcAttributesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponse_Instance_VpcAttributesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponse_Instance_VpcAttributesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponse_Instance_VpcAttributesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponse_Instance_VpcAttributesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponse_Instance_VpcAttributesValidationError) ErrorName() string {
	return "ListInstancesResponse_Instance_VpcAttributesValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponse_Instance_VpcAttributesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse_Instance_VpcAttributes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponse_Instance_VpcAttributesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponse_Instance_VpcAttributesValidationError{}

// Validate checks the field values on
// ListInstancesResponse_Instance_EipAddress with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse_Instance_EipAddress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListInstancesResponse_Instance_EipAddress with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListInstancesResponse_Instance_EipAddressMultiError, or nil if none found.
func (m *ListInstancesResponse_Instance_EipAddress) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse_Instance_EipAddress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllocationId

	// no validation rules for IsSupportUnAssociate

	// no validation rules for InternalChargeType

	// no validation rules for IpAddress

	// no validation rules for Bandwidth

	if len(errors) > 0 {
		return ListInstancesResponse_Instance_EipAddressMultiError(errors)
	}

	return nil
}

// ListInstancesResponse_Instance_EipAddressMultiError is an error wrapping
// multiple validation errors returned by
// ListInstancesResponse_Instance_EipAddress.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesResponse_Instance_EipAddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponse_Instance_EipAddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponse_Instance_EipAddressMultiError) AllErrors() []error { return m }

// ListInstancesResponse_Instance_EipAddressValidationError is the validation
// error returned by ListInstancesResponse_Instance_EipAddress.Validate if the
// designated constraints aren't met.
type ListInstancesResponse_Instance_EipAddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponse_Instance_EipAddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponse_Instance_EipAddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponse_Instance_EipAddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponse_Instance_EipAddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponse_Instance_EipAddressValidationError) ErrorName() string {
	return "ListInstancesResponse_Instance_EipAddressValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponse_Instance_EipAddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse_Instance_EipAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponse_Instance_EipAddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponse_Instance_EipAddressValidationError{}

// Validate checks the field values on
// ListInstancesResponse_Instance_DedicatedInstanceAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse_Instance_DedicatedInstanceAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListInstancesResponse_Instance_DedicatedInstanceAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesResponse_Instance_DedicatedInstanceAttributeMultiError, or nil
// if none found.
func (m *ListInstancesResponse_Instance_DedicatedInstanceAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse_Instance_DedicatedInstanceAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Affinity

	// no validation rules for Tenancy

	if len(errors) > 0 {
		return ListInstancesResponse_Instance_DedicatedInstanceAttributeMultiError(errors)
	}

	return nil
}

// ListInstancesResponse_Instance_DedicatedInstanceAttributeMultiError is an
// error wrapping multiple validation errors returned by
// ListInstancesResponse_Instance_DedicatedInstanceAttribute.ValidateAll() if
// the designated constraints aren't met.
type ListInstancesResponse_Instance_DedicatedInstanceAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponse_Instance_DedicatedInstanceAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponse_Instance_DedicatedInstanceAttributeMultiError) AllErrors() []error {
	return m
}

// ListInstancesResponse_Instance_DedicatedInstanceAttributeValidationError is
// the validation error returned by
// ListInstancesResponse_Instance_DedicatedInstanceAttribute.Validate if the
// designated constraints aren't met.
type ListInstancesResponse_Instance_DedicatedInstanceAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponse_Instance_DedicatedInstanceAttributeValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListInstancesResponse_Instance_DedicatedInstanceAttributeValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListInstancesResponse_Instance_DedicatedInstanceAttributeValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListInstancesResponse_Instance_DedicatedInstanceAttributeValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListInstancesResponse_Instance_DedicatedInstanceAttributeValidationError) ErrorName() string {
	return "ListInstancesResponse_Instance_DedicatedInstanceAttributeValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponse_Instance_DedicatedInstanceAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse_Instance_DedicatedInstanceAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponse_Instance_DedicatedInstanceAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponse_Instance_DedicatedInstanceAttributeValidationError{}

// Validate checks the field values on
// ListInstancesResponse_Instance_CpuOptions with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse_Instance_CpuOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListInstancesResponse_Instance_CpuOptions with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListInstancesResponse_Instance_CpuOptionsMultiError, or nil if none found.
func (m *ListInstancesResponse_Instance_CpuOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse_Instance_CpuOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Numa

	// no validation rules for CoreCount

	// no validation rules for ThreadPerCore

	if len(errors) > 0 {
		return ListInstancesResponse_Instance_CpuOptionsMultiError(errors)
	}

	return nil
}

// ListInstancesResponse_Instance_CpuOptionsMultiError is an error wrapping
// multiple validation errors returned by
// ListInstancesResponse_Instance_CpuOptions.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesResponse_Instance_CpuOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponse_Instance_CpuOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponse_Instance_CpuOptionsMultiError) AllErrors() []error { return m }

// ListInstancesResponse_Instance_CpuOptionsValidationError is the validation
// error returned by ListInstancesResponse_Instance_CpuOptions.Validate if the
// designated constraints aren't met.
type ListInstancesResponse_Instance_CpuOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponse_Instance_CpuOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponse_Instance_CpuOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponse_Instance_CpuOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponse_Instance_CpuOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponse_Instance_CpuOptionsValidationError) ErrorName() string {
	return "ListInstancesResponse_Instance_CpuOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponse_Instance_CpuOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse_Instance_CpuOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponse_Instance_CpuOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponse_Instance_CpuOptionsValidationError{}

// Validate checks the field values on
// ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetMultiError, or
// nil if none found.
func (m *ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrivateIpAddress

	// no validation rules for Primary

	if len(errors) > 0 {
		return ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetMultiError(errors)
	}

	return nil
}

// ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetMultiError is an
// error wrapping multiple validation errors returned by
// ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet.ValidateAll()
// if the designated constraints aren't met.
type ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetMultiError) AllErrors() []error {
	return m
}

// ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetValidationError
// is the validation error returned by
// ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet.Validate if
// the designated constraints aren't met.
type ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetValidationError) ErrorName() string {
	return "ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse_Instance_NetworkInterface_PrivateIpSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponse_Instance_NetworkInterface_PrivateIpSetValidationError{}

// Validate checks the field values on
// ListInstancesResponse_Instance_NetworkInterface_Ipv6Set with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse_Instance_NetworkInterface_Ipv6Set) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListInstancesResponse_Instance_NetworkInterface_Ipv6Set with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesResponse_Instance_NetworkInterface_Ipv6SetMultiError, or nil
// if none found.
func (m *ListInstancesResponse_Instance_NetworkInterface_Ipv6Set) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse_Instance_NetworkInterface_Ipv6Set) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ipv6Address

	if len(errors) > 0 {
		return ListInstancesResponse_Instance_NetworkInterface_Ipv6SetMultiError(errors)
	}

	return nil
}

// ListInstancesResponse_Instance_NetworkInterface_Ipv6SetMultiError is an
// error wrapping multiple validation errors returned by
// ListInstancesResponse_Instance_NetworkInterface_Ipv6Set.ValidateAll() if
// the designated constraints aren't met.
type ListInstancesResponse_Instance_NetworkInterface_Ipv6SetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponse_Instance_NetworkInterface_Ipv6SetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponse_Instance_NetworkInterface_Ipv6SetMultiError) AllErrors() []error {
	return m
}

// ListInstancesResponse_Instance_NetworkInterface_Ipv6SetValidationError is
// the validation error returned by
// ListInstancesResponse_Instance_NetworkInterface_Ipv6Set.Validate if the
// designated constraints aren't met.
type ListInstancesResponse_Instance_NetworkInterface_Ipv6SetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponse_Instance_NetworkInterface_Ipv6SetValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListInstancesResponse_Instance_NetworkInterface_Ipv6SetValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListInstancesResponse_Instance_NetworkInterface_Ipv6SetValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListInstancesResponse_Instance_NetworkInterface_Ipv6SetValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListInstancesResponse_Instance_NetworkInterface_Ipv6SetValidationError) ErrorName() string {
	return "ListInstancesResponse_Instance_NetworkInterface_Ipv6SetValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponse_Instance_NetworkInterface_Ipv6SetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse_Instance_NetworkInterface_Ipv6Set.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponse_Instance_NetworkInterface_Ipv6SetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponse_Instance_NetworkInterface_Ipv6SetValidationError{}

// Validate checks the field values on ListRegionsResponse_Region with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegionsResponse_Region) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegionsResponse_Region with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegionsResponse_RegionMultiError, or nil if none found.
func (m *ListRegionsResponse_Region) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegionsResponse_Region) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegionEndPoint

	// no validation rules for LocalName

	// no validation rules for RegionId

	// no validation rules for Status

	if len(errors) > 0 {
		return ListRegionsResponse_RegionMultiError(errors)
	}

	return nil
}

// ListRegionsResponse_RegionMultiError is an error wrapping multiple
// validation errors returned by ListRegionsResponse_Region.ValidateAll() if
// the designated constraints aren't met.
type ListRegionsResponse_RegionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegionsResponse_RegionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegionsResponse_RegionMultiError) AllErrors() []error { return m }

// ListRegionsResponse_RegionValidationError is the validation error returned
// by ListRegionsResponse_Region.Validate if the designated constraints aren't met.
type ListRegionsResponse_RegionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsResponse_RegionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsResponse_RegionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsResponse_RegionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsResponse_RegionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsResponse_RegionValidationError) ErrorName() string {
	return "ListRegionsResponse_RegionValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsResponse_RegionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsResponse_Region.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsResponse_RegionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsResponse_RegionValidationError{}

// Validate checks the field values on ListImagesResponse_Image with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListImagesResponse_Image) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImagesResponse_Image with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImagesResponse_ImageMultiError, or nil if none found.
func (m *ListImagesResponse_Image) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImagesResponse_Image) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreationTime

	// no validation rules for Status

	// no validation rules for ImageFamily

	// no validation rules for Progress

	// no validation rules for IsCopied

	// no validation rules for IsSupportIoOptimized

	// no validation rules for ImageOwnerAlias

	// no validation rules for IsSupportCloudInit

	// no validation rules for ImageVersion

	// no validation rules for Usage

	// no validation rules for IsSelfShared

	// no validation rules for Description

	// no validation rules for Size

	// no validation rules for ResourceGroupId

	// no validation rules for Platform

	// no validation rules for OsNameEn

	// no validation rules for ImageName

	// no validation rules for OsName

	// no validation rules for ImageId

	// no validation rules for OsType

	// no validation rules for IsSubscribed

	// no validation rules for ProductCode

	// no validation rules for Architecture

	// no validation rules for IsPublic

	// no validation rules for ImageOwnerId

	// no validation rules for LoginAsNonRootSupported

	// no validation rules for SupplierName

	if len(errors) > 0 {
		return ListImagesResponse_ImageMultiError(errors)
	}

	return nil
}

// ListImagesResponse_ImageMultiError is an error wrapping multiple validation
// errors returned by ListImagesResponse_Image.ValidateAll() if the designated
// constraints aren't met.
type ListImagesResponse_ImageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImagesResponse_ImageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImagesResponse_ImageMultiError) AllErrors() []error { return m }

// ListImagesResponse_ImageValidationError is the validation error returned by
// ListImagesResponse_Image.Validate if the designated constraints aren't met.
type ListImagesResponse_ImageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImagesResponse_ImageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImagesResponse_ImageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImagesResponse_ImageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImagesResponse_ImageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImagesResponse_ImageValidationError) ErrorName() string {
	return "ListImagesResponse_ImageValidationError"
}

// Error satisfies the builtin error interface
func (e ListImagesResponse_ImageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImagesResponse_Image.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImagesResponse_ImageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImagesResponse_ImageValidationError{}

// Validate checks the field values on ListInstanceTypesResponse_InstanceType
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListInstanceTypesResponse_InstanceType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListInstanceTypesResponse_InstanceType with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListInstanceTypesResponse_InstanceTypeMultiError, or nil if none found.
func (m *ListInstanceTypesResponse_InstanceType) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstanceTypesResponse_InstanceType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocalStorageCategory

	// no validation rules for PrimaryEniQueueNumber

	// no validation rules for MemorySize

	// no validation rules for LocalStorageCapacity

	// no validation rules for InstanceFamilyLevel

	// no validation rules for InstancePpsRx

	// no validation rules for EniIpv6AddressQuantity

	// no validation rules for MaximumQueueNumberPerEni

	// no validation rules for InstanceTypeId

	// no validation rules for InstanceBandwidthRx

	// no validation rules for SecondaryEniQueueNumber

	// no validation rules for GpuSpec

	// no validation rules for QueuePairNumber

	// no validation rules for EriQuatity

	// no validation rules for GpuAmount

	// no validation rules for TotalEniQueueQuantity

	// no validation rules for NvmeSupport

	// no validation rules for DiskQuantity

	// no validation rules for InitialCredit

	// no validation rules for LocalStorageAmount

	// no validation rules for BaselineCredit

	// no validation rules for InstancePpsTx

	// no validation rules for EniPrivateIpAddressQuantity

	// no validation rules for CpuCoreCount

	// no validation rules for InstanceTypeFamily

	// no validation rules for EniQuantity

	if len(errors) > 0 {
		return ListInstanceTypesResponse_InstanceTypeMultiError(errors)
	}

	return nil
}

// ListInstanceTypesResponse_InstanceTypeMultiError is an error wrapping
// multiple validation errors returned by
// ListInstanceTypesResponse_InstanceType.ValidateAll() if the designated
// constraints aren't met.
type ListInstanceTypesResponse_InstanceTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstanceTypesResponse_InstanceTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstanceTypesResponse_InstanceTypeMultiError) AllErrors() []error { return m }

// ListInstanceTypesResponse_InstanceTypeValidationError is the validation
// error returned by ListInstanceTypesResponse_InstanceType.Validate if the
// designated constraints aren't met.
type ListInstanceTypesResponse_InstanceTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstanceTypesResponse_InstanceTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstanceTypesResponse_InstanceTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstanceTypesResponse_InstanceTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstanceTypesResponse_InstanceTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstanceTypesResponse_InstanceTypeValidationError) ErrorName() string {
	return "ListInstanceTypesResponse_InstanceTypeValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstanceTypesResponse_InstanceTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstanceTypesResponse_InstanceType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstanceTypesResponse_InstanceTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstanceTypesResponse_InstanceTypeValidationError{}
