syntax = "proto3";

package api.region.v1;

option go_package = "/api/instance/v1;v1";
option java_multiple_files = true;
option java_package = "api.instance.v1";

service Instance {
  // 可使用的阿里云地域
  rpc ListRegion (ListRegionRequest) returns (ListRegionResponse);
  // 选择镜像
  rpc ListImage (ListImageRequest) returns (ListImageResponse);
  // 选择实例规格
  rpc ListInstanceType(ListInstanceTypeRequest) returns (ListInstanceTypeResponse);
  // 创建实例
  rpc CreateInstance (CreateInstanceRequest) returns (CreateInstanceResponse);
  // 实例列表
  rpc ListInstance (ListInstanceRequest) returns (ListInstanceResponse);
  // 开机
  rpc StartInstance(StartInstanceRequest) returns (StartInstanceResponse);
  // 关机
  rpc StopInstance(StopInstanceRequest) returns (StopInstanceResponse);
  // 重启
  rpc RebootInstance(RebootInstanceRequest) returns (RebootInstanceResponse);
  // 删除实例
  rpc DeleteInstance(DeleteInstanceRequest) returns (DeleteInstanceResponse);
}

message CreateInstanceRequest {
  // 区域id
  string region_id = 1;
  // 镜像id
  string image_id = 2;
  // 实例名称
  string name = 3;
  // 实例规格
  string instance_type = 4;
  // 系统盘大小
  uint32 system_disk_size = 5;
  // 是否为instance_name自动添加有序后缀（默认false）
  bool unique_suffix = 6;
  // 创建数量(1-100，默认1)
  uint32 amount = 7;
  // 实例密码
  string password = 8;
}

message CreateInstanceResponse {
  // 阿里云请求id
  string request_id = 1;
  // 订单id，该参数只有创建包年包月ECS实例（请求参数InstanceChargeType=PrePaid）时有返回值
  string order_id = 2;
  // 订单成交价
  float trade_price = 3;
  // 实例id列表
  repeated string instance_id_sets = 4;
}

message ListInstanceRequest {
  string access_key_id = 1;
  string access_key_secret = 2;
  // 实例所属的地域ID
  string region_id = 3;
  // 实例状态列表的页码，起始值1，默认值1
  uint32 page_number = 4;
  // 分页查询时设置的每页行数
  uint32 page_size = 5;
  // 查询凭证（Token），取值为上一次API调用返回的NextToken参数值
  string next_token = 6;
}

message ListInstanceResponse {
  string request_id = 1;
  // 实例状态列表的页码，起始值1，默认值1
  uint32 page_number = 2;
  // 分页查询时设置的每页行数
  uint32 page_size = 3;
  // 查询到的实例总数
  uint32 total_count = 4;
  // 本次调用返回的查询凭证值
  string next_token = 5;
  message Instance {
    // 实例ID
    string instance_id = 1;
    // 实例名称
    string instance_name = 2;
    // 实例规格
    string instance_type = 3;
    // 实例的计费方式
    string instance_charge_type = 4;
    // 实例所属地域ID
    string region_id = 5;
    // vCPU数
    uint32 cpu = 6;
    // 实例操作系统的英文名称
    string os_name_en = 7;
    // 实例状态
    string status = 8;
    // 实例创建时间，UTC+0时间
    string creation_time = 9;
    // 实例网络类型
    string instance_network_type = 10;
    // 内存大小，单位为MiB
    uint32 memory = 11;
    // 实例规格附带的GPU类型
    string gpu_spec = 12;
    // 按量付费实例的自动释放时间
    string auto_release_time = 13;
    // 实例规格附带的GPU数量
    uint32 gpu_amount = 14;
    // 实例的操作系统类型
    string os_type = 15;
    // 过期时间
    string expired_time = 16;
    // 实例最近一次的启动时间
    string start_time = 17;
    // 实例公网IP地址
    repeated string public_ip_address= 18;
    // 经典网络类型实例的内网IP地址
    repeated string inner_ip_address = 19;
    // HPC实例的Rdma网络IP
    repeated string rdma_ip_address = 20;
    // 实例所属安全组集合
    repeated string security_group_ids = 21;
    // 弹性公网IP绑定信息
    message EipAddress {
      // 弹性公网IP的ID
      string allocation_id = 1;
      // 是否可以解绑弹性公网IP
      bool is_support_un_associate = 2;
      // 弹性公网IP的计费方式
      string internal_charge_type = 3;
      // 弹性公网IP
      string ip_address = 4;
      // 弹性公网IP
      uint32 bandwidth = 5;
    }
    EipAddress eip_address = 22;
    // 实例是否可以挂载数据盘
    bool device_available = 23;
    // 实例挂载的本地存储容量
    uint64 local_storage_capacity = 24;
    // 实例挂载的本地存储数量
    uint32 local_storage_amount = 25;
    // 实例运行的镜像ID
    string image_id = 26;
  }
  // 实例信息
  repeated Instance instances = 6;
}

message ListRegionRequest {
  string access_key_id = 1;
  string access_key_secret = 2;
  string instance_charge_type = 3;
  string resource_type = 4;
  string accept_language = 5;
}

message RegionResponse {
  string region_end_point = 1;
  string local_name = 2;
  string region_id = 3;
}

message ListRegionResponse {
  repeated RegionResponse regions = 1;
}

message ListImageRequest {
  string access_key_id = 1;
  string access_key_secret = 2;
  string region_id = 3;
}

message ImageResponse {
  string image_name = 1;
  string os_name = 2;
  string os_name_en = 3;
  string architecture = 4;
  string os_type = 5;
}

message ListImageResponse {
  repeated ImageResponse image_responses = 1;
}

message ListInstanceTypeRequest {
  string access_key_id = 1;
  string access_key_secret = 2;
}

message ListInstanceTypeResponse {
  string instance_type_id = 1;
  string instance_type_family = 2;
  int32 memory_size = 3;
  int32 cpu_core_count = 4;
  string gpu_sec = 5;
}

message StartInstanceRequest {
  string access_key_id = 1;
  string access_key_secret = 2;
  string instance_id = 3;
}

message StartInstanceResponse {
  // 请求ID
  string request_id = 1;
  // 实例操作结果错误码。返回值200为成功
  string code = 2;
  // 实例操作返回错误信息。返回值success为成功
  string message = 3;
  // 实例ID
  string instance_id = 4;
  // 实例当前状态
  string current_status = 5;
  // 操作前实例的状态
  string previous_status = 6;
}

message StopInstanceRequest {
  string access_key_id = 1;
  string access_key_secret = 2;
  string instance_id = 3;
}

message StopInstanceResponse {
  string request_id = 1;
}

message RebootInstanceRequest {
  string access_key_id = 1;
  string access_key_secret = 2;
  string instance_id = 3;
}

message RebootInstanceResponse {
  string request_id = 1;
}

message DeleteInstanceRequest {
  string access_key_id = 1;
  string access_key_secret = 2;
  string instance_id = 3;
}

message DeleteInstanceResponse {
  string request_id = 1;
}