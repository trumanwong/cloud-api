// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: api/instance/v1/instance.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阿里云AccessKey ID
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// 阿里云AccessKey Secret
	AccessKeySecret string `protobuf:"bytes,2,opt,name=access_key_secret,json=accessKeySecret,proto3" json:"access_key_secret,omitempty"`
	// 访问的域名
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// 地域id
	RegionId string `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// 镜像id
	ImageId string `protobuf:"bytes,5,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// 实例名称
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// 实例规格
	InstanceType string `protobuf:"bytes,7,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// 系统盘大小
	SystemDiskSize string `protobuf:"bytes,8,opt,name=system_disk_size,json=systemDiskSize,proto3" json:"system_disk_size,omitempty"`
	// 是否为instance_name自动添加有序后缀（默认false）
	UniqueSuffix bool `protobuf:"varint,9,opt,name=unique_suffix,json=uniqueSuffix,proto3" json:"unique_suffix,omitempty"`
	// 创建数量(1-100，默认1)
	Amount uint32 `protobuf:"varint,10,opt,name=amount,proto3" json:"amount,omitempty"`
	// 实例密码
	Password string `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
	// 是否只预检此次请求。取值范围：
	// true：发送检查请求，不会创建实例。检查项包括是否填写了必需参数、请求格式、业务限制和ECS库存。如果检查不通过，则返回对应错误。如果检查通过，则返回错误码DryRunOperation。
	// false（默认）：发送正常请求，通过检查后直接创建实例。
	DryRun bool `protobuf:"varint,12,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *CreateInstancesRequest) Reset() {
	*x = CreateInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstancesRequest) ProtoMessage() {}

func (x *CreateInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstancesRequest.ProtoReflect.Descriptor instead.
func (*CreateInstancesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{0}
}

func (x *CreateInstancesRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *CreateInstancesRequest) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *CreateInstancesRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *CreateInstancesRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *CreateInstancesRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *CreateInstancesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateInstancesRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *CreateInstancesRequest) GetSystemDiskSize() string {
	if x != nil {
		return x.SystemDiskSize
	}
	return ""
}

func (x *CreateInstancesRequest) GetUniqueSuffix() bool {
	if x != nil {
		return x.UniqueSuffix
	}
	return false
}

func (x *CreateInstancesRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateInstancesRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateInstancesRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type CreateInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阿里云请求id
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 订单id，该参数只有创建包年包月ECS实例（请求参数InstanceChargeType=PrePaid）时有返回值
	OrderId string `protobuf:"bytes,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 订单成交价
	TradePrice float32 `protobuf:"fixed32,3,opt,name=trade_price,json=tradePrice,proto3" json:"trade_price,omitempty"`
	// 实例id列表
	InstanceIdSets []string `protobuf:"bytes,4,rep,name=instance_id_sets,json=instanceIdSets,proto3" json:"instance_id_sets,omitempty"`
}

func (x *CreateInstancesResponse) Reset() {
	*x = CreateInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstancesResponse) ProtoMessage() {}

func (x *CreateInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstancesResponse.ProtoReflect.Descriptor instead.
func (*CreateInstancesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{1}
}

func (x *CreateInstancesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *CreateInstancesResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *CreateInstancesResponse) GetTradePrice() float32 {
	if x != nil {
		return x.TradePrice
	}
	return 0
}

func (x *CreateInstancesResponse) GetInstanceIdSets() []string {
	if x != nil {
		return x.InstanceIdSets
	}
	return nil
}

type ListInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阿里云AccessKey ID
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// 阿里云AccessKey Secret
	AccessKeySecret string `protobuf:"bytes,2,opt,name=access_key_secret,json=accessKeySecret,proto3" json:"access_key_secret,omitempty"`
	// 访问的域名
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// 实例所属的地域ID
	RegionId string `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// 实例状态列表的页码，起始值1，默认值1
	PageNumber uint32 `protobuf:"varint,5,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// 分页查询时设置的每页行数。
	//  最大值为100。
	//  默认值为10。
	PageSize uint32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 查询凭证（Token），取值为上一次API调用返回的NextToken参数值
	NextToken string `protobuf:"bytes,7,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
	// 实例名称，支持使用通配符*进行模糊搜索。
	InstanceName string `protobuf:"bytes,8,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	// 是否只预检此次请求。取值范围：
	//  true：发送检查请求，不会查询资源状况。检查项包括AccessKey是否有效、RAM用户的授权情况和是否填写了必需参数。如果检查不通过，则返回对应错误。如果检查通过，会返回错误码DryRunOperation。
	//  false（默认值）：发送正常请求，通过检查后返回2XX HTTP状态码并直接查询资源状况。
	DryRun bool `protobuf:"varint,9,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *ListInstancesRequest) Reset() {
	*x = ListInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesRequest) ProtoMessage() {}

func (x *ListInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListInstancesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{2}
}

func (x *ListInstancesRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *ListInstancesRequest) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *ListInstancesRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *ListInstancesRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListInstancesRequest) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListInstancesRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListInstancesRequest) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *ListInstancesRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *ListInstancesRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type ListInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 实例状态列表的页码，起始值1，默认值1
	PageNumber uint32 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// 分页查询时设置的每页行数
	PageSize uint32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 查询到的实例总数
	TotalCount uint32 `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// 本次调用返回的查询凭证值
	NextToken string `protobuf:"bytes,5,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
	// 实例信息
	Instances []*ListInstancesResponse_Instance `protobuf:"bytes,6,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *ListInstancesResponse) Reset() {
	*x = ListInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse) ProtoMessage() {}

func (x *ListInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{3}
}

func (x *ListInstancesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ListInstancesResponse) GetPageNumber() uint32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListInstancesResponse) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListInstancesResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListInstancesResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *ListInstancesResponse) GetInstances() []*ListInstancesResponse_Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type ListRegionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阿里云AccessKey ID
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// 阿里云AccessKey Secret
	AccessKeySecret string `protobuf:"bytes,2,opt,name=access_key_secret,json=accessKeySecret,proto3" json:"access_key_secret,omitempty"`
	// 访问的域名
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// 实例的计费方式，更多详情，请参见计费概述。取值范围：
	//  PrePaid：包年包月。此时，您必须确认自己的账号支持余额支付或者信用支付，否则将报错InvalidPayMethod。
	//  PostPaid：按量付费。
	//  默认值：PostPaid
	InstanceChargeType string `protobuf:"bytes,4,opt,name=instance_charge_type,json=instanceChargeType,proto3" json:"instance_charge_type,omitempty"`
	// 资源类型。取值范围：
	//  instance：ECS实例
	//  disk：磁盘
	//  reservedinstance：预留实例券
	//  scu：存储容量单位包
	//  默认值：instance
	ResourceType string `protobuf:"bytes,5,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// 根据汉语、英语和日语筛选返回结果。更多详情，请参见RFC7231。取值范围：
	//  zh-CN：中文
	//  en-US：英文
	//  ja：日文
	//  默认值：zh-CN
	AcceptLanguage string `protobuf:"bytes,6,opt,name=accept_language,json=acceptLanguage,proto3" json:"accept_language,omitempty"`
}

func (x *ListRegionsRequest) Reset() {
	*x = ListRegionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionsRequest) ProtoMessage() {}

func (x *ListRegionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionsRequest.ProtoReflect.Descriptor instead.
func (*ListRegionsRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{4}
}

func (x *ListRegionsRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *ListRegionsRequest) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *ListRegionsRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *ListRegionsRequest) GetInstanceChargeType() string {
	if x != nil {
		return x.InstanceChargeType
	}
	return ""
}

func (x *ListRegionsRequest) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *ListRegionsRequest) GetAcceptLanguage() string {
	if x != nil {
		return x.AcceptLanguage
	}
	return ""
}

type ListRegionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 地域信息集合
	Regions []*ListRegionsResponse_Region `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *ListRegionsResponse) Reset() {
	*x = ListRegionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionsResponse) ProtoMessage() {}

func (x *ListRegionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionsResponse.ProtoReflect.Descriptor instead.
func (*ListRegionsResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{5}
}

func (x *ListRegionsResponse) GetRegions() []*ListRegionsResponse_Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

type ListImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阿里云AccessKey ID
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// 阿里云AccessKey Secret
	AccessKeySecret string `protobuf:"bytes,2,opt,name=access_key_secret,json=accessKeySecret,proto3" json:"access_key_secret,omitempty"`
	// 访问的域名
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// 地域id
	RegionId string `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// 查询某种状态下的镜像。取值范围：
	//  Creating：镜像正在创建中。
	//  Waiting：多任务排队中。
	//  Available（默认）：您可以使用的镜像。
	//  UnAvailable：您不能使用的镜像。
	//  CreateFailed：创建失败的镜像。
	//  Deprecated：已弃用的镜像。
	//  支持同时取多个值，值之间以半角逗号（,）隔开。
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// 镜像ID。
	ImageId string `protobuf:"bytes,6,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// 订阅型镜像是否已经超过使用期限。
	ShowExpired bool `protobuf:"varint,7,opt,name=show_expired,json=showExpired,proto3" json:"show_expired,omitempty"`
	// 镜像名称
	ImageName string `protobuf:"bytes,8,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
}

func (x *ListImagesRequest) Reset() {
	*x = ListImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesRequest) ProtoMessage() {}

func (x *ListImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesRequest.ProtoReflect.Descriptor instead.
func (*ListImagesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{6}
}

func (x *ListImagesRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *ListImagesRequest) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *ListImagesRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *ListImagesRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListImagesRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListImagesRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ListImagesRequest) GetShowExpired() bool {
	if x != nil {
		return x.ShowExpired
	}
	return false
}

func (x *ListImagesRequest) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

type ListImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当前分页包含多少条目。
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 当前页码。
	PageNumber int32 `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	// 请求ID。
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 镜像总数
	TotalCount int32 `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// 镜像所属地域ID。
	RegionId string                      `protobuf:"bytes,5,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Images   []*ListImagesResponse_Image `protobuf:"bytes,6,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *ListImagesResponse) Reset() {
	*x = ListImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesResponse) ProtoMessage() {}

func (x *ListImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesResponse.ProtoReflect.Descriptor instead.
func (*ListImagesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{7}
}

func (x *ListImagesResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListImagesResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListImagesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ListImagesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListImagesResponse) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListImagesResponse) GetImages() []*ListImagesResponse_Image {
	if x != nil {
		return x.Images
	}
	return nil
}

type ListInstanceTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阿里云AccessKey ID
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// 阿里云AccessKey Secret
	AccessKeySecret string `protobuf:"bytes,2,opt,name=access_key_secret,json=accessKeySecret,proto3" json:"access_key_secret,omitempty"`
	// 访问的域名
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// 分页查询时每页的最大条目数。最大值：1600
	//    默认值：1600
	MaxResults int64 `protobuf:"varint,4,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// 查询凭证（Token）。取值为上一次调用该接口返回的NextToken参数值，初次调用接口时无需设置该参数。
	NextToken string `protobuf:"bytes,5,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
}

func (x *ListInstanceTypesRequest) Reset() {
	*x = ListInstanceTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypesRequest) ProtoMessage() {}

func (x *ListInstanceTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypesRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceTypesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{8}
}

func (x *ListInstanceTypesRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *ListInstanceTypesRequest) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *ListInstanceTypesRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *ListInstanceTypesRequest) GetMaxResults() int64 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (x *ListInstanceTypesRequest) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

type ListInstanceTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求ID。
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 实例规格集合。
	InstanceTypes []*ListInstanceTypesResponse_InstanceType `protobuf:"bytes,2,rep,name=instance_types,json=instanceTypes,proto3" json:"instance_types,omitempty"`
	// 本次调用返回的查询凭证（Token）。
	NextToken string `protobuf:"bytes,3,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
}

func (x *ListInstanceTypesResponse) Reset() {
	*x = ListInstanceTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypesResponse) ProtoMessage() {}

func (x *ListInstanceTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypesResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceTypesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{9}
}

func (x *ListInstanceTypesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ListInstanceTypesResponse) GetInstanceTypes() []*ListInstanceTypesResponse_InstanceType {
	if x != nil {
		return x.InstanceTypes
	}
	return nil
}

func (x *ListInstanceTypesResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

type StartInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阿里云AccessKey ID
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// 阿里云AccessKey Secret
	AccessKeySecret string `protobuf:"bytes,2,opt,name=access_key_secret,json=accessKeySecret,proto3" json:"access_key_secret,omitempty"`
	// 访问的域名
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// 地域id
	RegionId string `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// 实例ID, 数组长度取值范围：1~100
	InstanceIds []string `protobuf:"bytes,5,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	//  设置批量操作模式。取值范围：
	//    AllTogether：该模式下，如果实例全部启动成功，则返回成功信息；如果任意一个实例校验不通过，则所有实例启动失败，并返回失败信息。
	//    SuccessFirst：该模式下，分别启动每个实例，返回结果包含每个实例的操作结果信息。
	//    默认值：AllTogether
	BatchOptimization string `protobuf:"bytes,6,opt,name=batch_optimization,json=batchOptimization,proto3" json:"batch_optimization,omitempty"`
	// 是否只预检此次请求。取值范围：
	// true：发送检查请求，不会创建实例。检查项包括是否填写了必需参数、请求格式、业务限制和ECS库存。如果检查不通过，则返回对应错误。如果检查通过，则返回错误码DryRunOperation。
	// false（默认）：发送正常请求，通过检查后直接创建实例。
	DryRun bool `protobuf:"varint,7,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *StartInstancesRequest) Reset() {
	*x = StartInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstancesRequest) ProtoMessage() {}

func (x *StartInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstancesRequest.ProtoReflect.Descriptor instead.
func (*StartInstancesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{10}
}

func (x *StartInstancesRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *StartInstancesRequest) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *StartInstancesRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *StartInstancesRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *StartInstancesRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *StartInstancesRequest) GetBatchOptimization() string {
	if x != nil {
		return x.BatchOptimization
	}
	return ""
}

func (x *StartInstancesRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type InstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例操作结果错误码。返回值200为成功
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// 实例操作返回错误信息。返回值success为成功
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 实例ID
	InstanceId string `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// 实例当前状态
	CurrentStatus string `protobuf:"bytes,4,opt,name=current_status,json=currentStatus,proto3" json:"current_status,omitempty"`
	// 操作前实例的状态
	PreviousStatus string `protobuf:"bytes,5,opt,name=previous_status,json=previousStatus,proto3" json:"previous_status,omitempty"`
}

func (x *InstanceResponse) Reset() {
	*x = InstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceResponse) ProtoMessage() {}

func (x *InstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceResponse.ProtoReflect.Descriptor instead.
func (*InstanceResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{11}
}

func (x *InstanceResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *InstanceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InstanceResponse) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceResponse) GetCurrentStatus() string {
	if x != nil {
		return x.CurrentStatus
	}
	return ""
}

func (x *InstanceResponse) GetPreviousStatus() string {
	if x != nil {
		return x.PreviousStatus
	}
	return ""
}

type StartInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求ID
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 由InstanceResponse组成的数组格式，返回每个实例操作的前后状态及操作结果。
	InstanceResponses []*InstanceResponse `protobuf:"bytes,2,rep,name=instance_responses,json=instanceResponses,proto3" json:"instance_responses,omitempty"`
}

func (x *StartInstancesResponse) Reset() {
	*x = StartInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstancesResponse) ProtoMessage() {}

func (x *StartInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstancesResponse.ProtoReflect.Descriptor instead.
func (*StartInstancesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{12}
}

func (x *StartInstancesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StartInstancesResponse) GetInstanceResponses() []*InstanceResponse {
	if x != nil {
		return x.InstanceResponses
	}
	return nil
}

type StopInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阿里云AccessKey ID
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// 阿里云AccessKey Secret
	AccessKeySecret string `protobuf:"bytes,2,opt,name=access_key_secret,json=accessKeySecret,proto3" json:"access_key_secret,omitempty"`
	// 访问的域名
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// 地域id
	RegionId string `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// 是否强制关机。取值范围：
	//  true：强制关机。相当于典型的断电操作，所有未写入存储设备的缓存数据会丢失。
	//  false：正常关机。
	//  默认值：false
	ForceStop bool `protobuf:"varint,5,opt,name=force_stop,json=forceStop,proto3" json:"force_stop,omitempty"`
	// 停止按量付费ECS实例时，设置的停止模式。取值
	//  StopCharging：节省停机模式。有关StopCharging生效的条件，请参见按量付费实例节省停机模式的启用条件章节。
	//  KeepCharging：普通停机模式。实例停止后仍继续收费。
	//  默认值：如果您在ECS控制台上开启VPC内实例节省停机模式（更多信息，请参见打开默认启用节省停机模式），并符合开启条件，则默认值为StopCharging。否则，默认值为KeepCharging。
	StoppedMode string `protobuf:"bytes,6,opt,name=stopped_mode,json=stoppedMode,proto3" json:"stopped_mode,omitempty"`
	// 设置批量操作模式。取值范围：
	//   AllTogether：该模式下，如果实例全部停止成功，则返回成功信息；如果任意一个实例校验不通过，则所有实例停止失败，并返回失败信息。
	//   SuccessFirst：该模式下，分别停止每个实例，返回结果包含每个实例的操作结果信息。
	//   默认值：AllTogether
	BatchOptimization string `protobuf:"bytes,7,opt,name=batch_optimization,json=batchOptimization,proto3" json:"batch_optimization,omitempty"`
	// 实例ID列表
	InstanceIds []string `protobuf:"bytes,8,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	// 是否只预检此次请求。取值范围：
	// true：发送检查请求，不会创建实例。检查项包括是否填写了必需参数、请求格式、业务限制和ECS库存。如果检查不通过，则返回对应错误。如果检查通过，则返回错误码DryRunOperation。
	// false（默认）：发送正常请求，通过检查后直接创建实例。
	DryRun bool `protobuf:"varint,9,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *StopInstancesRequest) Reset() {
	*x = StopInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInstancesRequest) ProtoMessage() {}

func (x *StopInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInstancesRequest.ProtoReflect.Descriptor instead.
func (*StopInstancesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{13}
}

func (x *StopInstancesRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *StopInstancesRequest) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *StopInstancesRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *StopInstancesRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *StopInstancesRequest) GetForceStop() bool {
	if x != nil {
		return x.ForceStop
	}
	return false
}

func (x *StopInstancesRequest) GetStoppedMode() string {
	if x != nil {
		return x.StoppedMode
	}
	return ""
}

func (x *StopInstancesRequest) GetBatchOptimization() string {
	if x != nil {
		return x.BatchOptimization
	}
	return ""
}

func (x *StopInstancesRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *StopInstancesRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type StopInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 由InstanceResponse组成的数组格式，返回每个实例操作的前后状态及操作结果。
	InstanceResponses []*InstanceResponse `protobuf:"bytes,2,rep,name=instance_responses,json=instanceResponses,proto3" json:"instance_responses,omitempty"`
}

func (x *StopInstancesResponse) Reset() {
	*x = StopInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInstancesResponse) ProtoMessage() {}

func (x *StopInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInstancesResponse.ProtoReflect.Descriptor instead.
func (*StopInstancesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{14}
}

func (x *StopInstancesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *StopInstancesResponse) GetInstanceResponses() []*InstanceResponse {
	if x != nil {
		return x.InstanceResponses
	}
	return nil
}

type RebootInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阿里云AccessKey ID
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// 阿里云AccessKey Secret
	AccessKeySecret string `protobuf:"bytes,2,opt,name=access_key_secret,json=accessKeySecret,proto3" json:"access_key_secret,omitempty"`
	// 访问的域名
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// 地域id
	RegionId string `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// 是否强制重启。取值范围：
	//  true：强制重启。相当于典型的断电操作，所有未写入存储设备的缓存数据会丢失。
	//  false：正常重启。
	//  默认值：false
	ForceStop bool `protobuf:"varint,5,opt,name=force_stop,json=forceStop,proto3" json:"force_stop,omitempty"`
	// 设置批量操作模式。取值范围：
	//  AllTogether：该模式下，如果实例全部重启成功，则返回成功信息；如果任意一个实例校验不通过，则所有实例重启失败，并返回失败信息。
	//  SuccessFirst：该模式下，分别重启每个实例，返回结果包含每个实例的操作结果信息。
	//  默认值：AllTogether
	BatchOptimization string `protobuf:"bytes,6,opt,name=batch_optimization,json=batchOptimization,proto3" json:"batch_optimization,omitempty"`
	// 实例ID。N的取值范围：1~100。
	InstanceIds []string `protobuf:"bytes,7,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	// 是否只预检此次请求。取值范围：
	// true：发送检查请求，不会创建实例。检查项包括是否填写了必需参数、请求格式、业务限制和ECS库存。如果检查不通过，则返回对应错误。如果检查通过，则返回错误码DryRunOperation。
	// false（默认）：发送正常请求，通过检查后直接创建实例。
	DryRun bool `protobuf:"varint,8,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *RebootInstancesRequest) Reset() {
	*x = RebootInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootInstancesRequest) ProtoMessage() {}

func (x *RebootInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootInstancesRequest.ProtoReflect.Descriptor instead.
func (*RebootInstancesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{15}
}

func (x *RebootInstancesRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *RebootInstancesRequest) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *RebootInstancesRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RebootInstancesRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *RebootInstancesRequest) GetForceStop() bool {
	if x != nil {
		return x.ForceStop
	}
	return false
}

func (x *RebootInstancesRequest) GetBatchOptimization() string {
	if x != nil {
		return x.BatchOptimization
	}
	return ""
}

func (x *RebootInstancesRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *RebootInstancesRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type RebootInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// 由InstanceResponse组成的数组格式，返回每个实例操作的前后状态及操作结果。
	InstanceResponses []*InstanceResponse `protobuf:"bytes,2,rep,name=instance_responses,json=instanceResponses,proto3" json:"instance_responses,omitempty"`
}

func (x *RebootInstancesResponse) Reset() {
	*x = RebootInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootInstancesResponse) ProtoMessage() {}

func (x *RebootInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootInstancesResponse.ProtoReflect.Descriptor instead.
func (*RebootInstancesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{16}
}

func (x *RebootInstancesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *RebootInstancesResponse) GetInstanceResponses() []*InstanceResponse {
	if x != nil {
		return x.InstanceResponses
	}
	return nil
}

type DeleteInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 阿里云AccessKey ID
	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	// 阿里云AccessKey Secret
	AccessKeySecret string `protobuf:"bytes,2,opt,name=access_key_secret,json=accessKeySecret,proto3" json:"access_key_secret,omitempty"`
	// 访问的域名
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// 地域id
	RegionId string `protobuf:"bytes,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// 是否强制释放运行中（Running）的实例。
	//  true：强制释放运行中（Running）的实例。强制释放相当于断电，实例内存以及存储中的临时数据都会被擦除，无法恢复。
	//  false：正常释放实例，此时实例必须处于已停止（Stopped）状态。
	//  默认值为false。
	Force bool `protobuf:"varint,5,opt,name=force,proto3" json:"force,omitempty"`
	// 是否释放已到期的包年包月实例。
	//  默认值为false。
	TerminateSubscription bool     `protobuf:"varint,6,opt,name=terminate_subscription,json=terminateSubscription,proto3" json:"terminate_subscription,omitempty"`
	InstanceIds           []string `protobuf:"bytes,7,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	// 是否只预检此次请求。取值范围：
	// true：发送检查请求，不会创建实例。检查项包括是否填写了必需参数、请求格式、业务限制和ECS库存。如果检查不通过，则返回对应错误。如果检查通过，则返回错误码DryRunOperation。
	// false（默认）：发送正常请求，通过检查后直接创建实例。
	DryRun bool `protobuf:"varint,8,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *DeleteInstancesRequest) Reset() {
	*x = DeleteInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstancesRequest) ProtoMessage() {}

func (x *DeleteInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstancesRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstancesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteInstancesRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *DeleteInstancesRequest) GetAccessKeySecret() string {
	if x != nil {
		return x.AccessKeySecret
	}
	return ""
}

func (x *DeleteInstancesRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *DeleteInstancesRequest) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *DeleteInstancesRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *DeleteInstancesRequest) GetTerminateSubscription() bool {
	if x != nil {
		return x.TerminateSubscription
	}
	return false
}

func (x *DeleteInstancesRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *DeleteInstancesRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type DeleteInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求ID。
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *DeleteInstancesResponse) Reset() {
	*x = DeleteInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstancesResponse) ProtoMessage() {}

func (x *DeleteInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstancesResponse.ProtoReflect.Descriptor instead.
func (*DeleteInstancesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteInstancesResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type ListInstancesResponse_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例创建时间。以ISO8601为标准，并使用UTC+0时间，格式为yyyy-MM-ddTHH:mmZ。
	CreationTime string `protobuf:"bytes,1,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// 实例序列号。
	SerialNumber string `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// 实例状态
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// 部署集ID。
	DeploymentSetId string `protobuf:"bytes,4,opt,name=deployment_set_id,json=deploymentSetId,proto3" json:"deployment_set_id,omitempty"`
	// 密钥对名称。
	KeyPairName string `protobuf:"bytes,5,opt,name=key_pair_name,json=keyPairName,proto3" json:"key_pair_name,omitempty"`
	// 实例计费周期。
	SaleCycle string `protobuf:"bytes,6,opt,name=sale_cycle,json=saleCycle,proto3" json:"sale_cycle,omitempty"`
	// 实例是否可以挂载数据盘。
	DeviceAvailable bool `protobuf:"varint,7,opt,name=device_available,json=deviceAvailable,proto3" json:"device_available,omitempty"`
	// 实例挂载的本地存储容量。
	LocalStorageCapacity int64 `protobuf:"varint,8,opt,name=local_storage_capacity,json=localStorageCapacity,proto3" json:"local_storage_capacity,omitempty"`
	// 实例描述。
	Description string `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	// 抢占式实例的保留时长，单位为小时。可能值为0~6。
	//  保留时长2~6正在邀测中，如需开通请提交工单。
	//  值为0，则为无保护期模式。
	SpotDuration int32 `protobuf:"varint,10,opt,name=spot_duration,json=spotDuration,proto3" json:"spot_duration,omitempty"`
	// 实例网络类型。可能值：
	//  classic：经典网络。
	//  vpc：专有网络VPC。
	InstanceNetworkType string `protobuf:"bytes,11,opt,name=instance_network_type,json=instanceNetworkType,proto3" json:"instance_network_type,omitempty"`
	// 实例名称
	InstanceName string `protobuf:"bytes,12,opt,name=instance_name,json=instanceName,proto3" json:"instance_name,omitempty"`
	// 实例操作系统的英文名称
	OsNameEn string `protobuf:"bytes,13,opt,name=os_name_en,json=osNameEn,proto3" json:"os_name_en,omitempty"`
	// 实例所属的HPC集群ID。
	HpcClusterId string `protobuf:"bytes,14,opt,name=hpc_cluster_id,json=hpcClusterId,proto3" json:"hpc_cluster_id,omitempty"`
	// 内存大小，单位为MiB
	Memory int32 `protobuf:"varint,15,opt,name=memory,proto3" json:"memory,omitempty"`
	// 实例的操作系统名称。
	OsName string `protobuf:"bytes,16,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	// ECS实例绑定部署集分散部署时，实例在部署集中的分组位置。
	DeploymentSetGroupNo int32 `protobuf:"varint,17,opt,name=deployment_set_group_no,json=deploymentSetGroupNo,proto3" json:"deployment_set_group_no,omitempty"`
	// 实例运行的镜像ID
	ImageId string `protobuf:"bytes,18,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// 实例规格附带的GPU类型。
	GpuSpec string `protobuf:"bytes,19,opt,name=gpu_spec,json=gpuSpec,proto3" json:"gpu_spec,omitempty"`
	// 按量付费实例的自动释放时间
	AutoReleaseTime string `protobuf:"bytes,20,opt,name=auto_release_time,json=autoReleaseTime,proto3" json:"auto_release_time,omitempty"`
	// 实例释放保护属性，指定是否支持通过控制台或API（DeleteInstance）释放实例。
	//  true：已开启实例释放保护。
	//  false：未开启实例释放保护。
	DeletionProtection bool `protobuf:"varint,21,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	// 实例停机后是否继续收费。可能值：
	//  KeepCharging：停机后继续收费，为您继续保留库存资源。
	//  StopCharging：停机后不收费。停机后，我们释放实例对应的资源，例如vCPU、内存和公网IP等资源。重启是否成功依赖于当前地域中是否仍有资源库存。
	//  Not-applicable：本实例不支持停机不收费功能。
	StoppedMode string `protobuf:"bytes,22,opt,name=stopped_mode,json=stoppedMode,proto3" json:"stopped_mode,omitempty"`
	// 实例规格附带的GPU数量
	GpuAmount int32 `protobuf:"varint,23,opt,name=gpu_amount,json=gpuAmount,proto3" json:"gpu_amount,omitempty"`
	// 实例主机名。
	HostName string `protobuf:"bytes,24,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// 实例ID
	InstanceId string `protobuf:"bytes,25,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// 公网出带宽最大值，单位为Mbit/s。
	InternetMaxBandwidthOut int32 `protobuf:"varint,26,opt,name=internet_max_bandwidth_out,json=internetMaxBandwidthOut,proto3" json:"internet_max_bandwidth_out,omitempty"`
	// 公网入带宽最大值，单位为Mbit/s。
	InternetMaxBandwidthIn int32 `protobuf:"varint,27,opt,name=internet_max_bandwidth_in,json=internetMaxBandwidthIn,proto3" json:"internet_max_bandwidth_in,omitempty"`
	// 实例规格
	InstanceType string `protobuf:"bytes,28,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// 实例的计费方式。可能值：
	//  PrePaid：包年包月。
	//  PostPaid：按量付费。
	InstanceChargeType string `protobuf:"bytes,29,opt,name=instance_charge_type,json=instanceChargeType,proto3" json:"instance_charge_type,omitempty"`
	// 实例所属地域ID
	RegionId string `protobuf:"bytes,30,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// 是否为I/O优化型实例。
	IoOptimized bool `protobuf:"varint,31,opt,name=io_optimized,json=ioOptimized,proto3" json:"io_optimized,omitempty"`
	// 实例最近一次的启动时间。以ISO8601为标准，并使用UTC+0时间，格式为yyyy-MM-ddTHH:mmZ。
	StartTime string `protobuf:"bytes,32,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// vCPU数
	Cpu int32 `protobuf:"varint,33,opt,name=cpu,proto3" json:"cpu,omitempty"`
	// 实例挂载的本地存储数量
	LocalStorageAmount int32 `protobuf:"varint,34,opt,name=local_storage_amount,json=localStorageAmount,proto3" json:"local_storage_amount,omitempty"`
	// 过期时间。以ISO8601为标准，并使用UTC+0时间，格式为yyyy-MM-ddTHH:mmZ。
	ExpiredTime string `protobuf:"bytes,35,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`
	// 实例所属的企业资源组ID。
	ResourceGroupId string `protobuf:"bytes,36,opt,name=resource_group_id,json=resourceGroupId,proto3" json:"resource_group_id,omitempty"`
	// 网络计费类型。可能值：
	//  PayByBandwidth：按固定带宽计费。
	//  PayByTraffic：按使用流量计费。
	InternetChargeType string `protobuf:"bytes,37,opt,name=internet_charge_type,json=internetChargeType,proto3" json:"internet_charge_type,omitempty"`
	// 实例所属可用区。
	ZoneId string `protobuf:"bytes,38,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	// 实例是否可以回收。
	Recyclable bool `protobuf:"varint,39,opt,name=recyclable,proto3" json:"recyclable,omitempty"`
	// 修改突发性能实例的运行模式。可能值：
	//  Standard：标准模式。
	//  Unlimited：无性能约束模式，
	CreditSpecification string `protobuf:"bytes,40,opt,name=credit_specification,json=creditSpecification,proto3" json:"credit_specification,omitempty"`
	// 实例规格族。
	InstanceTypeFamily string `protobuf:"bytes,41,opt,name=instance_type_family,json=instanceTypeFamily,proto3" json:"instance_type_family,omitempty"`
	// 实例的操作系统类型
	OsType string `protobuf:"bytes,42,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	// 实例包含的弹性网卡集合。
	NetworkInterfaces []*ListInstancesResponse_Instance_NetworkInterface `protobuf:"bytes,43,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	// 实例的锁定原因。
	OperationLocks []*ListInstancesResponse_Instance_OperationLock `protobuf:"bytes,44,rep,name=operation_locks,json=operationLocks,proto3" json:"operation_locks,omitempty"`
	// 实例的标签集合。
	Tags []*ListInstancesResponse_Instance_Tag `protobuf:"bytes,45,rep,name=tags,proto3" json:"tags,omitempty"`
	// HPC实例的Rdma网络IP
	RdmaIpAddress []string `protobuf:"bytes,46,rep,name=rdma_ip_address,json=rdmaIpAddress,proto3" json:"rdma_ip_address,omitempty"`
	// 实例所属安全组集合
	SecurityGroupIds []string `protobuf:"bytes,47,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// 实例公网IP地址
	PublicIpAddress []string `protobuf:"bytes,48,rep,name=public_ip_address,json=publicIpAddress,proto3" json:"public_ip_address,omitempty"`
	// 经典网络类型实例的内网IP地址
	InnerIpAddress []string                                      `protobuf:"bytes,49,rep,name=inner_ip_address,json=innerIpAddress,proto3" json:"inner_ip_address,omitempty"`
	VpcAttributes  *ListInstancesResponse_Instance_VpcAttributes `protobuf:"bytes,50,opt,name=vpc_attributes,json=vpcAttributes,proto3" json:"vpc_attributes,omitempty"`
	// 弹性公网IP绑定信息
	EipAddress *ListInstancesResponse_Instance_EipAddress `protobuf:"bytes,51,opt,name=eip_address,json=eipAddress,proto3" json:"eip_address,omitempty"`
	// 专有宿主机实例的属性。
	DedicatedInstanceAttribute *ListInstancesResponse_Instance_DedicatedInstanceAttribute `protobuf:"bytes,52,opt,name=dedicatedInstanceAttribute,proto3" json:"dedicatedInstanceAttribute,omitempty"`
	CpuOptions                 *ListInstancesResponse_Instance_CpuOptions                 `protobuf:"bytes,53,opt,name=cpu_options,json=cpuOptions,proto3" json:"cpu_options,omitempty"`
}

func (x *ListInstancesResponse_Instance) Reset() {
	*x = ListInstancesResponse_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance) ProtoMessage() {}

func (x *ListInstancesResponse_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListInstancesResponse_Instance) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetDeploymentSetId() string {
	if x != nil {
		return x.DeploymentSetId
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetKeyPairName() string {
	if x != nil {
		return x.KeyPairName
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetSaleCycle() string {
	if x != nil {
		return x.SaleCycle
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetDeviceAvailable() bool {
	if x != nil {
		return x.DeviceAvailable
	}
	return false
}

func (x *ListInstancesResponse_Instance) GetLocalStorageCapacity() int64 {
	if x != nil {
		return x.LocalStorageCapacity
	}
	return 0
}

func (x *ListInstancesResponse_Instance) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetSpotDuration() int32 {
	if x != nil {
		return x.SpotDuration
	}
	return 0
}

func (x *ListInstancesResponse_Instance) GetInstanceNetworkType() string {
	if x != nil {
		return x.InstanceNetworkType
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetOsNameEn() string {
	if x != nil {
		return x.OsNameEn
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetHpcClusterId() string {
	if x != nil {
		return x.HpcClusterId
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetMemory() int32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *ListInstancesResponse_Instance) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetDeploymentSetGroupNo() int32 {
	if x != nil {
		return x.DeploymentSetGroupNo
	}
	return 0
}

func (x *ListInstancesResponse_Instance) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetGpuSpec() string {
	if x != nil {
		return x.GpuSpec
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetAutoReleaseTime() string {
	if x != nil {
		return x.AutoReleaseTime
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *ListInstancesResponse_Instance) GetStoppedMode() string {
	if x != nil {
		return x.StoppedMode
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetGpuAmount() int32 {
	if x != nil {
		return x.GpuAmount
	}
	return 0
}

func (x *ListInstancesResponse_Instance) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetInternetMaxBandwidthOut() int32 {
	if x != nil {
		return x.InternetMaxBandwidthOut
	}
	return 0
}

func (x *ListInstancesResponse_Instance) GetInternetMaxBandwidthIn() int32 {
	if x != nil {
		return x.InternetMaxBandwidthIn
	}
	return 0
}

func (x *ListInstancesResponse_Instance) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetInstanceChargeType() string {
	if x != nil {
		return x.InstanceChargeType
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetIoOptimized() bool {
	if x != nil {
		return x.IoOptimized
	}
	return false
}

func (x *ListInstancesResponse_Instance) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetCpu() int32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *ListInstancesResponse_Instance) GetLocalStorageAmount() int32 {
	if x != nil {
		return x.LocalStorageAmount
	}
	return 0
}

func (x *ListInstancesResponse_Instance) GetExpiredTime() string {
	if x != nil {
		return x.ExpiredTime
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetResourceGroupId() string {
	if x != nil {
		return x.ResourceGroupId
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetInternetChargeType() string {
	if x != nil {
		return x.InternetChargeType
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetZoneId() string {
	if x != nil {
		return x.ZoneId
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetRecyclable() bool {
	if x != nil {
		return x.Recyclable
	}
	return false
}

func (x *ListInstancesResponse_Instance) GetCreditSpecification() string {
	if x != nil {
		return x.CreditSpecification
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetInstanceTypeFamily() string {
	if x != nil {
		return x.InstanceTypeFamily
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetNetworkInterfaces() []*ListInstancesResponse_Instance_NetworkInterface {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetOperationLocks() []*ListInstancesResponse_Instance_OperationLock {
	if x != nil {
		return x.OperationLocks
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetTags() []*ListInstancesResponse_Instance_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetRdmaIpAddress() []string {
	if x != nil {
		return x.RdmaIpAddress
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetPublicIpAddress() []string {
	if x != nil {
		return x.PublicIpAddress
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetInnerIpAddress() []string {
	if x != nil {
		return x.InnerIpAddress
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetVpcAttributes() *ListInstancesResponse_Instance_VpcAttributes {
	if x != nil {
		return x.VpcAttributes
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetEipAddress() *ListInstancesResponse_Instance_EipAddress {
	if x != nil {
		return x.EipAddress
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetDedicatedInstanceAttribute() *ListInstancesResponse_Instance_DedicatedInstanceAttribute {
	if x != nil {
		return x.DedicatedInstanceAttribute
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetCpuOptions() *ListInstancesResponse_Instance_CpuOptions {
	if x != nil {
		return x.CpuOptions
	}
	return nil
}

// 弹性网卡
type ListInstancesResponse_Instance_NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹性网卡类型。可能值：
	//  Primary：主网卡。
	//  Secondary：辅助弹性网卡。
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// 弹性网卡的MAC地址。
	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// 弹性网卡主私有IP地址。
	PrimaryIpAddress string `protobuf:"bytes,3,opt,name=primary_ip_address,json=primaryIpAddress,proto3" json:"primary_ip_address,omitempty"`
	// 弹性网卡的ID。
	NetworkInterfaceId string `protobuf:"bytes,4,opt,name=network_interface_id,json=networkInterfaceId,proto3" json:"network_interface_id,omitempty"`
	// PrivateIpSet组成的集合。
	PrivateIpSets []*ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet `protobuf:"bytes,5,rep,name=private_ip_sets,json=privateIpSets,proto3" json:"private_ip_sets,omitempty"`
	// 为弹性网卡分配的IPv6地址集合。仅当请求参数AdditionalAttributes.N取值为NETWORK_PRIMARY_ENI_IP时，才会返回该参数值。
	Ipv6Sets []*ListInstancesResponse_Instance_NetworkInterface_Ipv6Set `protobuf:"bytes,6,rep,name=ipv6_sets,json=ipv6Sets,proto3" json:"ipv6_sets,omitempty"`
}

func (x *ListInstancesResponse_Instance_NetworkInterface) Reset() {
	*x = ListInstancesResponse_Instance_NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_NetworkInterface) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_NetworkInterface.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_NetworkInterface) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *ListInstancesResponse_Instance_NetworkInterface) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListInstancesResponse_Instance_NetworkInterface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ListInstancesResponse_Instance_NetworkInterface) GetPrimaryIpAddress() string {
	if x != nil {
		return x.PrimaryIpAddress
	}
	return ""
}

func (x *ListInstancesResponse_Instance_NetworkInterface) GetNetworkInterfaceId() string {
	if x != nil {
		return x.NetworkInterfaceId
	}
	return ""
}

func (x *ListInstancesResponse_Instance_NetworkInterface) GetPrivateIpSets() []*ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet {
	if x != nil {
		return x.PrivateIpSets
	}
	return nil
}

func (x *ListInstancesResponse_Instance_NetworkInterface) GetIpv6Sets() []*ListInstancesResponse_Instance_NetworkInterface_Ipv6Set {
	if x != nil {
		return x.Ipv6Sets
	}
	return nil
}

type ListInstancesResponse_Instance_OperationLock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例被锁定的描述信息。
	LockMsg string `protobuf:"bytes,1,opt,name=lock_msg,json=lockMsg,proto3" json:"lock_msg,omitempty"`
	// 锁定类型。可能值：
	//  financial：因欠费被锁定。
	//  security：因安全原因被锁定。
	//  Recycling：抢占式实例的待释放锁定状态。
	//  dedicatedhostfinancial：因为专有宿主机欠费导致ECS实例被锁定。
	//  refunded：因退款被锁定。
	LockReason string `protobuf:"bytes,2,opt,name=lock_reason,json=lockReason,proto3" json:"lock_reason,omitempty"`
}

func (x *ListInstancesResponse_Instance_OperationLock) Reset() {
	*x = ListInstancesResponse_Instance_OperationLock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_OperationLock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_OperationLock) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_OperationLock) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_OperationLock.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_OperationLock) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{3, 0, 1}
}

func (x *ListInstancesResponse_Instance_OperationLock) GetLockMsg() string {
	if x != nil {
		return x.LockMsg
	}
	return ""
}

func (x *ListInstancesResponse_Instance_OperationLock) GetLockReason() string {
	if x != nil {
		return x.LockReason
	}
	return ""
}

type ListInstancesResponse_Instance_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例的标签值。
	TagValue string `protobuf:"bytes,1,opt,name=tag_value,json=tagValue,proto3" json:"tag_value,omitempty"`
	// 实例的标签键。
	TagKey string `protobuf:"bytes,2,opt,name=tag_key,json=tagKey,proto3" json:"tag_key,omitempty"`
}

func (x *ListInstancesResponse_Instance_Tag) Reset() {
	*x = ListInstancesResponse_Instance_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_Tag) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_Tag.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_Tag) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{3, 0, 2}
}

func (x *ListInstancesResponse_Instance_Tag) GetTagValue() string {
	if x != nil {
		return x.TagValue
	}
	return ""
}

func (x *ListInstancesResponse_Instance_Tag) GetTagKey() string {
	if x != nil {
		return x.TagKey
	}
	return ""
}

// 专有网络VPC属性。
type ListInstancesResponse_Instance_VpcAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 专有网络VPC ID。
	VpcId string `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	// 云产品的IP，用于VPC云产品之间的网络互通。
	NatIpAddress string `protobuf:"bytes,2,opt,name=nat_ip_address,json=natIpAddress,proto3" json:"nat_ip_address,omitempty"`
	// 虚拟交换机ID。
	VSwitchId string `protobuf:"bytes,3,opt,name=v_switch_id,json=vSwitchId,proto3" json:"v_switch_id,omitempty"`
	// 私有IP地址。
	PrivateIpAddress []string `protobuf:"bytes,4,rep,name=private_ip_address,json=privateIpAddress,proto3" json:"private_ip_address,omitempty"`
}

func (x *ListInstancesResponse_Instance_VpcAttributes) Reset() {
	*x = ListInstancesResponse_Instance_VpcAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_VpcAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_VpcAttributes) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_VpcAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_VpcAttributes.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_VpcAttributes) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{3, 0, 3}
}

func (x *ListInstancesResponse_Instance_VpcAttributes) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *ListInstancesResponse_Instance_VpcAttributes) GetNatIpAddress() string {
	if x != nil {
		return x.NatIpAddress
	}
	return ""
}

func (x *ListInstancesResponse_Instance_VpcAttributes) GetVSwitchId() string {
	if x != nil {
		return x.VSwitchId
	}
	return ""
}

func (x *ListInstancesResponse_Instance_VpcAttributes) GetPrivateIpAddress() []string {
	if x != nil {
		return x.PrivateIpAddress
	}
	return nil
}

type ListInstancesResponse_Instance_EipAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 弹性公网IP的ID
	AllocationId string `protobuf:"bytes,1,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
	// 是否可以解绑弹性公网IP
	IsSupportUnAssociate bool `protobuf:"varint,2,opt,name=is_support_un_associate,json=isSupportUnAssociate,proto3" json:"is_support_un_associate,omitempty"`
	// 弹性公网IP的计费方式
	InternalChargeType string `protobuf:"bytes,3,opt,name=internal_charge_type,json=internalChargeType,proto3" json:"internal_charge_type,omitempty"`
	// 弹性公网IP
	IpAddress string `protobuf:"bytes,4,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// 弹性公网IP
	Bandwidth uint32 `protobuf:"varint,5,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
}

func (x *ListInstancesResponse_Instance_EipAddress) Reset() {
	*x = ListInstancesResponse_Instance_EipAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_EipAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_EipAddress) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_EipAddress) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_EipAddress.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_EipAddress) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{3, 0, 4}
}

func (x *ListInstancesResponse_Instance_EipAddress) GetAllocationId() string {
	if x != nil {
		return x.AllocationId
	}
	return ""
}

func (x *ListInstancesResponse_Instance_EipAddress) GetIsSupportUnAssociate() bool {
	if x != nil {
		return x.IsSupportUnAssociate
	}
	return false
}

func (x *ListInstancesResponse_Instance_EipAddress) GetInternalChargeType() string {
	if x != nil {
		return x.InternalChargeType
	}
	return ""
}

func (x *ListInstancesResponse_Instance_EipAddress) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *ListInstancesResponse_Instance_EipAddress) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

type ListInstancesResponse_Instance_DedicatedInstanceAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 专有宿主机实例是否与专有宿主机关联。可能值：
	//  default：专有宿主机实例不与专有宿主机关联。停机不收费实例重启后，可能会放置在自动资源部署池中的其它专有宿主机上。
	//  host：专有宿主机实例与专有宿主机关联。停机不收费实例重启后，仍放置在原专有宿主机上。
	Affinity string `protobuf:"bytes,1,opt,name=affinity,proto3" json:"affinity,omitempty"`
	// 实例的宿主机类型是否为专有宿主机。可能值：
	//  default：实例的宿主机类型不是专有宿主机。
	//  host：实例的宿主机类型为专有宿主机。
	Tenancy string `protobuf:"bytes,2,opt,name=tenancy,proto3" json:"tenancy,omitempty"`
}

func (x *ListInstancesResponse_Instance_DedicatedInstanceAttribute) Reset() {
	*x = ListInstancesResponse_Instance_DedicatedInstanceAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_DedicatedInstanceAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_DedicatedInstanceAttribute) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_DedicatedInstanceAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_DedicatedInstanceAttribute.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_DedicatedInstanceAttribute) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{3, 0, 5}
}

func (x *ListInstancesResponse_Instance_DedicatedInstanceAttribute) GetAffinity() string {
	if x != nil {
		return x.Affinity
	}
	return ""
}

func (x *ListInstancesResponse_Instance_DedicatedInstanceAttribute) GetTenancy() string {
	if x != nil {
		return x.Tenancy
	}
	return ""
}

// CPU配置详情。
type ListInstancesResponse_Instance_CpuOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分配的线程数。可能值为2。
	Numa string `protobuf:"bytes,1,opt,name=numa,proto3" json:"numa,omitempty"`
	// 物理CPU核心数。
	CoreCount int32 `protobuf:"varint,2,opt,name=core_count,json=coreCount,proto3" json:"core_count,omitempty"`
	// CPU线程数。
	ThreadPerCore int32 `protobuf:"varint,3,opt,name=thread_per_core,json=threadPerCore,proto3" json:"thread_per_core,omitempty"`
}

func (x *ListInstancesResponse_Instance_CpuOptions) Reset() {
	*x = ListInstancesResponse_Instance_CpuOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_CpuOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_CpuOptions) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_CpuOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_CpuOptions.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_CpuOptions) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{3, 0, 6}
}

func (x *ListInstancesResponse_Instance_CpuOptions) GetNuma() string {
	if x != nil {
		return x.Numa
	}
	return ""
}

func (x *ListInstancesResponse_Instance_CpuOptions) GetCoreCount() int32 {
	if x != nil {
		return x.CoreCount
	}
	return 0
}

func (x *ListInstancesResponse_Instance_CpuOptions) GetThreadPerCore() int32 {
	if x != nil {
		return x.ThreadPerCore
	}
	return 0
}

type ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例的私网IP地址。
	PrivateIpAddress string `protobuf:"bytes,1,opt,name=private_ip_address,json=privateIpAddress,proto3" json:"private_ip_address,omitempty"`
	// 是否是主私网IP地址。
	Primary bool `protobuf:"varint,2,opt,name=primary,proto3" json:"primary,omitempty"`
}

func (x *ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet) Reset() {
	*x = ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{3, 0, 0, 0}
}

func (x *ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet) GetPrivateIpAddress() string {
	if x != nil {
		return x.PrivateIpAddress
	}
	return ""
}

func (x *ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

type ListInstancesResponse_Instance_NetworkInterface_Ipv6Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 为弹性网卡指定的IPv6地址。
	Ipv6Address string `protobuf:"bytes,1,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
}

func (x *ListInstancesResponse_Instance_NetworkInterface_Ipv6Set) Reset() {
	*x = ListInstancesResponse_Instance_NetworkInterface_Ipv6Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_NetworkInterface_Ipv6Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_NetworkInterface_Ipv6Set) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_NetworkInterface_Ipv6Set) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_NetworkInterface_Ipv6Set.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_NetworkInterface_Ipv6Set) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{3, 0, 0, 1}
}

func (x *ListInstancesResponse_Instance_NetworkInterface_Ipv6Set) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

type ListRegionsResponse_Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 地域对应的接入地址（Endpoint）。
	RegionEndPoint string `protobuf:"bytes,1,opt,name=region_end_point,json=regionEndPoint,proto3" json:"region_end_point,omitempty"`
	// 地域名称。
	LocalName string `protobuf:"bytes,2,opt,name=local_name,json=localName,proto3" json:"local_name,omitempty"`
	// 地域ID。
	RegionId string `protobuf:"bytes,3,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// 集群是否售罄。可能值：
	//  available
	//  soldOut
	Status string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ListRegionsResponse_Region) Reset() {
	*x = ListRegionsResponse_Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegionsResponse_Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionsResponse_Region) ProtoMessage() {}

func (x *ListRegionsResponse_Region) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionsResponse_Region.ProtoReflect.Descriptor instead.
func (*ListRegionsResponse_Region) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListRegionsResponse_Region) GetRegionEndPoint() string {
	if x != nil {
		return x.RegionEndPoint
	}
	return ""
}

func (x *ListRegionsResponse_Region) GetLocalName() string {
	if x != nil {
		return x.LocalName
	}
	return ""
}

func (x *ListRegionsResponse_Region) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListRegionsResponse_Region) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ListImagesResponse_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 镜像的创建时间
	CreationTime string `protobuf:"bytes,1,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// 镜像的状态。可能值：
	//  UnAvailable：不可用
	//  Available：可用
	//  Creating：创建中
	//  CreateFailed：创建失败
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// 镜像族系名称
	ImageFamily string `protobuf:"bytes,3,opt,name=image_family,json=imageFamily,proto3" json:"image_family,omitempty"`
	// 镜像完成的进度，单位为百分比。
	Progress string `protobuf:"bytes,4,opt,name=progress,proto3" json:"progress,omitempty"`
	// 是否是拷贝的镜像。
	IsCopied bool `protobuf:"varint,5,opt,name=is_copied,json=isCopied,proto3" json:"is_copied,omitempty"`
	// 是否可以在I/O优化实例上运行。
	IsSupportIoOptimized bool `protobuf:"varint,6,opt,name=is_support_io_optimized,json=isSupportIoOptimized,proto3" json:"is_support_io_optimized,omitempty"`
	// 镜像来源。可能值：
	//    system：阿里云提供的公共镜像。
	//    self：您创建的自定义镜像。
	//    others：其他阿里云用户提供的共享镜像或社区镜像。
	//    marketplace：镜像市场提供的镜像。
	ImageOwnerAlias string `protobuf:"bytes,7,opt,name=image_owner_alias,json=imageOwnerAlias,proto3" json:"image_owner_alias,omitempty"`
	// 是否支持Cloud Init。
	IsSupportCloudInit bool `protobuf:"varint,8,opt,name=is_support_cloud_init,json=isSupportCloudInit,proto3" json:"is_support_cloud_init,omitempty"`
	// 镜像版本。
	ImageVersion string `protobuf:"bytes,9,opt,name=image_version,json=imageVersion,proto3" json:"image_version,omitempty"`
	// 有引用关系的资源类型。可能值：
	//    instance：创建了一台或多台ECS实例。
	//    none：未创建过ECS实例。
	Usage string `protobuf:"bytes,10,opt,name=usage,proto3" json:"usage,omitempty"`
	// 是否共享过该自定义镜像给其他用户。
	IsSelfShared string `protobuf:"bytes,11,opt,name=is_self_shared,json=isSelfShared,proto3" json:"is_self_shared,omitempty"`
	// 描述信息。
	Description string `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	// 镜像大小，单位：GiB。
	Size int32 `protobuf:"varint,13,opt,name=size,proto3" json:"size,omitempty"`
	// 镜像所在的企业资源组ID。
	ResourceGroupId string `protobuf:"bytes,14,opt,name=resource_group_id,json=resourceGroupId,proto3" json:"resource_group_id,omitempty"`
	// 操作系统平台。
	Platform string `protobuf:"bytes,15,opt,name=platform,proto3" json:"platform,omitempty"`
	// 操作系统的英文显示名称。
	OsNameEn string `protobuf:"bytes,16,opt,name=os_name_en,json=osNameEn,proto3" json:"os_name_en,omitempty"`
	// 镜像的名称。
	ImageName string `protobuf:"bytes,17,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	// 操作系统的中文显示名称。
	OsName string `protobuf:"bytes,18,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	// 镜像ID。
	ImageId string `protobuf:"bytes,19,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// 操作系统类型。可能值：
	//  windows。
	//  linux。
	OsType string `protobuf:"bytes,20,opt,name=os_type,json=osType,proto3" json:"os_type,omitempty"`
	// 是否订阅了该镜像的商品码对应的镜像商品的服务条款。
	IsSubscribed bool `protobuf:"varint,21,opt,name=is_subscribed,json=isSubscribed,proto3" json:"is_subscribed,omitempty"`
	// 镜像市场的镜像商品标示。
	ProductCode string `protobuf:"bytes,22,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	// 镜像系统架构类型。可能值：
	//  i386。
	//  x86_64。
	//  arm64。
	Architecture string `protobuf:"bytes,23,opt,name=architecture,proto3" json:"architecture,omitempty"`
	// 是否为公开镜像。公开镜像包括阿里云提供的公共镜像以及您已发布为社区镜像的自定义镜像。可能值：
	//  true：公开镜像。
	//  false：非公开镜像。
	IsPublic bool `protobuf:"varint,24,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	// 镜像所属的阿里云账号ID。该参数仅在查询共享镜像以及社区镜像时生效。
	ImageOwnerId int64 `protobuf:"varint,25,opt,name=image_owner_id,json=imageOwnerId,proto3" json:"image_owner_id,omitempty"`
	// 当前镜像是否支持非root用户登录。可能值：
	//    true：支持。
	//    false：不支持。
	LoginAsNonRootSupported bool `protobuf:"varint,26,opt,name=login_as_non_root_supported,json=loginAsNonRootSupported,proto3" json:"login_as_non_root_supported,omitempty"`
	// 社区镜像认证企业名称。
	SupplierName string `protobuf:"bytes,27,opt,name=supplier_name,json=supplierName,proto3" json:"supplier_name,omitempty"`
}

func (x *ListImagesResponse_Image) Reset() {
	*x = ListImagesResponse_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImagesResponse_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesResponse_Image) ProtoMessage() {}

func (x *ListImagesResponse_Image) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesResponse_Image.ProtoReflect.Descriptor instead.
func (*ListImagesResponse_Image) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListImagesResponse_Image) GetCreationTime() string {
	if x != nil {
		return x.CreationTime
	}
	return ""
}

func (x *ListImagesResponse_Image) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListImagesResponse_Image) GetImageFamily() string {
	if x != nil {
		return x.ImageFamily
	}
	return ""
}

func (x *ListImagesResponse_Image) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *ListImagesResponse_Image) GetIsCopied() bool {
	if x != nil {
		return x.IsCopied
	}
	return false
}

func (x *ListImagesResponse_Image) GetIsSupportIoOptimized() bool {
	if x != nil {
		return x.IsSupportIoOptimized
	}
	return false
}

func (x *ListImagesResponse_Image) GetImageOwnerAlias() string {
	if x != nil {
		return x.ImageOwnerAlias
	}
	return ""
}

func (x *ListImagesResponse_Image) GetIsSupportCloudInit() bool {
	if x != nil {
		return x.IsSupportCloudInit
	}
	return false
}

func (x *ListImagesResponse_Image) GetImageVersion() string {
	if x != nil {
		return x.ImageVersion
	}
	return ""
}

func (x *ListImagesResponse_Image) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *ListImagesResponse_Image) GetIsSelfShared() string {
	if x != nil {
		return x.IsSelfShared
	}
	return ""
}

func (x *ListImagesResponse_Image) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListImagesResponse_Image) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ListImagesResponse_Image) GetResourceGroupId() string {
	if x != nil {
		return x.ResourceGroupId
	}
	return ""
}

func (x *ListImagesResponse_Image) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ListImagesResponse_Image) GetOsNameEn() string {
	if x != nil {
		return x.OsNameEn
	}
	return ""
}

func (x *ListImagesResponse_Image) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *ListImagesResponse_Image) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *ListImagesResponse_Image) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ListImagesResponse_Image) GetOsType() string {
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *ListImagesResponse_Image) GetIsSubscribed() bool {
	if x != nil {
		return x.IsSubscribed
	}
	return false
}

func (x *ListImagesResponse_Image) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ListImagesResponse_Image) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *ListImagesResponse_Image) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ListImagesResponse_Image) GetImageOwnerId() int64 {
	if x != nil {
		return x.ImageOwnerId
	}
	return 0
}

func (x *ListImagesResponse_Image) GetLoginAsNonRootSupported() bool {
	if x != nil {
		return x.LoginAsNonRootSupported
	}
	return false
}

func (x *ListImagesResponse_Image) GetSupplierName() string {
	if x != nil {
		return x.SupplierName
	}
	return ""
}

type ListInstanceTypesResponse_InstanceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 本地盘类型。更多信息，请参见本地盘。可能值：
	//    localhddpro：实例规格族d1ne和d1搭载的SATA HDD本地盘。
	//    localssdpro：实例规格族i2、i2g、i1、ga1和gn5等搭载的NVMe SSD本地盘。
	LocalStorageCategory string `protobuf:"bytes,1,opt,name=local_storage_category,json=localStorageCategory,proto3" json:"local_storage_category,omitempty"`
	// 主网卡默认队列数。
	PrimaryEniQueueNumber int32 `protobuf:"varint,2,opt,name=primary_eni_queue_number,json=primaryEniQueueNumber,proto3" json:"primary_eni_queue_number,omitempty"`
	// 内存大小。单位：GiB
	MemorySize float32 `protobuf:"fixed32,3,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	// 实例挂载的本地盘的单盘容量。单位：GiB
	LocalStorageCapacity int64 `protobuf:"varint,4,opt,name=local_storage_capacity,json=localStorageCapacity,proto3" json:"local_storage_capacity,omitempty"`
	// 实例规格族级别。可能值：
	//    EntryLevel：入门级（共享型）。
	//    EnterpriseLevel：企业级。
	//    CreditEntryLevel：积分入门级。
	InstanceFamilyLevel string `protobuf:"bytes,5,opt,name=instance_family_level,json=instanceFamilyLevel,proto3" json:"instance_family_level,omitempty"`
	// 内网入方向网络收发包能力。单位：Pps
	InstancePpsRx int64 `protobuf:"varint,6,opt,name=instance_pps_rx,json=instancePpsRx,proto3" json:"instance_pps_rx,omitempty"`
	// 单块弹性网卡的IPv6地址上限。
	EniIpv6AddressQuantity int32 `protobuf:"varint,7,opt,name=eni_ipv6_address_quantity,json=eniIpv6AddressQuantity,proto3" json:"eni_ipv6_address_quantity,omitempty"`
	// 单块弹性网卡最大队列数。
	MaximumQueueNumberPerEni int32 `protobuf:"varint,8,opt,name=maximum_queue_number_per_eni,json=maximumQueueNumberPerEni,proto3" json:"maximum_queue_number_per_eni,omitempty"`
	// 实例规格ID。
	InstanceTypeId string `protobuf:"bytes,9,opt,name=instance_type_id,json=instanceTypeId,proto3" json:"instance_type_id,omitempty"`
	// 内网入方向带宽限制。单位：kbit/s
	InstanceBandwidthRx int32 `protobuf:"varint,10,opt,name=instance_bandwidth_rx,json=instanceBandwidthRx,proto3" json:"instance_bandwidth_rx,omitempty"`
	// 辅助弹性网卡默认队列数。
	SecondaryEniQueueNumber int32 `protobuf:"varint,11,opt,name=secondary_eni_queue_number,json=secondaryEniQueueNumber,proto3" json:"secondary_eni_queue_number,omitempty"`
	// GPU类型。
	GpuSpec string `protobuf:"bytes,12,opt,name=gpu_spec,json=gpuSpec,proto3" json:"gpu_spec,omitempty"`
	// 内网出方向带宽限制。单位：kbit/s
	QueuePairNumber int32 `protobuf:"varint,13,opt,name=queue_pair_number,json=queuePairNumber,proto3" json:"queue_pair_number,omitempty"`
	// 弹性RDMA网卡（ERI）数量。
	EriQuatity int32 `protobuf:"varint,14,opt,name=eri_quatity,json=eriQuatity,proto3" json:"eri_quatity,omitempty"`
	// GPU数量。
	GpuAmount int32 `protobuf:"varint,15,opt,name=gpu_amount,json=gpuAmount,proto3" json:"gpu_amount,omitempty"`
	// 实例规格允许修改的弹性网卡队列数总配额。
	TotalEniQueueQuantity int32 `protobuf:"varint,16,opt,name=total_eni_queue_quantity,json=totalEniQueueQuantity,proto3" json:"total_eni_queue_quantity,omitempty"`
	// 实例规格所挂载的云盘是否支持NVMe。可能值：
	//    required：支持。表示云盘以NVMe的方式挂载。
	//    unsupported：不支持。表示云盘不以NVMe的方式挂载。
	NvmeSupport string `protobuf:"bytes,17,opt,name=nvme_support,json=nvmeSupport,proto3" json:"nvme_support,omitempty"`
	// 支持挂载的云盘数量上限。
	DiskQuantity int32 `protobuf:"varint,18,opt,name=disk_quantity,json=diskQuantity,proto3" json:"disk_quantity,omitempty"`
	// 突发性能实例t5、t6的初始vCPU积分值。
	InitialCredit int32 `protobuf:"varint,19,opt,name=initial_credit,json=initialCredit,proto3" json:"initial_credit,omitempty"`
	// 实例挂载的本地盘的数量。
	LocalStorageAmount int32 `protobuf:"varint,20,opt,name=local_storage_amount,json=localStorageAmount,proto3" json:"local_storage_amount,omitempty"`
	// 突发性能实例t5、t6的基准vCPU计算性能（所有vCPU之和）。
	BaselineCredit int32 `protobuf:"varint,21,opt,name=baseline_credit,json=baselineCredit,proto3" json:"baseline_credit,omitempty"`
	// 内网出方向网络收发包能力。单位：Pps
	InstancePpsTx int64 `protobuf:"varint,22,opt,name=instance_pps_tx,json=instancePpsTx,proto3" json:"instance_pps_tx,omitempty"`
	// 单块弹性网卡的私有IP地址上限。
	EniPrivateIpAddressQuantity int32 `protobuf:"varint,23,opt,name=eni_private_ip_address_quantity,json=eniPrivateIpAddressQuantity,proto3" json:"eni_private_ip_address_quantity,omitempty"`
	// vCPU内核数目。
	CpuCoreCount int32 `protobuf:"varint,24,opt,name=cpu_core_count,json=cpuCoreCount,proto3" json:"cpu_core_count,omitempty"`
	// 实例规格族。
	InstanceTypeFamily string `protobuf:"bytes,25,opt,name=instance_type_family,json=instanceTypeFamily,proto3" json:"instance_type_family,omitempty"`
	// 支持挂载的弹性网卡上限。
	EniQuantity int32 `protobuf:"varint,26,opt,name=eni_quantity,json=eniQuantity,proto3" json:"eni_quantity,omitempty"`
}

func (x *ListInstanceTypesResponse_InstanceType) Reset() {
	*x = ListInstanceTypesResponse_InstanceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypesResponse_InstanceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypesResponse_InstanceType) ProtoMessage() {}

func (x *ListInstanceTypesResponse_InstanceType) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypesResponse_InstanceType.ProtoReflect.Descriptor instead.
func (*ListInstanceTypesResponse_InstanceType) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListInstanceTypesResponse_InstanceType) GetLocalStorageCategory() string {
	if x != nil {
		return x.LocalStorageCategory
	}
	return ""
}

func (x *ListInstanceTypesResponse_InstanceType) GetPrimaryEniQueueNumber() int32 {
	if x != nil {
		return x.PrimaryEniQueueNumber
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetMemorySize() float32 {
	if x != nil {
		return x.MemorySize
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetLocalStorageCapacity() int64 {
	if x != nil {
		return x.LocalStorageCapacity
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetInstanceFamilyLevel() string {
	if x != nil {
		return x.InstanceFamilyLevel
	}
	return ""
}

func (x *ListInstanceTypesResponse_InstanceType) GetInstancePpsRx() int64 {
	if x != nil {
		return x.InstancePpsRx
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetEniIpv6AddressQuantity() int32 {
	if x != nil {
		return x.EniIpv6AddressQuantity
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetMaximumQueueNumberPerEni() int32 {
	if x != nil {
		return x.MaximumQueueNumberPerEni
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetInstanceTypeId() string {
	if x != nil {
		return x.InstanceTypeId
	}
	return ""
}

func (x *ListInstanceTypesResponse_InstanceType) GetInstanceBandwidthRx() int32 {
	if x != nil {
		return x.InstanceBandwidthRx
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetSecondaryEniQueueNumber() int32 {
	if x != nil {
		return x.SecondaryEniQueueNumber
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetGpuSpec() string {
	if x != nil {
		return x.GpuSpec
	}
	return ""
}

func (x *ListInstanceTypesResponse_InstanceType) GetQueuePairNumber() int32 {
	if x != nil {
		return x.QueuePairNumber
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetEriQuatity() int32 {
	if x != nil {
		return x.EriQuatity
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetGpuAmount() int32 {
	if x != nil {
		return x.GpuAmount
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetTotalEniQueueQuantity() int32 {
	if x != nil {
		return x.TotalEniQueueQuantity
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetNvmeSupport() string {
	if x != nil {
		return x.NvmeSupport
	}
	return ""
}

func (x *ListInstanceTypesResponse_InstanceType) GetDiskQuantity() int32 {
	if x != nil {
		return x.DiskQuantity
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetInitialCredit() int32 {
	if x != nil {
		return x.InitialCredit
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetLocalStorageAmount() int32 {
	if x != nil {
		return x.LocalStorageAmount
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetBaselineCredit() int32 {
	if x != nil {
		return x.BaselineCredit
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetInstancePpsTx() int64 {
	if x != nil {
		return x.InstancePpsTx
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetEniPrivateIpAddressQuantity() int32 {
	if x != nil {
		return x.EniPrivateIpAddressQuantity
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetCpuCoreCount() int32 {
	if x != nil {
		return x.CpuCoreCount
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetInstanceTypeFamily() string {
	if x != nil {
		return x.InstanceTypeFamily
	}
	return ""
}

func (x *ListInstanceTypesResponse_InstanceType) GetEniQuantity() int32 {
	if x != nil {
		return x.EniQuantity
	}
	return 0
}

var File_api_instance_v1_instance_proto protoreflect.FileDescriptor

var file_api_instance_v1_instance_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64,
	0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72,
	0x75, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x22, 0x9e, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x53, 0x65, 0x74,
	0x73, 0x22, 0xd5, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x22, 0x92, 0x1f, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x4d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a,
	0x8c, 0x1d, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6b, 0x65,
	0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x70, 0x6f, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x70, 0x63, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x70, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x75, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x70, 0x75, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x1a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6f, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x70, 0x75, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x7a, 0x6f, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x2b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x2c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b,
	0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x47, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x64, 0x6d,
	0x61, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x2e, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x64, 0x6d, 0x61, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x30, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x31, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x64, 0x0a, 0x0e, 0x76, 0x70, 0x63, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x56,
	0x70, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0d, 0x76, 0x70,
	0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x0b, 0x65,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x45, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x65, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x8a, 0x01, 0x0a, 0x1a, 0x64, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x1a, 0x64, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x70, 0x75, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x8b, 0x04, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x75, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49,
	0x70, 0x53, 0x65, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x53,
	0x65, 0x74, 0x73, 0x12, 0x65, 0x0a, 0x09, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x49, 0x70, 0x76, 0x36, 0x53, 0x65, 0x74,
	0x52, 0x08, 0x69, 0x70, 0x76, 0x36, 0x53, 0x65, 0x74, 0x73, 0x1a, 0x56, 0x0a, 0x0c, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x53, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x1a, 0x2c, 0x0a, 0x07, 0x49, 0x70, 0x76, 0x36, 0x53, 0x65, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0x4b, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63,
	0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x1a, 0x3b, 0x0a,
	0x03, 0x54, 0x61, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x1a, 0x9a, 0x01, 0x0a, 0x0d, 0x56,
	0x70, 0x63, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x61, 0x74, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x61, 0x74,
	0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x76, 0x5f, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x76, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xd7, 0x01, 0x0a, 0x0a, 0x45, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x6e, 0x5f, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x6e, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x1a, 0x52, 0x0a, 0x1a, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x79, 0x1a, 0x67, 0x0a, 0x0a, 0x43, 0x70, 0x75, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x22, 0x9b,
	0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xe5, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x86, 0x01, 0x0a, 0x06,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x09, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x1a, 0xb1, 0x07, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x6f,
	0x70, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x6f,
	0x70, 0x69, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x6f, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x73, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x73, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x73, 0x5f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x73,
	0x4e, 0x6f, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf5, 0x0a, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xb9, 0x09, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x18,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x69, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x69, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x70, 0x73,
	0x5f, 0x72, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x70, 0x73, 0x52, 0x78, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x6e, 0x69, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x65, 0x6e, 0x69,
	0x49, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x45, 0x6e, 0x69, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x72, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x52,
	0x78, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x65,
	0x6e, 0x69, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x45, 0x6e, 0x69, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x70, 0x75, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x69, 0x5f, 0x71, 0x75, 0x61,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x72, 0x69, 0x51,
	0x75, 0x61, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x70, 0x75, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65,
	0x6e, 0x69, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e,
	0x69, 0x51, 0x75, 0x65, 0x75, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x70, 0x73, 0x5f, 0x74, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x70, 0x73, 0x54, 0x78,
	0x12, 0x44, 0x0a, 0x1f, 0x65, 0x6e, 0x69, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x65, 0x6e, 0x69, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x6e, 0x69, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x69, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x22, 0xbb, 0x02, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a,
	0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x22,
	0xb1, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22,
	0xfc, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x6f, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10, 0x64, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x22, 0x88,
	0x01, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x16, 0x52, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x33, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x70,
	0x12, 0x2d, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x92, 0x01, 0x04, 0x08, 0x01, 0x10,
	0x64, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x11,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x22, 0x38, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x32,
	0xef, 0x08, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x0b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x7e, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x22, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0x75, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x1a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a,
	0x0d, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x1a, 0x12, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x85, 0x01, 0x0a,
	0x0f, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x1a, 0x14, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x62, 0x6f, 0x6f,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x7b, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x42, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_api_instance_v1_instance_proto_rawDescOnce sync.Once
	file_api_instance_v1_instance_proto_rawDescData = file_api_instance_v1_instance_proto_rawDesc
)

func file_api_instance_v1_instance_proto_rawDescGZIP() []byte {
	file_api_instance_v1_instance_proto_rawDescOnce.Do(func() {
		file_api_instance_v1_instance_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_instance_v1_instance_proto_rawDescData)
	})
	return file_api_instance_v1_instance_proto_rawDescData
}

var file_api_instance_v1_instance_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_api_instance_v1_instance_proto_goTypes = []interface{}{
	(*CreateInstancesRequest)(nil),                                       // 0: api.instance.v1.CreateInstancesRequest
	(*CreateInstancesResponse)(nil),                                      // 1: api.instance.v1.CreateInstancesResponse
	(*ListInstancesRequest)(nil),                                         // 2: api.instance.v1.ListInstancesRequest
	(*ListInstancesResponse)(nil),                                        // 3: api.instance.v1.ListInstancesResponse
	(*ListRegionsRequest)(nil),                                           // 4: api.instance.v1.ListRegionsRequest
	(*ListRegionsResponse)(nil),                                          // 5: api.instance.v1.ListRegionsResponse
	(*ListImagesRequest)(nil),                                            // 6: api.instance.v1.ListImagesRequest
	(*ListImagesResponse)(nil),                                           // 7: api.instance.v1.ListImagesResponse
	(*ListInstanceTypesRequest)(nil),                                     // 8: api.instance.v1.ListInstanceTypesRequest
	(*ListInstanceTypesResponse)(nil),                                    // 9: api.instance.v1.ListInstanceTypesResponse
	(*StartInstancesRequest)(nil),                                        // 10: api.instance.v1.StartInstancesRequest
	(*InstanceResponse)(nil),                                             // 11: api.instance.v1.InstanceResponse
	(*StartInstancesResponse)(nil),                                       // 12: api.instance.v1.StartInstancesResponse
	(*StopInstancesRequest)(nil),                                         // 13: api.instance.v1.StopInstancesRequest
	(*StopInstancesResponse)(nil),                                        // 14: api.instance.v1.StopInstancesResponse
	(*RebootInstancesRequest)(nil),                                       // 15: api.instance.v1.RebootInstancesRequest
	(*RebootInstancesResponse)(nil),                                      // 16: api.instance.v1.RebootInstancesResponse
	(*DeleteInstancesRequest)(nil),                                       // 17: api.instance.v1.DeleteInstancesRequest
	(*DeleteInstancesResponse)(nil),                                      // 18: api.instance.v1.DeleteInstancesResponse
	(*ListInstancesResponse_Instance)(nil),                               // 19: api.instance.v1.ListInstancesResponse.Instance
	(*ListInstancesResponse_Instance_NetworkInterface)(nil),              // 20: api.instance.v1.ListInstancesResponse.Instance.NetworkInterface
	(*ListInstancesResponse_Instance_OperationLock)(nil),                 // 21: api.instance.v1.ListInstancesResponse.Instance.OperationLock
	(*ListInstancesResponse_Instance_Tag)(nil),                           // 22: api.instance.v1.ListInstancesResponse.Instance.Tag
	(*ListInstancesResponse_Instance_VpcAttributes)(nil),                 // 23: api.instance.v1.ListInstancesResponse.Instance.VpcAttributes
	(*ListInstancesResponse_Instance_EipAddress)(nil),                    // 24: api.instance.v1.ListInstancesResponse.Instance.EipAddress
	(*ListInstancesResponse_Instance_DedicatedInstanceAttribute)(nil),    // 25: api.instance.v1.ListInstancesResponse.Instance.DedicatedInstanceAttribute
	(*ListInstancesResponse_Instance_CpuOptions)(nil),                    // 26: api.instance.v1.ListInstancesResponse.Instance.CpuOptions
	(*ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet)(nil), // 27: api.instance.v1.ListInstancesResponse.Instance.NetworkInterface.PrivateIpSet
	(*ListInstancesResponse_Instance_NetworkInterface_Ipv6Set)(nil),      // 28: api.instance.v1.ListInstancesResponse.Instance.NetworkInterface.Ipv6Set
	(*ListRegionsResponse_Region)(nil),                                   // 29: api.instance.v1.ListRegionsResponse.Region
	(*ListImagesResponse_Image)(nil),                                     // 30: api.instance.v1.ListImagesResponse.Image
	(*ListInstanceTypesResponse_InstanceType)(nil),                       // 31: api.instance.v1.ListInstanceTypesResponse.InstanceType
}
var file_api_instance_v1_instance_proto_depIdxs = []int32{
	19, // 0: api.instance.v1.ListInstancesResponse.instances:type_name -> api.instance.v1.ListInstancesResponse.Instance
	29, // 1: api.instance.v1.ListRegionsResponse.regions:type_name -> api.instance.v1.ListRegionsResponse.Region
	30, // 2: api.instance.v1.ListImagesResponse.images:type_name -> api.instance.v1.ListImagesResponse.Image
	31, // 3: api.instance.v1.ListInstanceTypesResponse.instance_types:type_name -> api.instance.v1.ListInstanceTypesResponse.InstanceType
	11, // 4: api.instance.v1.StartInstancesResponse.instance_responses:type_name -> api.instance.v1.InstanceResponse
	11, // 5: api.instance.v1.StopInstancesResponse.instance_responses:type_name -> api.instance.v1.InstanceResponse
	11, // 6: api.instance.v1.RebootInstancesResponse.instance_responses:type_name -> api.instance.v1.InstanceResponse
	20, // 7: api.instance.v1.ListInstancesResponse.Instance.network_interfaces:type_name -> api.instance.v1.ListInstancesResponse.Instance.NetworkInterface
	21, // 8: api.instance.v1.ListInstancesResponse.Instance.operation_locks:type_name -> api.instance.v1.ListInstancesResponse.Instance.OperationLock
	22, // 9: api.instance.v1.ListInstancesResponse.Instance.tags:type_name -> api.instance.v1.ListInstancesResponse.Instance.Tag
	23, // 10: api.instance.v1.ListInstancesResponse.Instance.vpc_attributes:type_name -> api.instance.v1.ListInstancesResponse.Instance.VpcAttributes
	24, // 11: api.instance.v1.ListInstancesResponse.Instance.eip_address:type_name -> api.instance.v1.ListInstancesResponse.Instance.EipAddress
	25, // 12: api.instance.v1.ListInstancesResponse.Instance.dedicatedInstanceAttribute:type_name -> api.instance.v1.ListInstancesResponse.Instance.DedicatedInstanceAttribute
	26, // 13: api.instance.v1.ListInstancesResponse.Instance.cpu_options:type_name -> api.instance.v1.ListInstancesResponse.Instance.CpuOptions
	27, // 14: api.instance.v1.ListInstancesResponse.Instance.NetworkInterface.private_ip_sets:type_name -> api.instance.v1.ListInstancesResponse.Instance.NetworkInterface.PrivateIpSet
	28, // 15: api.instance.v1.ListInstancesResponse.Instance.NetworkInterface.ipv6_sets:type_name -> api.instance.v1.ListInstancesResponse.Instance.NetworkInterface.Ipv6Set
	4,  // 16: api.instance.v1.Instance.ListRegions:input_type -> api.instance.v1.ListRegionsRequest
	6,  // 17: api.instance.v1.Instance.ListImages:input_type -> api.instance.v1.ListImagesRequest
	8,  // 18: api.instance.v1.Instance.ListInstanceTypes:input_type -> api.instance.v1.ListInstanceTypesRequest
	0,  // 19: api.instance.v1.Instance.CreateInstances:input_type -> api.instance.v1.CreateInstancesRequest
	2,  // 20: api.instance.v1.Instance.ListInstances:input_type -> api.instance.v1.ListInstancesRequest
	10, // 21: api.instance.v1.Instance.StartInstances:input_type -> api.instance.v1.StartInstancesRequest
	13, // 22: api.instance.v1.Instance.StopInstances:input_type -> api.instance.v1.StopInstancesRequest
	15, // 23: api.instance.v1.Instance.RebootInstances:input_type -> api.instance.v1.RebootInstancesRequest
	17, // 24: api.instance.v1.Instance.DeleteInstances:input_type -> api.instance.v1.DeleteInstancesRequest
	5,  // 25: api.instance.v1.Instance.ListRegions:output_type -> api.instance.v1.ListRegionsResponse
	7,  // 26: api.instance.v1.Instance.ListImages:output_type -> api.instance.v1.ListImagesResponse
	9,  // 27: api.instance.v1.Instance.ListInstanceTypes:output_type -> api.instance.v1.ListInstanceTypesResponse
	1,  // 28: api.instance.v1.Instance.CreateInstances:output_type -> api.instance.v1.CreateInstancesResponse
	3,  // 29: api.instance.v1.Instance.ListInstances:output_type -> api.instance.v1.ListInstancesResponse
	12, // 30: api.instance.v1.Instance.StartInstances:output_type -> api.instance.v1.StartInstancesResponse
	14, // 31: api.instance.v1.Instance.StopInstances:output_type -> api.instance.v1.StopInstancesResponse
	16, // 32: api.instance.v1.Instance.RebootInstances:output_type -> api.instance.v1.RebootInstancesResponse
	18, // 33: api.instance.v1.Instance.DeleteInstances:output_type -> api.instance.v1.DeleteInstancesResponse
	25, // [25:34] is the sub-list for method output_type
	16, // [16:25] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_instance_v1_instance_proto_init() }
func file_api_instance_v1_instance_proto_init() {
	if File_api_instance_v1_instance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_instance_v1_instance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_OperationLock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_VpcAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_EipAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_DedicatedInstanceAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_CpuOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_NetworkInterface_PrivateIpSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_NetworkInterface_Ipv6Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegionsResponse_Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImagesResponse_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypesResponse_InstanceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_instance_v1_instance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_instance_v1_instance_proto_goTypes,
		DependencyIndexes: file_api_instance_v1_instance_proto_depIdxs,
		MessageInfos:      file_api_instance_v1_instance_proto_msgTypes,
	}.Build()
	File_api_instance_v1_instance_proto = out.File
	file_api_instance_v1_instance_proto_rawDesc = nil
	file_api_instance_v1_instance_proto_goTypes = nil
	file_api_instance_v1_instance_proto_depIdxs = nil
}
