// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type InstanceHTTPServer interface {
	CreateInstances(context.Context, *CreateInstancesRequest) (*CreateInstancesResponse, error)
	DeleteInstances(context.Context, *DeleteInstancesRequest) (*DeleteInstancesResponse, error)
	ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error)
	ListInstanceTypes(context.Context, *ListInstanceTypesRequest) (*ListInstanceTypesResponse, error)
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error)
	RebootInstances(context.Context, *RebootInstancesRequest) (*RebootInstancesResponse, error)
	StartInstances(context.Context, *StartInstancesRequest) (*StartInstancesResponse, error)
	StopInstances(context.Context, *StopInstancesRequest) (*StopInstancesResponse, error)
}

func RegisterInstanceHTTPServer(s *http.Server, srv InstanceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/regions", _Instance_ListRegions0_HTTP_Handler(srv))
	r.GET("/api/images", _Instance_ListImages0_HTTP_Handler(srv))
	r.GET("/api/instance-types", _Instance_ListInstanceTypes0_HTTP_Handler(srv))
	r.POST("/api/instances", _Instance_CreateInstances0_HTTP_Handler(srv))
	r.GET("/api/instances", _Instance_ListInstances0_HTTP_Handler(srv))
	r.PUT("/api/instances/start", _Instance_StartInstances0_HTTP_Handler(srv))
	r.PUT("/api/instances/stop", _Instance_StopInstances0_HTTP_Handler(srv))
	r.PUT("/api/instances/reboot", _Instance_RebootInstances0_HTTP_Handler(srv))
	r.PUT("/api/instances/terminate", _Instance_DeleteInstances0_HTTP_Handler(srv))
}

func _Instance_ListRegions0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRegionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.azure.api.instance.v1.Instance/ListRegions")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRegions(ctx, req.(*ListRegionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRegionsResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_ListImages0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListImagesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.azure.api.instance.v1.Instance/ListImages")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListImages(ctx, req.(*ListImagesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListImagesResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_ListInstanceTypes0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListInstanceTypesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.azure.api.instance.v1.Instance/ListInstanceTypes")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListInstanceTypes(ctx, req.(*ListInstanceTypesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListInstanceTypesResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_CreateInstances0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateInstancesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.azure.api.instance.v1.Instance/CreateInstances")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateInstances(ctx, req.(*CreateInstancesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateInstancesResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_ListInstances0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListInstancesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.azure.api.instance.v1.Instance/ListInstances")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListInstances(ctx, req.(*ListInstancesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListInstancesResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_StartInstances0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StartInstancesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.azure.api.instance.v1.Instance/StartInstances")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StartInstances(ctx, req.(*StartInstancesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StartInstancesResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_StopInstances0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StopInstancesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.azure.api.instance.v1.Instance/StopInstances")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StopInstances(ctx, req.(*StopInstancesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StopInstancesResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_RebootInstances0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RebootInstancesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.azure.api.instance.v1.Instance/RebootInstances")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RebootInstances(ctx, req.(*RebootInstancesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RebootInstancesResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_DeleteInstances0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteInstancesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.azure.api.instance.v1.Instance/DeleteInstances")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteInstances(ctx, req.(*DeleteInstancesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteInstancesResponse)
		return ctx.Result(200, reply)
	}
}

type InstanceHTTPClient interface {
	CreateInstances(ctx context.Context, req *CreateInstancesRequest, opts ...http.CallOption) (rsp *CreateInstancesResponse, err error)
	DeleteInstances(ctx context.Context, req *DeleteInstancesRequest, opts ...http.CallOption) (rsp *DeleteInstancesResponse, err error)
	ListImages(ctx context.Context, req *ListImagesRequest, opts ...http.CallOption) (rsp *ListImagesResponse, err error)
	ListInstanceTypes(ctx context.Context, req *ListInstanceTypesRequest, opts ...http.CallOption) (rsp *ListInstanceTypesResponse, err error)
	ListInstances(ctx context.Context, req *ListInstancesRequest, opts ...http.CallOption) (rsp *ListInstancesResponse, err error)
	ListRegions(ctx context.Context, req *ListRegionsRequest, opts ...http.CallOption) (rsp *ListRegionsResponse, err error)
	RebootInstances(ctx context.Context, req *RebootInstancesRequest, opts ...http.CallOption) (rsp *RebootInstancesResponse, err error)
	StartInstances(ctx context.Context, req *StartInstancesRequest, opts ...http.CallOption) (rsp *StartInstancesResponse, err error)
	StopInstances(ctx context.Context, req *StopInstancesRequest, opts ...http.CallOption) (rsp *StopInstancesResponse, err error)
}

type InstanceHTTPClientImpl struct {
	cc *http.Client
}

func NewInstanceHTTPClient(client *http.Client) InstanceHTTPClient {
	return &InstanceHTTPClientImpl{client}
}

func (c *InstanceHTTPClientImpl) CreateInstances(ctx context.Context, in *CreateInstancesRequest, opts ...http.CallOption) (*CreateInstancesResponse, error) {
	var out CreateInstancesResponse
	pattern := "/api/instances"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/services.azure.api.instance.v1.Instance/CreateInstances"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) DeleteInstances(ctx context.Context, in *DeleteInstancesRequest, opts ...http.CallOption) (*DeleteInstancesResponse, error) {
	var out DeleteInstancesResponse
	pattern := "/api/instances/terminate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/services.azure.api.instance.v1.Instance/DeleteInstances"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) ListImages(ctx context.Context, in *ListImagesRequest, opts ...http.CallOption) (*ListImagesResponse, error) {
	var out ListImagesResponse
	pattern := "/api/images"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.azure.api.instance.v1.Instance/ListImages"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) ListInstanceTypes(ctx context.Context, in *ListInstanceTypesRequest, opts ...http.CallOption) (*ListInstanceTypesResponse, error) {
	var out ListInstanceTypesResponse
	pattern := "/api/instance-types"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.azure.api.instance.v1.Instance/ListInstanceTypes"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...http.CallOption) (*ListInstancesResponse, error) {
	var out ListInstancesResponse
	pattern := "/api/instances"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.azure.api.instance.v1.Instance/ListInstances"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...http.CallOption) (*ListRegionsResponse, error) {
	var out ListRegionsResponse
	pattern := "/api/regions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.azure.api.instance.v1.Instance/ListRegions"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) RebootInstances(ctx context.Context, in *RebootInstancesRequest, opts ...http.CallOption) (*RebootInstancesResponse, error) {
	var out RebootInstancesResponse
	pattern := "/api/instances/reboot"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/services.azure.api.instance.v1.Instance/RebootInstances"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) StartInstances(ctx context.Context, in *StartInstancesRequest, opts ...http.CallOption) (*StartInstancesResponse, error) {
	var out StartInstancesResponse
	pattern := "/api/instances/start"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/services.azure.api.instance.v1.Instance/StartInstances"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) StopInstances(ctx context.Context, in *StopInstancesRequest, opts ...http.CallOption) (*StopInstancesResponse, error) {
	var out StopInstancesResponse
	pattern := "/api/instances/stop"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/services.azure.api.instance.v1.Instance/StopInstances"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
