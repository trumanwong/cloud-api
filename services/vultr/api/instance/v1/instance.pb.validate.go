// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/instance/v1/instance.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstanceRequestMultiError, or nil if none found.
func (m *CreateInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := CreateInstanceRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := CreateInstanceRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPlan()) < 1 {
		err := CreateInstanceRequestValidationError{
			field:  "Plan",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetImageId()) < 1 {
		err := CreateInstanceRequestValidationError{
			field:  "ImageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Hostname

	if len(errors) > 0 {
		return CreateInstanceRequestMultiError(errors)
	}

	return nil
}

// CreateInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstanceRequestMultiError) AllErrors() []error { return m }

// CreateInstanceRequestValidationError is the validation error returned by
// CreateInstanceRequest.Validate if the designated constraints aren't met.
type CreateInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceRequestValidationError) ErrorName() string {
	return "CreateInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceRequestValidationError{}

// Validate checks the field values on CreateInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstanceResponseMultiError, or nil if none found.
func (m *CreateInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInstanceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInstanceResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateInstanceResponseMultiError(errors)
	}

	return nil
}

// CreateInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstanceResponseMultiError) AllErrors() []error { return m }

// CreateInstanceResponseValidationError is the validation error returned by
// CreateInstanceResponse.Validate if the designated constraints aren't met.
type CreateInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceResponseValidationError) ErrorName() string {
	return "CreateInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceResponseValidationError{}

// Validate checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesRequestMultiError, or nil if none found.
func (m *ListInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := ListInstancesRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PerPage

	// no validation rules for Cursor

	// no validation rules for Tag

	// no validation rules for Label

	// no validation rules for MainIp

	// no validation rules for Region

	if len(errors) > 0 {
		return ListInstancesRequestMultiError(errors)
	}

	return nil
}

// ListInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by ListInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesRequestMultiError) AllErrors() []error { return m }

// ListInstancesRequestValidationError is the validation error returned by
// ListInstancesRequest.Validate if the designated constraints aren't met.
type ListInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesRequestValidationError) ErrorName() string {
	return "ListInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesRequestValidationError{}

// Validate checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesResponseMultiError, or nil if none found.
func (m *ListInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListInstancesResponseMultiError(errors)
	}

	return nil
}

// ListInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by ListInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponseMultiError) AllErrors() []error { return m }

// ListInstancesResponseValidationError is the validation error returned by
// ListInstancesResponse.Validate if the designated constraints aren't met.
type ListInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponseValidationError) ErrorName() string {
	return "ListInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponseValidationError{}

// Validate checks the field values on ListRegionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegionsRequestMultiError, or nil if none found.
func (m *ListRegionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := ListRegionsRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PerPage

	// no validation rules for Cursor

	if len(errors) > 0 {
		return ListRegionsRequestMultiError(errors)
	}

	return nil
}

// ListRegionsRequestMultiError is an error wrapping multiple validation errors
// returned by ListRegionsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRegionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegionsRequestMultiError) AllErrors() []error { return m }

// ListRegionsRequestValidationError is the validation error returned by
// ListRegionsRequest.Validate if the designated constraints aren't met.
type ListRegionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsRequestValidationError) ErrorName() string {
	return "ListRegionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsRequestValidationError{}

// Validate checks the field values on ListRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegionsResponseMultiError, or nil if none found.
func (m *ListRegionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRegionsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRegionsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegionsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRegionsResponseMultiError(errors)
	}

	return nil
}

// ListRegionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListRegionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRegionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegionsResponseMultiError) AllErrors() []error { return m }

// ListRegionsResponseValidationError is the validation error returned by
// ListRegionsResponse.Validate if the designated constraints aren't met.
type ListRegionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsResponseValidationError) ErrorName() string {
	return "ListRegionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsResponseValidationError{}

// Validate checks the field values on ListImagesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListImagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImagesRequestMultiError, or nil if none found.
func (m *ListImagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := ListImagesRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PerPage

	// no validation rules for Cursor

	if len(errors) > 0 {
		return ListImagesRequestMultiError(errors)
	}

	return nil
}

// ListImagesRequestMultiError is an error wrapping multiple validation errors
// returned by ListImagesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListImagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImagesRequestMultiError) AllErrors() []error { return m }

// ListImagesRequestValidationError is the validation error returned by
// ListImagesRequest.Validate if the designated constraints aren't met.
type ListImagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImagesRequestValidationError) ErrorName() string {
	return "ListImagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListImagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImagesRequestValidationError{}

// Validate checks the field values on ListImagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListImagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImagesResponseMultiError, or nil if none found.
func (m *ListImagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListImagesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListImagesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListImagesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListImagesResponseMultiError(errors)
	}

	return nil
}

// ListImagesResponseMultiError is an error wrapping multiple validation errors
// returned by ListImagesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListImagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImagesResponseMultiError) AllErrors() []error { return m }

// ListImagesResponseValidationError is the validation error returned by
// ListImagesResponse.Validate if the designated constraints aren't met.
type ListImagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImagesResponseValidationError) ErrorName() string {
	return "ListImagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListImagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImagesResponseValidationError{}

// Validate checks the field values on ListPlansRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPlansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPlansRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPlansRequestMultiError, or nil if none found.
func (m *ListPlansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPlansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := ListPlansRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PerPage

	// no validation rules for Cursor

	// no validation rules for PlanType

	if len(errors) > 0 {
		return ListPlansRequestMultiError(errors)
	}

	return nil
}

// ListPlansRequestMultiError is an error wrapping multiple validation errors
// returned by ListPlansRequest.ValidateAll() if the designated constraints
// aren't met.
type ListPlansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPlansRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPlansRequestMultiError) AllErrors() []error { return m }

// ListPlansRequestValidationError is the validation error returned by
// ListPlansRequest.Validate if the designated constraints aren't met.
type ListPlansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlansRequestValidationError) ErrorName() string { return "ListPlansRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListPlansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlansRequestValidationError{}

// Validate checks the field values on ListPlansResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListPlansResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPlansResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPlansResponseMultiError, or nil if none found.
func (m *ListPlansResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPlansResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPlansResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPlansResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPlansResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPlansResponseMultiError(errors)
	}

	return nil
}

// ListPlansResponseMultiError is an error wrapping multiple validation errors
// returned by ListPlansResponse.ValidateAll() if the designated constraints
// aren't met.
type ListPlansResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPlansResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPlansResponseMultiError) AllErrors() []error { return m }

// ListPlansResponseValidationError is the validation error returned by
// ListPlansResponse.Validate if the designated constraints aren't met.
type ListPlansResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPlansResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPlansResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPlansResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPlansResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPlansResponseValidationError) ErrorName() string {
	return "ListPlansResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPlansResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPlansResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPlansResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPlansResponseValidationError{}

// Validate checks the field values on StartInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartInstanceRequestMultiError, or nil if none found.
func (m *StartInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := StartInstanceRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return StartInstanceRequestMultiError(errors)
	}

	return nil
}

// StartInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by StartInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type StartInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartInstanceRequestMultiError) AllErrors() []error { return m }

// StartInstanceRequestValidationError is the validation error returned by
// StartInstanceRequest.Validate if the designated constraints aren't met.
type StartInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartInstanceRequestValidationError) ErrorName() string {
	return "StartInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartInstanceRequestValidationError{}

// Validate checks the field values on StartInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartInstanceResponseMultiError, or nil if none found.
func (m *StartInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StartInstanceResponseMultiError(errors)
	}

	return nil
}

// StartInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by StartInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type StartInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartInstanceResponseMultiError) AllErrors() []error { return m }

// StartInstanceResponseValidationError is the validation error returned by
// StartInstanceResponse.Validate if the designated constraints aren't met.
type StartInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartInstanceResponseValidationError) ErrorName() string {
	return "StartInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartInstanceResponseValidationError{}

// Validate checks the field values on StopInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopInstanceRequestMultiError, or nil if none found.
func (m *StopInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := StopInstanceRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return StopInstanceRequestMultiError(errors)
	}

	return nil
}

// StopInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by StopInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type StopInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopInstanceRequestMultiError) AllErrors() []error { return m }

// StopInstanceRequestValidationError is the validation error returned by
// StopInstanceRequest.Validate if the designated constraints aren't met.
type StopInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopInstanceRequestValidationError) ErrorName() string {
	return "StopInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopInstanceRequestValidationError{}

// Validate checks the field values on StopInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopInstanceResponseMultiError, or nil if none found.
func (m *StopInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StopInstanceResponseMultiError(errors)
	}

	return nil
}

// StopInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by StopInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type StopInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopInstanceResponseMultiError) AllErrors() []error { return m }

// StopInstanceResponseValidationError is the validation error returned by
// StopInstanceResponse.Validate if the designated constraints aren't met.
type StopInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopInstanceResponseValidationError) ErrorName() string {
	return "StopInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopInstanceResponseValidationError{}

// Validate checks the field values on RebootInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RebootInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RebootInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RebootInstanceRequestMultiError, or nil if none found.
func (m *RebootInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RebootInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := RebootInstanceRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return RebootInstanceRequestMultiError(errors)
	}

	return nil
}

// RebootInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by RebootInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type RebootInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootInstanceRequestMultiError) AllErrors() []error { return m }

// RebootInstanceRequestValidationError is the validation error returned by
// RebootInstanceRequest.Validate if the designated constraints aren't met.
type RebootInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootInstanceRequestValidationError) ErrorName() string {
	return "RebootInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RebootInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRebootInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootInstanceRequestValidationError{}

// Validate checks the field values on RebootInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RebootInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RebootInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RebootInstanceResponseMultiError, or nil if none found.
func (m *RebootInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RebootInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RebootInstanceResponseMultiError(errors)
	}

	return nil
}

// RebootInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by RebootInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type RebootInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootInstanceResponseMultiError) AllErrors() []error { return m }

// RebootInstanceResponseValidationError is the validation error returned by
// RebootInstanceResponse.Validate if the designated constraints aren't met.
type RebootInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootInstanceResponseValidationError) ErrorName() string {
	return "RebootInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RebootInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRebootInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootInstanceResponseValidationError{}

// Validate checks the field values on DeleteInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInstanceRequestMultiError, or nil if none found.
func (m *DeleteInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := DeleteInstanceRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return DeleteInstanceRequestMultiError(errors)
	}

	return nil
}

// DeleteInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInstanceRequestMultiError) AllErrors() []error { return m }

// DeleteInstanceRequestValidationError is the validation error returned by
// DeleteInstanceRequest.Validate if the designated constraints aren't met.
type DeleteInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstanceRequestValidationError) ErrorName() string {
	return "DeleteInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstanceRequestValidationError{}

// Validate checks the field values on DeleteInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInstanceResponseMultiError, or nil if none found.
func (m *DeleteInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteInstanceResponseMultiError(errors)
	}

	return nil
}

// DeleteInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInstanceResponseMultiError) AllErrors() []error { return m }

// DeleteInstanceResponseValidationError is the validation error returned by
// DeleteInstanceResponse.Validate if the designated constraints aren't met.
type DeleteInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstanceResponseValidationError) ErrorName() string {
	return "DeleteInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstanceResponseValidationError{}
