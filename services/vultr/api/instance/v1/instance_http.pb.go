// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type InstanceHTTPServer interface {
	CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error)
	DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error)
	ListImages(context.Context, *ListImagesRequest) (*ListImagesResponse, error)
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	ListPlans(context.Context, *ListPlansRequest) (*ListPlansResponse, error)
	ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error)
	RebootInstance(context.Context, *RebootInstanceRequest) (*RebootInstanceResponse, error)
	StartInstance(context.Context, *StartInstanceRequest) (*StartInstanceResponse, error)
	StopInstance(context.Context, *StopInstanceRequest) (*StopInstanceResponse, error)
}

func RegisterInstanceHTTPServer(s *http.Server, srv InstanceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/regions", _Instance_ListRegions0_HTTP_Handler(srv))
	r.GET("/api/images", _Instance_ListImages0_HTTP_Handler(srv))
	r.GET("/api/plans", _Instance_ListPlans0_HTTP_Handler(srv))
	r.POST("/api/instance", _Instance_CreateInstance0_HTTP_Handler(srv))
	r.GET("/api/instances", _Instance_ListInstances0_HTTP_Handler(srv))
	r.PUT("/api/instance/start", _Instance_StartInstance0_HTTP_Handler(srv))
	r.PUT("/api/instance/stop", _Instance_StopInstance0_HTTP_Handler(srv))
	r.PUT("/api/instance/reboot", _Instance_RebootInstance0_HTTP_Handler(srv))
	r.PUT("/api/instance/terminate", _Instance_DeleteInstance0_HTTP_Handler(srv))
}

func _Instance_ListRegions0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRegionsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.vultr.api.instance.v1.Instance/ListRegions")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRegions(ctx, req.(*ListRegionsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRegionsResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_ListImages0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListImagesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.vultr.api.instance.v1.Instance/ListImages")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListImages(ctx, req.(*ListImagesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListImagesResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_ListPlans0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPlansRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.vultr.api.instance.v1.Instance/ListPlans")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPlans(ctx, req.(*ListPlansRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPlansResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_CreateInstance0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateInstanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.vultr.api.instance.v1.Instance/CreateInstance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateInstance(ctx, req.(*CreateInstanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateInstanceResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_ListInstances0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListInstancesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.vultr.api.instance.v1.Instance/ListInstances")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListInstances(ctx, req.(*ListInstancesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListInstancesResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_StartInstance0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StartInstanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.vultr.api.instance.v1.Instance/StartInstance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StartInstance(ctx, req.(*StartInstanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StartInstanceResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_StopInstance0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StopInstanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.vultr.api.instance.v1.Instance/StopInstance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StopInstance(ctx, req.(*StopInstanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StopInstanceResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_RebootInstance0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RebootInstanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.vultr.api.instance.v1.Instance/RebootInstance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RebootInstance(ctx, req.(*RebootInstanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RebootInstanceResponse)
		return ctx.Result(200, reply)
	}
}

func _Instance_DeleteInstance0_HTTP_Handler(srv InstanceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteInstanceRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/services.vultr.api.instance.v1.Instance/DeleteInstance")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteInstance(ctx, req.(*DeleteInstanceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteInstanceResponse)
		return ctx.Result(200, reply)
	}
}

type InstanceHTTPClient interface {
	CreateInstance(ctx context.Context, req *CreateInstanceRequest, opts ...http.CallOption) (rsp *CreateInstanceResponse, err error)
	DeleteInstance(ctx context.Context, req *DeleteInstanceRequest, opts ...http.CallOption) (rsp *DeleteInstanceResponse, err error)
	ListImages(ctx context.Context, req *ListImagesRequest, opts ...http.CallOption) (rsp *ListImagesResponse, err error)
	ListInstances(ctx context.Context, req *ListInstancesRequest, opts ...http.CallOption) (rsp *ListInstancesResponse, err error)
	ListPlans(ctx context.Context, req *ListPlansRequest, opts ...http.CallOption) (rsp *ListPlansResponse, err error)
	ListRegions(ctx context.Context, req *ListRegionsRequest, opts ...http.CallOption) (rsp *ListRegionsResponse, err error)
	RebootInstance(ctx context.Context, req *RebootInstanceRequest, opts ...http.CallOption) (rsp *RebootInstanceResponse, err error)
	StartInstance(ctx context.Context, req *StartInstanceRequest, opts ...http.CallOption) (rsp *StartInstanceResponse, err error)
	StopInstance(ctx context.Context, req *StopInstanceRequest, opts ...http.CallOption) (rsp *StopInstanceResponse, err error)
}

type InstanceHTTPClientImpl struct {
	cc *http.Client
}

func NewInstanceHTTPClient(client *http.Client) InstanceHTTPClient {
	return &InstanceHTTPClientImpl{client}
}

func (c *InstanceHTTPClientImpl) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...http.CallOption) (*CreateInstanceResponse, error) {
	var out CreateInstanceResponse
	pattern := "/api/instance"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/services.vultr.api.instance.v1.Instance/CreateInstance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...http.CallOption) (*DeleteInstanceResponse, error) {
	var out DeleteInstanceResponse
	pattern := "/api/instance/terminate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/services.vultr.api.instance.v1.Instance/DeleteInstance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) ListImages(ctx context.Context, in *ListImagesRequest, opts ...http.CallOption) (*ListImagesResponse, error) {
	var out ListImagesResponse
	pattern := "/api/images"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.vultr.api.instance.v1.Instance/ListImages"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...http.CallOption) (*ListInstancesResponse, error) {
	var out ListInstancesResponse
	pattern := "/api/instances"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.vultr.api.instance.v1.Instance/ListInstances"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) ListPlans(ctx context.Context, in *ListPlansRequest, opts ...http.CallOption) (*ListPlansResponse, error) {
	var out ListPlansResponse
	pattern := "/api/plans"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.vultr.api.instance.v1.Instance/ListPlans"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...http.CallOption) (*ListRegionsResponse, error) {
	var out ListRegionsResponse
	pattern := "/api/regions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/services.vultr.api.instance.v1.Instance/ListRegions"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) RebootInstance(ctx context.Context, in *RebootInstanceRequest, opts ...http.CallOption) (*RebootInstanceResponse, error) {
	var out RebootInstanceResponse
	pattern := "/api/instance/reboot"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/services.vultr.api.instance.v1.Instance/RebootInstance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) StartInstance(ctx context.Context, in *StartInstanceRequest, opts ...http.CallOption) (*StartInstanceResponse, error) {
	var out StartInstanceResponse
	pattern := "/api/instance/start"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/services.vultr.api.instance.v1.Instance/StartInstance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *InstanceHTTPClientImpl) StopInstance(ctx context.Context, in *StopInstanceRequest, opts ...http.CallOption) (*StopInstanceResponse, error) {
	var out StopInstanceResponse
	pattern := "/api/instance/stop"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/services.vultr.api.instance.v1.Instance/StopInstance"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
