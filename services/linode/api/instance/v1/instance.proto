syntax = "proto3";

package services.vultr.api.instance.v1;
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "validate/validate.proto";

option go_package = "cloud-api/services/vultr/api/instance/v1;v1";
option java_multiple_files = true;
option java_package = "services.vultr.api.instance.v1";

service Instance {
  // Lists the Regions available for Linode services. Not all services are guaranteed to be available in all Regions.
  rpc ListRegions (ListRegionsRequest) returns (ListRegionsResponse) {
    option (google.api.http) = {
      get: "/api/regions"
    };
  };
  // LReturns a paginated list of Images.
  rpc ListImages (ListImagesRequest) returns (ListImagesResponse) {
    option (google.api.http) = {
      get: "/api/images"
    };
  };
  // Get a list of all VPS plans at Vultr.
  rpc ListInstanceTypes(ListInstanceTypesRequest) returns (ListInstanceTypesResponse) {
    option (google.api.http) = {
      get: "/api/instance-types"
    };
  };
  // Creates a Linode Instance on your Account.
  rpc CreateInstance (CreateInstanceRequest) returns (CreateInstanceResponse) {
    option (google.api.http) = {
      post: "/api/instance",
      body: "*"
    };
  };
  // Returns a paginated list of Linodes you have permission to view.
  rpc ListInstance (ListInstancesRequest) returns (ListInstancesResponse) {
    option (google.api.http) = {
      get: "/api/instances"
    };
  };
  // Boots a Linode you have permission to modify.
  rpc StartInstance(StartInstanceRequest) returns (StartInstanceResponse) {
    option (google.api.http) = {
      put: "/api/instances/start",
      body: "*"
    };
  };
  // Shuts down a Linode you have permission to modify.
  rpc StopInstance(StopInstanceRequest) returns (StopInstanceResponse) {
    option (google.api.http) = {
      put: "/api/instances/stop",
      body: "*"
    };
  };
  // Reboots a Linode you have permission to modify.
  rpc RebootInstance(RebootInstanceRequest) returns (RebootInstanceResponse) {
    option (google.api.http) = {
      put: "/api/instances/reboot",
      body: "*"
    };
  };
  // Deletes a Linode you have permission to read_write.
  rpc DeleteInstance(DeleteInstanceRequest) returns (DeleteInstanceResponse) {
    option (google.api.http) = {
      put: "/api/instances/terminate",
      body: "*"
    };
  };
}

message CreateInstanceRequest {
  string access_token = 1 [(validate.rules).string.min_len = 1];
  // The Region id where the Instance is located.
  string region = 2 [(validate.rules).string.min_len = 1];
  // The Linode Type of the Linode you are creating.
  string instance_type = 3 [(validate.rules).string.min_len = 1];
  // An Image ID to deploy the Linode Disk from.
  string image = 4 [(validate.rules).string.min_len = 1];
  // 3..64 characters, The Linode’s label is for display purposes only. If no label is provided for a Linode, a default will be assigned.
  string label = 5;
  // 7..128 characters, This sets the root user’s password on a newly-created Linode Disk when deploying from an Image.
  string password = 6;
}

message CreateInstanceResponse {
  google.protobuf.Any data = 1;
}

message ListInstancesRequest {
  string access_token = 1 [(validate.rules).string.min_len = 1];
  // The page of a collection to return. integer >= 1, Default: 1
  int32 page = 2;
  // The number of items to return per page. integer 25..100, Default: 100
  int32 page_size = 3;
}

message ListInstancesResponse {
  google.protobuf.Any data = 1;
}

message ListRegionsRequest {
  string access_token = 1 [(validate.rules).string.min_len = 1];
  // The page of a collection to return. integer >= 1, Default: 1
  int32 page = 2;
  // The number of items to return per page. integer 25..100, Default: 100
  int32 page_size = 3;
}

message ListRegionsResponse {
  google.protobuf.Any data = 1;
}

message ListImagesRequest {
  string access_token = 1 [(validate.rules).string.min_len = 1];
  // The page of a collection to return. integer >= 1, Default: 1
  int32 page = 2;
  // The number of items to return per page. integer 25..100, Default: 100
  int32 page_size = 3;
}

message ListImagesResponse {
  google.protobuf.Any data = 1;
}

message ListInstanceTypesRequest {
  string access_token = 1 [(validate.rules).string.min_len = 1];
  // The page of a collection to return. integer >= 1, Default: 1
  int32 page = 2;
  // The number of items to return per page. integer 25..100, Default: 100
  int32 page_size = 3;
}

message ListInstanceTypesResponse {
  google.protobuf.Any data = 1;
}

message StartInstanceRequest {
  string access_token = 1 [(validate.rules).string.min_len = 1];
  // The ID of the Linode to boot.
  int32 instance_id = 2;
  // The Linode Config ID to boot into.
  int32 config_id = 3;
}

message StartInstanceResponse {
}

message StopInstanceRequest {
  string access_token = 1 [(validate.rules).string.min_len = 1];
  // ID of the Linode to shutdown.
  int32 instance_id = 2;
}

message StopInstanceResponse {
}

message RebootInstanceRequest {
  string access_token = 1 [(validate.rules).string.min_len = 1];
  // The ID of the Linode to reboot.
  int32 instance_id = 2;
  // The Linode Config ID to reboot into.
  int32 config_id = 3;
}

message RebootInstanceResponse {
}

message DeleteInstanceRequest {
  string access_token = 1 [(validate.rules).string.min_len = 1];
  // ID of the Linode to look up
  int32 instance_id = 2;
}

message DeleteInstanceResponse {
}