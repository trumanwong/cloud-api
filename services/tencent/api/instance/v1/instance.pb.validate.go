// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/instance/v1/instance.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SystemDisk with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemDisk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemDisk with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemDiskMultiError, or
// nil if none found.
func (m *SystemDisk) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemDisk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.DiskType != nil {
		// no validation rules for DiskType
	}

	if m.DiskSize != nil {
		// no validation rules for DiskSize
	}

	if m.CdcId != nil {
		// no validation rules for CdcId
	}

	if len(errors) > 0 {
		return SystemDiskMultiError(errors)
	}

	return nil
}

// SystemDiskMultiError is an error wrapping multiple validation errors
// returned by SystemDisk.ValidateAll() if the designated constraints aren't met.
type SystemDiskMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemDiskMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemDiskMultiError) AllErrors() []error { return m }

// SystemDiskValidationError is the validation error returned by
// SystemDisk.Validate if the designated constraints aren't met.
type SystemDiskValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemDiskValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemDiskValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemDiskValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemDiskValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemDiskValidationError) ErrorName() string { return "SystemDiskValidationError" }

// Error satisfies the builtin error interface
func (e SystemDiskValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemDisk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemDiskValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemDiskValidationError{}

// Validate checks the field values on CreateInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstancesRequestMultiError, or nil if none found.
func (m *CreateInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSecretId()) < 1 {
		err := CreateInstancesRequestValidationError{
			field:  "SecretId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := CreateInstancesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := CreateInstancesRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSystemDisk() == nil {
		err := CreateInstancesRequestValidationError{
			field:  "SystemDisk",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSystemDisk()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInstancesRequestValidationError{
					field:  "SystemDisk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInstancesRequestValidationError{
					field:  "SystemDisk",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystemDisk()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstancesRequestValidationError{
				field:  "SystemDisk",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ImageId != nil {

		if utf8.RuneCountInString(m.GetImageId()) < 1 {
			err := CreateInstancesRequestValidationError{
				field:  "ImageId",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.InstanceType != nil {
		// no validation rules for InstanceType
	}

	if m.InstanceCount != nil {

		if val := m.GetInstanceCount(); val < 1 || val > 100 {
			err := CreateInstancesRequestValidationError{
				field:  "InstanceCount",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Password != nil {
		// no validation rules for Password
	}

	if m.DryRun != nil {
		// no validation rules for DryRun
	}

	if len(errors) > 0 {
		return CreateInstancesRequestMultiError(errors)
	}

	return nil
}

// CreateInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by CreateInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstancesRequestMultiError) AllErrors() []error { return m }

// CreateInstancesRequestValidationError is the validation error returned by
// CreateInstancesRequest.Validate if the designated constraints aren't met.
type CreateInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstancesRequestValidationError) ErrorName() string {
	return "CreateInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstancesRequestValidationError{}

// Validate checks the field values on CreateInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstancesResponseMultiError, or nil if none found.
func (m *CreateInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateInstancesResponseMultiError(errors)
	}

	return nil
}

// CreateInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by CreateInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstancesResponseMultiError) AllErrors() []error { return m }

// CreateInstancesResponseValidationError is the validation error returned by
// CreateInstancesResponse.Validate if the designated constraints aren't met.
type CreateInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstancesResponseValidationError) ErrorName() string {
	return "CreateInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstancesResponseValidationError{}

// Validate checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesRequestMultiError, or nil if none found.
func (m *ListInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSecretId()) < 1 {
		err := ListInstancesRequestValidationError{
			field:  "SecretId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := ListInstancesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := ListInstancesRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Offset != nil {
		// no validation rules for Offset
	}

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if m.InstanceName != nil {
		// no validation rules for InstanceName
	}

	if len(errors) > 0 {
		return ListInstancesRequestMultiError(errors)
	}

	return nil
}

// ListInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by ListInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesRequestMultiError) AllErrors() []error { return m }

// ListInstancesRequestValidationError is the validation error returned by
// ListInstancesRequest.Validate if the designated constraints aren't met.
type ListInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesRequestValidationError) ErrorName() string {
	return "ListInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesRequestValidationError{}

// Validate checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesResponseMultiError, or nil if none found.
func (m *ListInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListInstancesResponseMultiError(errors)
	}

	return nil
}

// ListInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by ListInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponseMultiError) AllErrors() []error { return m }

// ListInstancesResponseValidationError is the validation error returned by
// ListInstancesResponse.Validate if the designated constraints aren't met.
type ListInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponseValidationError) ErrorName() string {
	return "ListInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponseValidationError{}

// Validate checks the field values on ListRegionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegionsRequestMultiError, or nil if none found.
func (m *ListRegionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSecretId()) < 1 {
		err := ListRegionsRequestValidationError{
			field:  "SecretId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := ListRegionsRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListRegionsRequestMultiError(errors)
	}

	return nil
}

// ListRegionsRequestMultiError is an error wrapping multiple validation errors
// returned by ListRegionsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRegionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegionsRequestMultiError) AllErrors() []error { return m }

// ListRegionsRequestValidationError is the validation error returned by
// ListRegionsRequest.Validate if the designated constraints aren't met.
type ListRegionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsRequestValidationError) ErrorName() string {
	return "ListRegionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsRequestValidationError{}

// Validate checks the field values on ListRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegionsResponseMultiError, or nil if none found.
func (m *ListRegionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRegionsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRegionsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegionsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRegionsResponseMultiError(errors)
	}

	return nil
}

// ListRegionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListRegionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRegionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegionsResponseMultiError) AllErrors() []error { return m }

// ListRegionsResponseValidationError is the validation error returned by
// ListRegionsResponse.Validate if the designated constraints aren't met.
type ListRegionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsResponseValidationError) ErrorName() string {
	return "ListRegionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsResponseValidationError{}

// Validate checks the field values on ListImagesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListImagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImagesRequestMultiError, or nil if none found.
func (m *ListImagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSecretId()) < 1 {
		err := ListImagesRequestValidationError{
			field:  "SecretId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := ListImagesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := ListImagesRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Offset != nil {
		// no validation rules for Offset
	}

	if m.Limit != nil {

		if val := m.GetLimit(); val <= 0 || val > 100 {
			err := ListImagesRequestValidationError{
				field:  "Limit",
				reason: "value must be inside range (0, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListImagesRequestMultiError(errors)
	}

	return nil
}

// ListImagesRequestMultiError is an error wrapping multiple validation errors
// returned by ListImagesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListImagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImagesRequestMultiError) AllErrors() []error { return m }

// ListImagesRequestValidationError is the validation error returned by
// ListImagesRequest.Validate if the designated constraints aren't met.
type ListImagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImagesRequestValidationError) ErrorName() string {
	return "ListImagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListImagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImagesRequestValidationError{}

// Validate checks the field values on ListImagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListImagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImagesResponseMultiError, or nil if none found.
func (m *ListImagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListImagesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListImagesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListImagesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListImagesResponseMultiError(errors)
	}

	return nil
}

// ListImagesResponseMultiError is an error wrapping multiple validation errors
// returned by ListImagesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListImagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImagesResponseMultiError) AllErrors() []error { return m }

// ListImagesResponseValidationError is the validation error returned by
// ListImagesResponse.Validate if the designated constraints aren't met.
type ListImagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImagesResponseValidationError) ErrorName() string {
	return "ListImagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListImagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImagesResponseValidationError{}

// Validate checks the field values on ListInstanceTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstanceTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstanceTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstanceTypesRequestMultiError, or nil if none found.
func (m *ListInstanceTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstanceTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSecretId()) < 1 {
		err := ListInstanceTypesRequestValidationError{
			field:  "SecretId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := ListInstanceTypesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := ListInstanceTypesRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListInstanceTypesRequestMultiError(errors)
	}

	return nil
}

// ListInstanceTypesRequestMultiError is an error wrapping multiple validation
// errors returned by ListInstanceTypesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInstanceTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstanceTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstanceTypesRequestMultiError) AllErrors() []error { return m }

// ListInstanceTypesRequestValidationError is the validation error returned by
// ListInstanceTypesRequest.Validate if the designated constraints aren't met.
type ListInstanceTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstanceTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstanceTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstanceTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstanceTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstanceTypesRequestValidationError) ErrorName() string {
	return "ListInstanceTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstanceTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstanceTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstanceTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstanceTypesRequestValidationError{}

// Validate checks the field values on ListInstanceTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstanceTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstanceTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstanceTypesResponseMultiError, or nil if none found.
func (m *ListInstanceTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstanceTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInstanceTypesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInstanceTypesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstanceTypesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListInstanceTypesResponseMultiError(errors)
	}

	return nil
}

// ListInstanceTypesResponseMultiError is an error wrapping multiple validation
// errors returned by ListInstanceTypesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListInstanceTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstanceTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstanceTypesResponseMultiError) AllErrors() []error { return m }

// ListInstanceTypesResponseValidationError is the validation error returned by
// ListInstanceTypesResponse.Validate if the designated constraints aren't met.
type ListInstanceTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstanceTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstanceTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstanceTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstanceTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstanceTypesResponseValidationError) ErrorName() string {
	return "ListInstanceTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstanceTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstanceTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstanceTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstanceTypesResponseValidationError{}

// Validate checks the field values on StartInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartInstancesRequestMultiError, or nil if none found.
func (m *StartInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSecretId()) < 1 {
		err := StartInstancesRequestValidationError{
			field:  "SecretId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := StartInstancesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := StartInstancesRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StartInstancesRequestMultiError(errors)
	}

	return nil
}

// StartInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by StartInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type StartInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartInstancesRequestMultiError) AllErrors() []error { return m }

// StartInstancesRequestValidationError is the validation error returned by
// StartInstancesRequest.Validate if the designated constraints aren't met.
type StartInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartInstancesRequestValidationError) ErrorName() string {
	return "StartInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartInstancesRequestValidationError{}

// Validate checks the field values on StartInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartInstancesResponseMultiError, or nil if none found.
func (m *StartInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartInstancesResponseMultiError(errors)
	}

	return nil
}

// StartInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by StartInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type StartInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartInstancesResponseMultiError) AllErrors() []error { return m }

// StartInstancesResponseValidationError is the validation error returned by
// StartInstancesResponse.Validate if the designated constraints aren't met.
type StartInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartInstancesResponseValidationError) ErrorName() string {
	return "StartInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartInstancesResponseValidationError{}

// Validate checks the field values on StopInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopInstancesRequestMultiError, or nil if none found.
func (m *StopInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSecretId()) < 1 {
		err := StopInstancesRequestValidationError{
			field:  "SecretId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := StopInstancesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := StopInstancesRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.StopType != nil {
		// no validation rules for StopType
	}

	if m.StoppedMode != nil {
		// no validation rules for StoppedMode
	}

	if len(errors) > 0 {
		return StopInstancesRequestMultiError(errors)
	}

	return nil
}

// StopInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by StopInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type StopInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopInstancesRequestMultiError) AllErrors() []error { return m }

// StopInstancesRequestValidationError is the validation error returned by
// StopInstancesRequest.Validate if the designated constraints aren't met.
type StopInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopInstancesRequestValidationError) ErrorName() string {
	return "StopInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopInstancesRequestValidationError{}

// Validate checks the field values on StopInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopInstancesResponseMultiError, or nil if none found.
func (m *StopInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StopInstancesResponseMultiError(errors)
	}

	return nil
}

// StopInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by StopInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type StopInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopInstancesResponseMultiError) AllErrors() []error { return m }

// StopInstancesResponseValidationError is the validation error returned by
// StopInstancesResponse.Validate if the designated constraints aren't met.
type StopInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopInstancesResponseValidationError) ErrorName() string {
	return "StopInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopInstancesResponseValidationError{}

// Validate checks the field values on RebootInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RebootInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RebootInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RebootInstancesRequestMultiError, or nil if none found.
func (m *RebootInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RebootInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSecretId()) < 1 {
		err := RebootInstancesRequestValidationError{
			field:  "SecretId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := RebootInstancesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := RebootInstancesRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.StopType != nil {
		// no validation rules for StopType
	}

	if len(errors) > 0 {
		return RebootInstancesRequestMultiError(errors)
	}

	return nil
}

// RebootInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by RebootInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type RebootInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootInstancesRequestMultiError) AllErrors() []error { return m }

// RebootInstancesRequestValidationError is the validation error returned by
// RebootInstancesRequest.Validate if the designated constraints aren't met.
type RebootInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootInstancesRequestValidationError) ErrorName() string {
	return "RebootInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RebootInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRebootInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootInstancesRequestValidationError{}

// Validate checks the field values on RebootInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RebootInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RebootInstancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RebootInstancesResponseMultiError, or nil if none found.
func (m *RebootInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RebootInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RebootInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RebootInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RebootInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RebootInstancesResponseMultiError(errors)
	}

	return nil
}

// RebootInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by RebootInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type RebootInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootInstancesResponseMultiError) AllErrors() []error { return m }

// RebootInstancesResponseValidationError is the validation error returned by
// RebootInstancesResponse.Validate if the designated constraints aren't met.
type RebootInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootInstancesResponseValidationError) ErrorName() string {
	return "RebootInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RebootInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRebootInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootInstancesResponseValidationError{}

// Validate checks the field values on DeleteInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInstancesRequestMultiError, or nil if none found.
func (m *DeleteInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSecretId()) < 1 {
		err := DeleteInstancesRequestValidationError{
			field:  "SecretId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := DeleteInstancesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegion()) < 1 {
		err := DeleteInstancesRequestValidationError{
			field:  "Region",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteInstancesRequestMultiError(errors)
	}

	return nil
}

// DeleteInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInstancesRequestMultiError) AllErrors() []error { return m }

// DeleteInstancesRequestValidationError is the validation error returned by
// DeleteInstancesRequest.Validate if the designated constraints aren't met.
type DeleteInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstancesRequestValidationError) ErrorName() string {
	return "DeleteInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstancesRequestValidationError{}

// Validate checks the field values on DeleteInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInstancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInstancesResponseMultiError, or nil if none found.
func (m *DeleteInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteInstancesResponseMultiError(errors)
	}

	return nil
}

// DeleteInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInstancesResponseMultiError) AllErrors() []error { return m }

// DeleteInstancesResponseValidationError is the validation error returned by
// DeleteInstancesResponse.Validate if the designated constraints aren't met.
type DeleteInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstancesResponseValidationError) ErrorName() string {
	return "DeleteInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstancesResponseValidationError{}
