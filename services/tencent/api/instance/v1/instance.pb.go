// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: api/instance/v1/instance.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId  string `protobuf:"bytes,1,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// 地域参数，用来标识希望操作哪个地域的数据
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// 镜像id
	ImageId *string `protobuf:"bytes,5,opt,name=image_id,json=imageId,proto3,oneof" json:"image_id,omitempty"`
	// 实例名称, 不指定实例显示名称则默认显示‘未命名’。
	// 购买多台实例，如果指定模式串{R:x}，表示生成数字[x, x+n-1]，其中n表示购买实例的数量，例如server_{R:3}，购买1台时，实例显示名称为server_3；购买2台时，实例显示名称分别为server_3，server_4。支持指定多个模式串{R:x}。
	// 购买多台实例，如果不指定模式串，则在实例显示名称添加后缀1、2...n，其中n表示购买实例的数量，例如server_，购买2台时，实例显示名称分别为server_1，server_2。
	// 最多支持60个字符（包含模式串）。
	Name *string `protobuf:"bytes,6,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// 实例规格
	InstanceType *string `protobuf:"bytes,7,opt,name=instance_type,json=instanceType,proto3,oneof" json:"instance_type,omitempty"`
	// 实例系统盘配置信息。若不指定该参数，则按照系统默认值进行分配。
	SystemDisk *SystemDisk `protobuf:"bytes,8,opt,name=system_disk,json=systemDisk,proto3" json:"system_disk,omitempty"`
	// 购买实例数量。包年包月实例取值范围：[1，300]，按量计费实例取值范围：[1，100]。默认取值：1。指定购买实例的数量不能超过用户所能购买的剩余配额数量，具体配额相关限制详见[CVM实例购买限制](https://cloud.tencent.com/document/product/213/2664)。
	InstanceCount *int64 `protobuf:"varint,9,opt,name=instance_count,json=instanceCount,proto3,oneof" json:"instance_count,omitempty"`
	// 实例密码, Linux实例密码必须8到30位，至少包括两项[a-z]，[A-Z]、[0-9] 和 [( ) ` ~ ! @ # $ % ^ & * - + = | { } [ ] : ; ' , . ? / ]中的特殊符号。
	//Windows实例密码必须12到30位，至少包括三项[a-z]，[A-Z]，[0-9] 和 [( ) ` ~ ! @ # $ % ^ & * - + = | { } [ ] : ; ' , . ? /]中的特殊符号。
	//
	//若不指定该参数，则由系统随机生成密码，并通过站内信方式通知到用户。
	Password *string `protobuf:"bytes,10,opt,name=password,proto3,oneof" json:"password,omitempty"`
	// 是否只预检此次请求。
	// true：发送检查请求，不会创建实例。检查项包括是否填写了必需参数，请求格式，业务限制和云服务器库存。
	// 如果检查不通过，则返回对应错误码；
	// 如果检查通过，则返回RequestId.
	// false（默认）：发送正常请求，通过检查后直接创建实例
	DryRun *bool `protobuf:"varint,11,opt,name=dry_run,json=dryRun,proto3,oneof" json:"dry_run,omitempty"`
}

func (x *CreateInstancesRequest) Reset() {
	*x = CreateInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstancesRequest) ProtoMessage() {}

func (x *CreateInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstancesRequest.ProtoReflect.Descriptor instead.
func (*CreateInstancesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{0}
}

func (x *CreateInstancesRequest) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *CreateInstancesRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *CreateInstancesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateInstancesRequest) GetImageId() string {
	if x != nil && x.ImageId != nil {
		return *x.ImageId
	}
	return ""
}

func (x *CreateInstancesRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateInstancesRequest) GetInstanceType() string {
	if x != nil && x.InstanceType != nil {
		return *x.InstanceType
	}
	return ""
}

func (x *CreateInstancesRequest) GetSystemDisk() *SystemDisk {
	if x != nil {
		return x.SystemDisk
	}
	return nil
}

func (x *CreateInstancesRequest) GetInstanceCount() int64 {
	if x != nil && x.InstanceCount != nil {
		return *x.InstanceCount
	}
	return 0
}

func (x *CreateInstancesRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CreateInstancesRequest) GetDryRun() bool {
	if x != nil && x.DryRun != nil {
		return *x.DryRun
	}
	return false
}

type CreateInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求id
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
	// 实例id列表
	InstanceIdSets []string `protobuf:"bytes,2,rep,name=instance_id_sets,json=instanceIdSets,proto3" json:"instance_id_sets,omitempty"`
}

func (x *CreateInstancesResponse) Reset() {
	*x = CreateInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstancesResponse) ProtoMessage() {}

func (x *CreateInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstancesResponse.ProtoReflect.Descriptor instead.
func (*CreateInstancesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{1}
}

func (x *CreateInstancesResponse) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

func (x *CreateInstancesResponse) GetInstanceIdSets() []string {
	if x != nil {
		return x.InstanceIdSets
	}
	return nil
}

type ListInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId  string `protobuf:"bytes,1,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// 地域参数，用来标识希望操作哪个地域的数据
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// 偏移量，默认为0
	Offset *int64 `protobuf:"varint,4,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	// 返回数量，默认为20，最大值为100。
	Limit *int64 `protobuf:"varint,5,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	// 按照【实例名称】进行过滤
	InstanceName *string `protobuf:"bytes,6,opt,name=instance_name,json=instanceName,proto3,oneof" json:"instance_name,omitempty"`
}

func (x *ListInstancesRequest) Reset() {
	*x = ListInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesRequest) ProtoMessage() {}

func (x *ListInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesRequest.ProtoReflect.Descriptor instead.
func (*ListInstancesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{2}
}

func (x *ListInstancesRequest) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *ListInstancesRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ListInstancesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListInstancesRequest) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListInstancesRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListInstancesRequest) GetInstanceName() string {
	if x != nil && x.InstanceName != nil {
		return *x.InstanceName
	}
	return ""
}

type SystemDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 系统盘类型。系统盘类型限制详见[存储概述](https://cloud.tencent.com/document/product/213/4952)。
	// 取值范围：
	//  LOCAL_BASIC：本地硬盘
	//  LOCAL_SSD：本地SSD硬盘
	//  CLOUD_BASIC：普通云硬盘
	//  CLOUD_SSD：SSD云硬盘
	//  CLOUD_PREMIUM：高性能云硬盘
	// 默认取值：当前有库存的硬盘类型。
	DiskType *string `protobuf:"bytes,1,opt,name=disk_type,json=diskType,proto3,oneof" json:"disk_type,omitempty"`
	// 系统盘大小，单位：GB。默认值为 50
	DiskSize *int64 `protobuf:"varint,2,opt,name=disk_size,json=diskSize,proto3,oneof" json:"disk_size,omitempty"`
	// 所属的独享集群ID。
	CdcId *string `protobuf:"bytes,3,opt,name=cdc_id,json=cdcId,proto3,oneof" json:"cdc_id,omitempty"`
}

func (x *SystemDisk) Reset() {
	*x = SystemDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemDisk) ProtoMessage() {}

func (x *SystemDisk) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemDisk.ProtoReflect.Descriptor instead.
func (*SystemDisk) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{3}
}

func (x *SystemDisk) GetDiskType() string {
	if x != nil && x.DiskType != nil {
		return *x.DiskType
	}
	return ""
}

func (x *SystemDisk) GetDiskSize() int64 {
	if x != nil && x.DiskSize != nil {
		return *x.DiskSize
	}
	return 0
}

func (x *SystemDisk) GetCdcId() string {
	if x != nil && x.CdcId != nil {
		return *x.CdcId
	}
	return ""
}

type ListInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 符合条件的实例数量
	TotalCount *int64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	// 实例详细信息列表
	Instances []*ListInstancesResponse_Instance `protobuf:"bytes,2,rep,name=instances,proto3" json:"instances,omitempty"`
	// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (x *ListInstancesResponse) Reset() {
	*x = ListInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse) ProtoMessage() {}

func (x *ListInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{4}
}

func (x *ListInstancesResponse) GetTotalCount() int64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *ListInstancesResponse) GetInstances() []*ListInstancesResponse_Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

func (x *ListInstancesResponse) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

type ListRegionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId  string `protobuf:"bytes,1,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *ListRegionsRequest) Reset() {
	*x = ListRegionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionsRequest) ProtoMessage() {}

func (x *ListRegionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionsRequest.ProtoReflect.Descriptor instead.
func (*ListRegionsRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{5}
}

func (x *ListRegionsRequest) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *ListRegionsRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type ListRegionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 地域数量
	TotalCount *uint64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	// 地域列表信息
	Regions []*ListRegionsResponse_Region `protobuf:"bytes,2,rep,name=regions,proto3" json:"regions,omitempty"`
	// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (x *ListRegionsResponse) Reset() {
	*x = ListRegionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionsResponse) ProtoMessage() {}

func (x *ListRegionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionsResponse.ProtoReflect.Descriptor instead.
func (*ListRegionsResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{6}
}

func (x *ListRegionsResponse) GetTotalCount() uint64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *ListRegionsResponse) GetRegions() []*ListRegionsResponse_Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *ListRegionsResponse) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

type ListImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId  string `protobuf:"bytes,1,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// 地域参数，用来标识希望操作哪个地域的数据
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// 偏移量，默认为0
	Offset *uint64 `protobuf:"varint,4,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	// 数量限制，默认为20，最大值为100
	Limit *uint64 `protobuf:"varint,5,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
}

func (x *ListImagesRequest) Reset() {
	*x = ListImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesRequest) ProtoMessage() {}

func (x *ListImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesRequest.ProtoReflect.Descriptor instead.
func (*ListImagesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{7}
}

func (x *ListImagesRequest) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *ListImagesRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ListImagesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListImagesRequest) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListImagesRequest) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type ListImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 一个关于镜像详细信息的结构体，主要包括镜像的主要状态与属性。
	Images []*ListImagesResponse_Image `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	// 符合要求的镜像数量
	TotalCount *int64 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (x *ListImagesResponse) Reset() {
	*x = ListImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesResponse) ProtoMessage() {}

func (x *ListImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesResponse.ProtoReflect.Descriptor instead.
func (*ListImagesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{8}
}

func (x *ListImagesResponse) GetImages() []*ListImagesResponse_Image {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ListImagesResponse) GetTotalCount() int64 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

func (x *ListImagesResponse) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

type ListInstanceTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId  string `protobuf:"bytes,1,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// 地域参数，用来标识希望操作哪个地域的数据
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ListInstanceTypesRequest) Reset() {
	*x = ListInstanceTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypesRequest) ProtoMessage() {}

func (x *ListInstanceTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypesRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceTypesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{9}
}

func (x *ListInstanceTypesRequest) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *ListInstanceTypesRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ListInstanceTypesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type ListInstanceTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceTypes []*ListInstanceTypesResponse_InstanceType `protobuf:"bytes,1,rep,name=instance_types,json=instanceTypes,proto3" json:"instance_types,omitempty"`
	// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (x *ListInstanceTypesResponse) Reset() {
	*x = ListInstanceTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypesResponse) ProtoMessage() {}

func (x *ListInstanceTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypesResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceTypesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{10}
}

func (x *ListInstanceTypesResponse) GetInstanceTypes() []*ListInstanceTypesResponse_InstanceType {
	if x != nil {
		return x.InstanceTypes
	}
	return nil
}

func (x *ListInstanceTypesResponse) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

type StartInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId  string `protobuf:"bytes,1,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// 地域参数，用来标识希望操作哪个地域的数据
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// 一个或多个待操作的实例ID
	InstanceIds []string `protobuf:"bytes,4,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
}

func (x *StartInstancesRequest) Reset() {
	*x = StartInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstancesRequest) ProtoMessage() {}

func (x *StartInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstancesRequest.ProtoReflect.Descriptor instead.
func (*StartInstancesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{11}
}

func (x *StartInstancesRequest) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *StartInstancesRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *StartInstancesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *StartInstancesRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

type StartInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (x *StartInstancesResponse) Reset() {
	*x = StartInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstancesResponse) ProtoMessage() {}

func (x *StartInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstancesResponse.ProtoReflect.Descriptor instead.
func (*StartInstancesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{12}
}

func (x *StartInstancesResponse) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

type StopInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId  string `protobuf:"bytes,1,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// 地域参数，用来标识希望操作哪个地域的数据
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// 一个或多个待操作的实例ID
	InstanceIds []string `protobuf:"bytes,4,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	// 实例的关闭模式。
	// 取值范围：
	//  SOFT_FIRST：表示在正常关闭失败后进行强制关闭
	//  HARD：直接强制关闭
	//  SOFT：仅软关机
	// 默认取值：SOFT。
	StopType *string `protobuf:"bytes,5,opt,name=stop_type,json=stopType,proto3,oneof" json:"stop_type,omitempty"`
	// 按量计费实例关机收费模式。
	// 取值范围：
	//  KEEP_CHARGING：关机继续收费
	//  STOP_CHARGING：关机停止收费
	// 默认取值：KEEP_CHARGING。
	// 该参数只针对部分按量计费云硬盘实例生效，详情参考[按量计费实例关机不收费说明](https://cloud.tencent.com/document/product/213/19918)
	StoppedMode *string `protobuf:"bytes,6,opt,name=stopped_mode,json=stoppedMode,proto3,oneof" json:"stopped_mode,omitempty"`
}

func (x *StopInstancesRequest) Reset() {
	*x = StopInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInstancesRequest) ProtoMessage() {}

func (x *StopInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInstancesRequest.ProtoReflect.Descriptor instead.
func (*StopInstancesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{13}
}

func (x *StopInstancesRequest) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *StopInstancesRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *StopInstancesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *StopInstancesRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *StopInstancesRequest) GetStopType() string {
	if x != nil && x.StopType != nil {
		return *x.StopType
	}
	return ""
}

func (x *StopInstancesRequest) GetStoppedMode() string {
	if x != nil && x.StoppedMode != nil {
		return *x.StoppedMode
	}
	return ""
}

type StopInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (x *StopInstancesResponse) Reset() {
	*x = StopInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInstancesResponse) ProtoMessage() {}

func (x *StopInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInstancesResponse.ProtoReflect.Descriptor instead.
func (*StopInstancesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{14}
}

func (x *StopInstancesResponse) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

type RebootInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId  string `protobuf:"bytes,1,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// 地域参数，用来标识希望操作哪个地域的数据
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// 一个或多个待操作的实例ID
	InstanceIds []string `protobuf:"bytes,4,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
	// 关机类型。
	// 取值范围：
	//  SOFT_FIRST：表示在正常关闭失败后进行强制关闭
	//  HARD：直接强制关闭
	//  SOFT：仅软关机
	// 默认取值：SOFT。
	StopType *string `protobuf:"bytes,5,opt,name=stop_type,json=stopType,proto3,oneof" json:"stop_type,omitempty"`
}

func (x *RebootInstancesRequest) Reset() {
	*x = RebootInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootInstancesRequest) ProtoMessage() {}

func (x *RebootInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootInstancesRequest.ProtoReflect.Descriptor instead.
func (*RebootInstancesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{15}
}

func (x *RebootInstancesRequest) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *RebootInstancesRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *RebootInstancesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RebootInstancesRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

func (x *RebootInstancesRequest) GetStopType() string {
	if x != nil && x.StopType != nil {
		return *x.StopType
	}
	return ""
}

type RebootInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (x *RebootInstancesResponse) Reset() {
	*x = RebootInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootInstancesResponse) ProtoMessage() {}

func (x *RebootInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootInstancesResponse.ProtoReflect.Descriptor instead.
func (*RebootInstancesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{16}
}

func (x *RebootInstancesResponse) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

type DeleteInstancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecretId  string `protobuf:"bytes,1,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// 地域参数，用来标识希望操作哪个地域的数据
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// 一个或多个待操作的实例ID
	InstanceIds []string `protobuf:"bytes,4,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
}

func (x *DeleteInstancesRequest) Reset() {
	*x = DeleteInstancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstancesRequest) ProtoMessage() {}

func (x *DeleteInstancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstancesRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstancesRequest) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteInstancesRequest) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

func (x *DeleteInstancesRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *DeleteInstancesRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DeleteInstancesRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

type DeleteInstancesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 唯一请求 ID，每次请求都会返回。定位问题时需要提供该次请求的 RequestId。
	RequestId *string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3,oneof" json:"request_id,omitempty"`
}

func (x *DeleteInstancesResponse) Reset() {
	*x = DeleteInstancesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstancesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstancesResponse) ProtoMessage() {}

func (x *DeleteInstancesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstancesResponse.ProtoReflect.Descriptor instead.
func (*DeleteInstancesResponse) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteInstancesResponse) GetRequestId() string {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return ""
}

type ListInstancesResponse_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例所在的位置。
	Placement *ListInstancesResponse_Instance_Placement `protobuf:"bytes,1,opt,name=placement,proto3" json:"placement,omitempty"`
	// 实例`ID`。
	InstanceId *string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3,oneof" json:"instance_id,omitempty"`
	// 实例机型。
	InstanceType *string `protobuf:"bytes,3,opt,name=instance_type,json=instanceType,proto3,oneof" json:"instance_type,omitempty"`
	// 实例的CPU核数，单位：核。
	Cpu *int64 `protobuf:"varint,4,opt,name=cpu,proto3,oneof" json:"cpu,omitempty"`
	// 实例内存容量，单位：`GB`。
	Memory *int64 `protobuf:"varint,5,opt,name=memory,proto3,oneof" json:"memory,omitempty"`
	// 实例业务状态。
	// 取值范围：
	//  NORMAL：表示正常状态的实例
	//  EXPIRED：表示过期的实例
	//  PROTECTIVELY_ISOLATED：表示被安全隔离的实例。
	RestrictState *string `protobuf:"bytes,6,opt,name=restrict_state,json=restrictState,proto3,oneof" json:"restrict_state,omitempty"`
	// 实例名称。
	InstanceName *string `protobuf:"bytes,7,opt,name=instance_name,json=instanceName,proto3,oneof" json:"instance_name,omitempty"`
	// 实例计费模式。
	// 取值范围：
	//  `PREPAID`：表示预付费，即包年包月
	//  `POSTPAID_BY_HOUR`：表示后付费，即按量计费
	//  `CDHPAID`：`CDH`付费，即只对`CDH`计费，不对`CDH`上的实例计费。
	//  `SPOTPAID`：表示竞价实例付费。
	InstanceChargeType *string `protobuf:"bytes,8,opt,name=instance_charge_type,json=instanceChargeType,proto3,oneof" json:"instance_charge_type,omitempty"`
	// 实例系统盘信息。
	SystemDisk *SystemDisk `protobuf:"bytes,9,opt,name=system_disk,json=systemDisk,proto3" json:"system_disk,omitempty"`
	// 实例数据盘信息。
	DataDisks []*ListInstancesResponse_Instance_DataDisk `protobuf:"bytes,10,rep,name=data_disks,json=dataDisks,proto3" json:"data_disks,omitempty"`
	// 实例主网卡的内网`IP`列表。
	PrivateIpAddresses []string `protobuf:"bytes,11,rep,name=private_ip_addresses,json=privateIpAddresses,proto3" json:"private_ip_addresses,omitempty"`
	// 实例主网卡的公网`IP`列表。
	// 注意：此字段可能返回 null，表示取不到有效值。
	PublicIpAddresses []string `protobuf:"bytes,12,rep,name=public_ip_addresses,json=publicIpAddresses,proto3" json:"public_ip_addresses,omitempty"`
	// 实例带宽信息。
	InternetAccessible *ListInstancesResponse_Instance_InternetAccessible `protobuf:"bytes,13,opt,name=internet_accessible,json=internetAccessible,proto3" json:"internet_accessible,omitempty"`
	// 实例所属虚拟私有网络信息。
	VirtualPrivateCloud *ListInstancesResponse_Instance_VirtualPrivateCloud `protobuf:"bytes,14,opt,name=virtual_private_cloud,json=virtualPrivateCloud,proto3" json:"virtual_private_cloud,omitempty"`
	// 生产实例所使用的镜像`ID`。
	ImageId *string `protobuf:"bytes,15,opt,name=image_id,json=imageId,proto3,oneof" json:"image_id,omitempty"`
	// 自动续费标识。
	// 取值范围：
	//  `NOTIFY_AND_MANUAL_RENEW`：表示通知即将过期，但不自动续费
	//  `NOTIFY_AND_AUTO_RENEW`：表示通知即将过期，而且自动续费
	//  `DISABLE_NOTIFY_AND_MANUAL_RENEW`：表示不通知即将过期，也不自动续费。
	// 注意：后付费模式本项为null
	RenewFlag *string `protobuf:"bytes,16,opt,name=renew_flag,json=renewFlag,proto3,oneof" json:"renew_flag,omitempty"`
	// 创建时间。
	// 按照`ISO8601`标准表示，并且使用`UTC`时间。格式为：`YYYY-MM-DDThh:mm:ssZ`。
	CreatedTime *string `protobuf:"bytes,17,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	// 到期时间。
	// 按照`ISO8601`标准表示，并且使用`UTC`时间。格式为：`YYYY-MM-DDThh:mm:ssZ`。
	// 注意：后付费模式本项为null
	ExpiredTime *string `protobuf:"bytes,18,opt,name=expired_time,json=expiredTime,proto3,oneof" json:"expired_time,omitempty"`
	// 操作系统名称。
	OsName *string `protobuf:"bytes,19,opt,name=os_name,json=osName,proto3,oneof" json:"os_name,omitempty"`
	// 实例所属安全组。
	// 该参数可以通过调用 [DescribeSecurityGroups](https://cloud.tencent.com/document/api/215/15808) 的返回值中的sgId字段来获取。
	SecurityGroupIds []string `protobuf:"bytes,20,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	// 实例登录设置。目前只返回实例所关联的密钥。
	LoginSettings *ListInstancesResponse_Instance_LoginSettings `protobuf:"bytes,21,opt,name=login_settings,json=loginSettings,proto3" json:"login_settings,omitempty"`
	// 实例状态。
	// 取值范围：
	//  PENDING：表示创建中
	//  LAUNCH_FAILED：表示创建失败
	//  RUNNING：表示运行中
	//  STOPPED：表示关机
	//  STARTING：表示开机中
	//  STOPPING：表示关机中
	//  REBOOTING：表示重启中
	//  SHUTDOWN：表示停止待销毁
	//  TERMINATING：表示销毁中。
	InstanceState *string `protobuf:"bytes,22,opt,name=instance_state,json=instanceState,proto3,oneof" json:"instance_state,omitempty"`
	// 实例关联的标签列表。
	Tags []*ListInstancesResponse_Instance_Tag `protobuf:"bytes,23,rep,name=tags,proto3" json:"tags,omitempty"`
	// 实例的关机计费模式。
	// 取值范围：
	//  KEEP_CHARGING：关机继续收费
	//  STOP_CHARGING：关机停止收费
	//  NOT_APPLICABLE：实例处于非关机状态或者不适用关机停止计费的条件
	StopChargingMode *string `protobuf:"bytes,24,opt,name=stop_charging_mode,json=stopChargingMode,proto3,oneof" json:"stop_charging_mode,omitempty"`
	// 实例全局唯一ID
	Uuid *string `protobuf:"bytes,25,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	// 实例的最新操作。例：StopInstances、ResetInstance。
	// 注意：此字段可能返回 null，表示取不到有效值。
	LatestOperation *string `protobuf:"bytes,26,opt,name=latest_operation,json=latestOperation,proto3,oneof" json:"latest_operation,omitempty"`
	// 实例的最新操作状态。
	// 取值范围：
	//  SUCCESS：表示操作成功
	//  OPERATING：表示操作执行中
	//  FAILED：表示操作失败
	// 注意：此字段可能返回 null，表示取不到有效值。
	LatestOperationState *string `protobuf:"bytes,27,opt,name=latest_operation_state,json=latestOperationState,proto3,oneof" json:"latest_operation_state,omitempty"`
	// 实例最新操作的唯一请求 ID。
	// 注意：此字段可能返回 null，表示取不到有效值。
	LatestOperationRequestId *string `protobuf:"bytes,28,opt,name=latest_operation_requestId,json=latestOperationRequestId,proto3,oneof" json:"latest_operation_requestId,omitempty"`
	// 分散置放群组ID。
	// 注意：此字段可能返回 null，表示取不到有效值。
	DisasterRecoverGroupId *string `protobuf:"bytes,29,opt,name=disaster_recover_group_id,json=disasterRecoverGroupId,proto3,oneof" json:"disaster_recover_group_id,omitempty"`
	// 实例的IPv6地址。
	// 注意：此字段可能返回 null，表示取不到有效值。
	Ipv6Addresses []string `protobuf:"bytes,30,rep,name=ipv6_addresses,json=ipv6Addresses,proto3" json:"ipv6_addresses,omitempty"`
	// CAM角色名。
	// 注意：此字段可能返回 null，表示取不到有效值。
	CamRoleName *string `protobuf:"bytes,31,opt,name=cam_role_name,json=camRoleName,proto3,oneof" json:"cam_role_name,omitempty"`
	// 高性能计算集群`ID`。
	// 注意：此字段可能返回 null，表示取不到有效值。
	HpcClusterId *string `protobuf:"bytes,32,opt,name=hpc_cluster_id,json=hpcClusterId,proto3,oneof" json:"hpc_cluster_id,omitempty"`
	// 高性能计算集群`IP`列表。
	// 注意：此字段可能返回 null，表示取不到有效值。
	RdmaIpAddresses []string `protobuf:"bytes,33,rep,name=rdma_ip_addresses,json=rdmaIpAddresses,proto3" json:"rdma_ip_addresses,omitempty"`
	// 实例隔离类型。
	// 取值范围：
	//  ARREAR：表示欠费隔离
	//  EXPIRE：表示到期隔离
	//  MANMADE：表示主动退还隔离
	//  NOTISOLATED：表示未隔离
	// 注意：此字段可能返回 null，表示取不到有效值。
	IsolatedSource *string `protobuf:"bytes,34,opt,name=isolated_source,json=isolatedSource,proto3,oneof" json:"isolated_source,omitempty"`
	// GPU信息。如果是gpu类型子机，该值会返回GPU信息，如果是其他类型子机则不返回。
	// 注意：此字段可能返回 null，表示取不到有效值。
	GpuInfo *ListInstancesResponse_Instance_GPUInfo `protobuf:"bytes,35,opt,name=gpu_info,json=gpuInfo,proto3" json:"gpu_info,omitempty"`
}

func (x *ListInstancesResponse_Instance) Reset() {
	*x = ListInstancesResponse_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance) ProtoMessage() {}

func (x *ListInstancesResponse_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ListInstancesResponse_Instance) GetPlacement() *ListInstancesResponse_Instance_Placement {
	if x != nil {
		return x.Placement
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetInstanceId() string {
	if x != nil && x.InstanceId != nil {
		return *x.InstanceId
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetInstanceType() string {
	if x != nil && x.InstanceType != nil {
		return *x.InstanceType
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetCpu() int64 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *ListInstancesResponse_Instance) GetMemory() int64 {
	if x != nil && x.Memory != nil {
		return *x.Memory
	}
	return 0
}

func (x *ListInstancesResponse_Instance) GetRestrictState() string {
	if x != nil && x.RestrictState != nil {
		return *x.RestrictState
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetInstanceName() string {
	if x != nil && x.InstanceName != nil {
		return *x.InstanceName
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetInstanceChargeType() string {
	if x != nil && x.InstanceChargeType != nil {
		return *x.InstanceChargeType
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetSystemDisk() *SystemDisk {
	if x != nil {
		return x.SystemDisk
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetDataDisks() []*ListInstancesResponse_Instance_DataDisk {
	if x != nil {
		return x.DataDisks
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetPrivateIpAddresses() []string {
	if x != nil {
		return x.PrivateIpAddresses
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetPublicIpAddresses() []string {
	if x != nil {
		return x.PublicIpAddresses
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetInternetAccessible() *ListInstancesResponse_Instance_InternetAccessible {
	if x != nil {
		return x.InternetAccessible
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetVirtualPrivateCloud() *ListInstancesResponse_Instance_VirtualPrivateCloud {
	if x != nil {
		return x.VirtualPrivateCloud
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetImageId() string {
	if x != nil && x.ImageId != nil {
		return *x.ImageId
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetRenewFlag() string {
	if x != nil && x.RenewFlag != nil {
		return *x.RenewFlag
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetExpiredTime() string {
	if x != nil && x.ExpiredTime != nil {
		return *x.ExpiredTime
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetOsName() string {
	if x != nil && x.OsName != nil {
		return *x.OsName
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetLoginSettings() *ListInstancesResponse_Instance_LoginSettings {
	if x != nil {
		return x.LoginSettings
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetInstanceState() string {
	if x != nil && x.InstanceState != nil {
		return *x.InstanceState
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetTags() []*ListInstancesResponse_Instance_Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetStopChargingMode() string {
	if x != nil && x.StopChargingMode != nil {
		return *x.StopChargingMode
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetLatestOperation() string {
	if x != nil && x.LatestOperation != nil {
		return *x.LatestOperation
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetLatestOperationState() string {
	if x != nil && x.LatestOperationState != nil {
		return *x.LatestOperationState
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetLatestOperationRequestId() string {
	if x != nil && x.LatestOperationRequestId != nil {
		return *x.LatestOperationRequestId
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetDisasterRecoverGroupId() string {
	if x != nil && x.DisasterRecoverGroupId != nil {
		return *x.DisasterRecoverGroupId
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetIpv6Addresses() []string {
	if x != nil {
		return x.Ipv6Addresses
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetCamRoleName() string {
	if x != nil && x.CamRoleName != nil {
		return *x.CamRoleName
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetHpcClusterId() string {
	if x != nil && x.HpcClusterId != nil {
		return *x.HpcClusterId
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetRdmaIpAddresses() []string {
	if x != nil {
		return x.RdmaIpAddresses
	}
	return nil
}

func (x *ListInstancesResponse_Instance) GetIsolatedSource() string {
	if x != nil && x.IsolatedSource != nil {
		return *x.IsolatedSource
	}
	return ""
}

func (x *ListInstancesResponse_Instance) GetGpuInfo() *ListInstancesResponse_Instance_GPUInfo {
	if x != nil {
		return x.GpuInfo
	}
	return nil
}

type ListInstancesResponse_Instance_Placement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例所属的可用区ID。该参数可以通过调用  [DescribeZones](https://cloud.tencent.com/document/product/213/15707) 的返回值中的Zone字段来获取。
	Zone *string `protobuf:"bytes,1,opt,name=zone,proto3,oneof" json:"zone,omitempty"`
	// 实例所属项目ID。该参数可以通过调用 [DescribeProject](/document/api/378/4400) 的返回值中的 projectId 字段来获取。不填为默认项目。
	ProjectId *int64 `protobuf:"varint,2,opt,name=projectId,proto3,oneof" json:"projectId,omitempty"`
	// 实例所属的专用宿主机ID列表，仅用于入参。如果您有购买专用宿主机并且指定了该参数，则您购买的实例就会随机的部署在这些专用宿主机上。
	HostIds []string `protobuf:"bytes,3,rep,name=host_ids,json=hostIds,proto3" json:"host_ids,omitempty"`
	// 指定母机ip生产子机
	HostIps []string `protobuf:"bytes,4,rep,name=host_ips,json=hostIps,proto3" json:"host_ips,omitempty"`
	// 实例所属的专用宿主机ID，仅用于出参。
	HostId *string `protobuf:"bytes,5,opt,name=host_id,json=hostId,proto3,oneof" json:"host_id,omitempty"`
}

func (x *ListInstancesResponse_Instance_Placement) Reset() {
	*x = ListInstancesResponse_Instance_Placement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_Placement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_Placement) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_Placement) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_Placement.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_Placement) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *ListInstancesResponse_Instance_Placement) GetZone() string {
	if x != nil && x.Zone != nil {
		return *x.Zone
	}
	return ""
}

func (x *ListInstancesResponse_Instance_Placement) GetProjectId() int64 {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return 0
}

func (x *ListInstancesResponse_Instance_Placement) GetHostIds() []string {
	if x != nil {
		return x.HostIds
	}
	return nil
}

func (x *ListInstancesResponse_Instance_Placement) GetHostIps() []string {
	if x != nil {
		return x.HostIps
	}
	return nil
}

func (x *ListInstancesResponse_Instance_Placement) GetHostId() string {
	if x != nil && x.HostId != nil {
		return *x.HostId
	}
	return ""
}

type ListInstancesResponse_Instance_DataDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 数据盘大小，单位：GB。最小调整步长为10G，不同数据盘类型取值范围不同，具体限制详见：[存储概述](https://cloud.tencent.com/document/product/213/4952)。默认值为0，表示不购买数据盘。更多限制详见产品文档。
	DiskSize *int64 `protobuf:"varint,1,opt,name=disk_size,json=diskSize,proto3,oneof" json:"disk_size,omitempty"`
	// 数据盘类型。数据盘类型限制详见[存储概述](https://cloud.tencent.com/document/product/213/4952)。
	// 取值范围：
	//  LOCAL_BASIC：本地硬盘
	//  LOCAL_SSD：本地SSD硬盘
	//  LOCAL_NVME：本地NVME硬盘，与InstanceType强相关，不支持指定
	//  LOCAL_PRO：本地HDD硬盘，与InstanceType强相关，不支持指定
	//  CLOUD_BASIC：普通云硬盘
	//  CLOUD_PREMIUM：高性能云硬盘
	//  CLOUD_SSD：SSD云硬盘
	//  CLOUD_HSSD：增强型SSD云硬盘
	//  CLOUD_TSSD：极速型SSD云硬盘
	//  默认取值：LOCAL_BASIC。
	//  该参数对`ResizeInstanceDisk`接口无效。
	DiskType *string `protobuf:"bytes,2,opt,name=disk_type,json=diskType,proto3,oneof" json:"disk_type,omitempty"`
	// 云硬盘性能，单位：MB/s
	// 注意：此字段可能返回 0，表示取不到有效值。
	ThroughputPerformance *int64 `protobuf:"varint,3,opt,name=throughput_performance,json=throughputPerformance,proto3,oneof" json:"throughput_performance,omitempty"`
	// 所属的独享集群ID。
	// 注意：此字段可能返回 null，表示取不到有效值。
	CdcId *string `protobuf:"bytes,4,opt,name=cdc_id,json=cdcId,proto3,oneof" json:"cdc_id,omitempty"`
}

func (x *ListInstancesResponse_Instance_DataDisk) Reset() {
	*x = ListInstancesResponse_Instance_DataDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_DataDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_DataDisk) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_DataDisk) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_DataDisk.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_DataDisk) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{4, 0, 1}
}

func (x *ListInstancesResponse_Instance_DataDisk) GetDiskSize() int64 {
	if x != nil && x.DiskSize != nil {
		return *x.DiskSize
	}
	return 0
}

func (x *ListInstancesResponse_Instance_DataDisk) GetDiskType() string {
	if x != nil && x.DiskType != nil {
		return *x.DiskType
	}
	return ""
}

func (x *ListInstancesResponse_Instance_DataDisk) GetThroughputPerformance() int64 {
	if x != nil && x.ThroughputPerformance != nil {
		return *x.ThroughputPerformance
	}
	return 0
}

func (x *ListInstancesResponse_Instance_DataDisk) GetCdcId() string {
	if x != nil && x.CdcId != nil {
		return *x.CdcId
	}
	return ""
}

type ListInstancesResponse_Instance_InternetAccessible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 网络计费类型。
	// 取值范围：
	//  BANDWIDTH_PREPAID：预付费按带宽结算
	//  TRAFFIC_POSTPAID_BY_HOUR：流量按小时后付费
	//  BANDWIDTH_POSTPAID_BY_HOUR：带宽按小时后付费
	//  BANDWIDTH_PACKAGE：带宽包用户
	// 默认取值：非带宽包用户默认与子机付费类型保持一致。
	InternetChargeType *string `protobuf:"bytes,1,opt,name=internet_charge_type,json=internetChargeType,proto3,oneof" json:"internet_charge_type,omitempty"`
	// 公网出带宽上限，单位：Mbps。
	// 默认值：0Mbps。
	// 不同机型带宽上限范围不一致，具体限制详见[购买网络带宽](https://cloud.tencent.com/document/product/213/12523)。
	InternetMaxBandwidthOut *int64 `protobuf:"varint,2,opt,name=internet_max_bandwidth_out,json=internetMaxBandwidthOut,proto3,oneof" json:"internet_max_bandwidth_out,omitempty"`
}

func (x *ListInstancesResponse_Instance_InternetAccessible) Reset() {
	*x = ListInstancesResponse_Instance_InternetAccessible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_InternetAccessible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_InternetAccessible) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_InternetAccessible) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_InternetAccessible.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_InternetAccessible) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{4, 0, 2}
}

func (x *ListInstancesResponse_Instance_InternetAccessible) GetInternetChargeType() string {
	if x != nil && x.InternetChargeType != nil {
		return *x.InternetChargeType
	}
	return ""
}

func (x *ListInstancesResponse_Instance_InternetAccessible) GetInternetMaxBandwidthOut() int64 {
	if x != nil && x.InternetMaxBandwidthOut != nil {
		return *x.InternetMaxBandwidthOut
	}
	return 0
}

type ListInstancesResponse_Instance_VirtualPrivateCloud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 私有网络ID，形如`vpc-xxx`。有效的VpcId可通过登录[控制台](https://console.cloud.tencent.com/vpc/vpc?rid=1)查询；也可以调用接口 [DescribeVpcEx](/document/api/215/1372) ，从接口返回中的`unVpcId`字段获取。若在创建子机时VpcId与SubnetId同时传入`DEFAULT`，则强制使用默认vpc网络。
	VpcId *string `protobuf:"bytes,1,opt,name=vpc_id,json=vpcId,proto3,oneof" json:"vpc_id,omitempty"`
	// 私有网络子网ID，形如`subnet-xxx`。有效的私有网络子网ID可通过登录[控制台](https://console.cloud.tencent.com/vpc/subnet?rid=1)查询；也可以调用接口  [DescribeSubnets](/document/api/215/15784) ，从接口返回中的`unSubnetId`字段获取。若在创建子机时SubnetId与VpcId同时传入`DEFAULT`，则强制使用默认vpc网络。
	SubnetId *string `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3,oneof" json:"subnet_id,omitempty"`
	// 是否用作公网网关。
	// 公网网关只有在实例拥有公网IP以及处于私有网络下时才能正常使用。
	// 取值范围：
	//  TRUE：表示用作公网网关
	//  FALSE：表示不作为公网网关
	// 默认取值：FALSE。
	AsVpcGateway *bool `protobuf:"varint,3,opt,name=as_vpc_gateway,json=asVpcGateway,proto3,oneof" json:"as_vpc_gateway,omitempty"`
	// 私有网络子网 IP 数组，在创建实例、修改实例vpc属性操作中可使用此参数。当前仅批量创建多台实例时支持传入相同子网的多个 IP。
	PrivateIpAddresses []string `protobuf:"bytes,4,rep,name=private_ip_addresses,json=privateIpAddresses,proto3" json:"private_ip_addresses,omitempty"`
	// 为弹性网卡指定随机生成的 IPv6 地址数量。
	Ipv6AddressCount *uint64 `protobuf:"varint,7,opt,name=ipv6_address_count,json=ipv6AddressCount,proto3,oneof" json:"ipv6_address_count,omitempty"`
}

func (x *ListInstancesResponse_Instance_VirtualPrivateCloud) Reset() {
	*x = ListInstancesResponse_Instance_VirtualPrivateCloud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_VirtualPrivateCloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_VirtualPrivateCloud) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_VirtualPrivateCloud) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_VirtualPrivateCloud.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_VirtualPrivateCloud) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{4, 0, 3}
}

func (x *ListInstancesResponse_Instance_VirtualPrivateCloud) GetVpcId() string {
	if x != nil && x.VpcId != nil {
		return *x.VpcId
	}
	return ""
}

func (x *ListInstancesResponse_Instance_VirtualPrivateCloud) GetSubnetId() string {
	if x != nil && x.SubnetId != nil {
		return *x.SubnetId
	}
	return ""
}

func (x *ListInstancesResponse_Instance_VirtualPrivateCloud) GetAsVpcGateway() bool {
	if x != nil && x.AsVpcGateway != nil {
		return *x.AsVpcGateway
	}
	return false
}

func (x *ListInstancesResponse_Instance_VirtualPrivateCloud) GetPrivateIpAddresses() []string {
	if x != nil {
		return x.PrivateIpAddresses
	}
	return nil
}

func (x *ListInstancesResponse_Instance_VirtualPrivateCloud) GetIpv6AddressCount() uint64 {
	if x != nil && x.Ipv6AddressCount != nil {
		return *x.Ipv6AddressCount
	}
	return 0
}

type ListInstancesResponse_Instance_LoginSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例登录密码。
	// 不同操作系统类型密码复杂度限制不一样，具体如下：
	//  Linux实例密码必须8到30位，至少包括两项[a-z]，[A-Z]、[0-9] 和 [( ) \` ~ ! @ # $ % ^ & *  - + = | { } [ ] : ; ' , . ? / ]中的特殊符号。
	//  Windows实例密码必须12到30位，至少包括三项[a-z]，[A-Z]，[0-9] 和 [( ) \` ~ ! @ # $ % ^ & * - + = | { } [ ] : ; ' , . ? /]中的特殊符号。
	//  若不指定该参数，则由系统随机生成密码，并通过站内信方式通知到用户。
	// 注意：此字段可能返回 null，表示取不到有效值。
	Password *string `protobuf:"bytes,1,opt,name=password,proto3,oneof" json:"password,omitempty"`
	// 密钥ID列表。
	// 关联密钥后，就可以通过对应的私钥来访问实例；
	// KeyId可通过接口[DescribeKeyPairs](https://cloud.tencent.com/document/api/213/15699)获取，密钥与密码不能同时指定，同时Windows操作系统不支持指定密钥。当前仅支持购买的时候指定一个密钥。
	// 注意：此字段可能返回 null，表示取不到有效值。
	KeyIds []string `protobuf:"bytes,2,rep,name=key_ids,json=keyIds,proto3" json:"key_ids,omitempty"`
	// 保持镜像的原始设置。
	// 该参数与Password或KeyIds.N不能同时指定。
	// 只有使用自定义镜像、共享镜像或外部导入镜像创建实例时才能指定该参数为TRUE。
	// 取值范围：
	//  TRUE：表示保持镜像的登录设置
	//  FALSE：表示不保持镜像的登录设置
	// 默认取值：FALSE。
	// 注意：此字段可能返回 null，表示取不到有效值。
	KeepImageLogin *string `protobuf:"bytes,3,opt,name=keep_image_login,json=keepImageLogin,proto3,oneof" json:"keep_image_login,omitempty"`
}

func (x *ListInstancesResponse_Instance_LoginSettings) Reset() {
	*x = ListInstancesResponse_Instance_LoginSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_LoginSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_LoginSettings) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_LoginSettings) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_LoginSettings.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_LoginSettings) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{4, 0, 4}
}

func (x *ListInstancesResponse_Instance_LoginSettings) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *ListInstancesResponse_Instance_LoginSettings) GetKeyIds() []string {
	if x != nil {
		return x.KeyIds
	}
	return nil
}

func (x *ListInstancesResponse_Instance_LoginSettings) GetKeepImageLogin() string {
	if x != nil && x.KeepImageLogin != nil {
		return *x.KeepImageLogin
	}
	return ""
}

type ListInstancesResponse_Instance_Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 标签键
	Key *string `protobuf:"bytes,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	// 标签值
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *ListInstancesResponse_Instance_Tag) Reset() {
	*x = ListInstancesResponse_Instance_Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_Tag) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_Tag) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_Tag.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_Tag) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{4, 0, 5}
}

func (x *ListInstancesResponse_Instance_Tag) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ListInstancesResponse_Instance_Tag) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type ListInstancesResponse_Instance_GPUInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例GPU个数。值小于1代表VGPU类型，大于1代表GPU直通类型。
	// 注意：此字段可能返回 null，表示取不到有效值。
	GpuCount *float32 `protobuf:"fixed32,1,opt,name=gpu_count,json=gpuCount,proto3,oneof" json:"gpu_count,omitempty"`
	// 实例GPU地址。
	// 注意：此字段可能返回 null，表示取不到有效值。
	GpuId []string `protobuf:"bytes,2,rep,name=gpu_id,json=gpuId,proto3" json:"gpu_id,omitempty"`
	// 实例GPU类型。
	// 注意：此字段可能返回 null，表示取不到有效值。
	GpuType *string `protobuf:"bytes,3,opt,name=gpu_type,json=gpuType,proto3,oneof" json:"gpu_type,omitempty"`
}

func (x *ListInstancesResponse_Instance_GPUInfo) Reset() {
	*x = ListInstancesResponse_Instance_GPUInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstancesResponse_Instance_GPUInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstancesResponse_Instance_GPUInfo) ProtoMessage() {}

func (x *ListInstancesResponse_Instance_GPUInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstancesResponse_Instance_GPUInfo.ProtoReflect.Descriptor instead.
func (*ListInstancesResponse_Instance_GPUInfo) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{4, 0, 6}
}

func (x *ListInstancesResponse_Instance_GPUInfo) GetGpuCount() float32 {
	if x != nil && x.GpuCount != nil {
		return *x.GpuCount
	}
	return 0
}

func (x *ListInstancesResponse_Instance_GPUInfo) GetGpuId() []string {
	if x != nil {
		return x.GpuId
	}
	return nil
}

func (x *ListInstancesResponse_Instance_GPUInfo) GetGpuType() string {
	if x != nil && x.GpuType != nil {
		return *x.GpuType
	}
	return ""
}

type ListRegionsResponse_Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 地域名称，例如，ap-guangzhou
	Region *string `protobuf:"bytes,1,opt,name=region,proto3,oneof" json:"region,omitempty"`
	// 地域描述，例如，华南地区(广州)
	RegionName *string `protobuf:"bytes,2,opt,name=region_name,json=regionName,proto3,oneof" json:"region_name,omitempty"`
	// 地域是否可用状态
	RegionState *string `protobuf:"bytes,3,opt,name=region_state,json=regionState,proto3,oneof" json:"region_state,omitempty"`
}

func (x *ListRegionsResponse_Region) Reset() {
	*x = ListRegionsResponse_Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegionsResponse_Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionsResponse_Region) ProtoMessage() {}

func (x *ListRegionsResponse_Region) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionsResponse_Region.ProtoReflect.Descriptor instead.
func (*ListRegionsResponse_Region) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ListRegionsResponse_Region) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *ListRegionsResponse_Region) GetRegionName() string {
	if x != nil && x.RegionName != nil {
		return *x.RegionName
	}
	return ""
}

func (x *ListRegionsResponse_Region) GetRegionState() string {
	if x != nil && x.RegionState != nil {
		return *x.RegionState
	}
	return ""
}

// 镜像详细信息
type ListImagesResponse_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 镜像ID
	ImageId *string `protobuf:"bytes,1,opt,name=image_id,json=imageId,proto3,oneof" json:"image_id,omitempty"`
	// 镜像操作系统
	OsName *string `protobuf:"bytes,2,opt,name=os_name,json=osName,proto3,oneof" json:"os_name,omitempty"`
	// 镜像类型
	ImageType *string `protobuf:"bytes,3,opt,name=image_type,json=imageType,proto3,oneof" json:"image_type,omitempty"`
	// 镜像创建时间
	CreatedTime *string `protobuf:"bytes,4,opt,name=created_time,json=createdTime,proto3,oneof" json:"created_time,omitempty"`
	// 镜像名称
	ImageName *string `protobuf:"bytes,5,opt,name=image_name,json=imageName,proto3,oneof" json:"image_name,omitempty"`
	// 镜像描述
	ImageDescription *string `protobuf:"bytes,6,opt,name=image_description,json=imageDescription,proto3,oneof" json:"image_description,omitempty"`
	// 镜像大小
	ImageSize *int64 `protobuf:"varint,7,opt,name=image_size,json=imageSize,proto3,oneof" json:"image_size,omitempty"`
	// 镜像架构
	Architecture *string `protobuf:"bytes,8,opt,name=architecture,proto3,oneof" json:"architecture,omitempty"`
	// 镜像状态:
	// CREATING-创建中
	// NORMAL-正常
	// CREATEFAILED-创建失败
	// USING-使用中
	// SYNCING-同步中
	// IMPORTING-导入中
	// IMPORTFAILED-导入失败
	ImageState *string `protobuf:"bytes,9,opt,name=image_state,json=imageState,proto3,oneof" json:"image_state,omitempty"`
	// 镜像来源平台
	Platform *string `protobuf:"bytes,10,opt,name=platform,proto3,oneof" json:"platform,omitempty"`
	// 镜像创建者
	ImageCreator *string `protobuf:"bytes,11,opt,name=image_creator,json=imageCreator,proto3,oneof" json:"image_creator,omitempty"`
	// 镜像来源
	ImageSource *string `protobuf:"bytes,12,opt,name=image_source,json=imageSource,proto3,oneof" json:"image_source,omitempty"`
}

func (x *ListImagesResponse_Image) Reset() {
	*x = ListImagesResponse_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImagesResponse_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImagesResponse_Image) ProtoMessage() {}

func (x *ListImagesResponse_Image) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImagesResponse_Image.ProtoReflect.Descriptor instead.
func (*ListImagesResponse_Image) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ListImagesResponse_Image) GetImageId() string {
	if x != nil && x.ImageId != nil {
		return *x.ImageId
	}
	return ""
}

func (x *ListImagesResponse_Image) GetOsName() string {
	if x != nil && x.OsName != nil {
		return *x.OsName
	}
	return ""
}

func (x *ListImagesResponse_Image) GetImageType() string {
	if x != nil && x.ImageType != nil {
		return *x.ImageType
	}
	return ""
}

func (x *ListImagesResponse_Image) GetCreatedTime() string {
	if x != nil && x.CreatedTime != nil {
		return *x.CreatedTime
	}
	return ""
}

func (x *ListImagesResponse_Image) GetImageName() string {
	if x != nil && x.ImageName != nil {
		return *x.ImageName
	}
	return ""
}

func (x *ListImagesResponse_Image) GetImageDescription() string {
	if x != nil && x.ImageDescription != nil {
		return *x.ImageDescription
	}
	return ""
}

func (x *ListImagesResponse_Image) GetImageSize() int64 {
	if x != nil && x.ImageSize != nil {
		return *x.ImageSize
	}
	return 0
}

func (x *ListImagesResponse_Image) GetArchitecture() string {
	if x != nil && x.Architecture != nil {
		return *x.Architecture
	}
	return ""
}

func (x *ListImagesResponse_Image) GetImageState() string {
	if x != nil && x.ImageState != nil {
		return *x.ImageState
	}
	return ""
}

func (x *ListImagesResponse_Image) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *ListImagesResponse_Image) GetImageCreator() string {
	if x != nil && x.ImageCreator != nil {
		return *x.ImageCreator
	}
	return ""
}

func (x *ListImagesResponse_Image) GetImageSource() string {
	if x != nil && x.ImageSource != nil {
		return *x.ImageSource
	}
	return ""
}

type ListInstanceTypesResponse_InstanceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 可用区。
	Zone *string `protobuf:"bytes,1,opt,name=zone,proto3,oneof" json:"zone,omitempty"`
	// 实例机型。
	InstanceType *string `protobuf:"bytes,2,opt,name=instance_type,json=instanceType,proto3,oneof" json:"instance_type,omitempty"`
	// 实例机型系列。
	InstanceFamily *string `protobuf:"bytes,3,opt,name=instance_family,json=instanceFamily,proto3,oneof" json:"instance_family,omitempty"`
	// GPU核数，单位：核。
	Gpu *int64 `protobuf:"varint,4,opt,name=gpu,proto3,oneof" json:"gpu,omitempty"`
	// CPU核数，单位：核。
	Cpu *int64 `protobuf:"varint,5,opt,name=cpu,proto3,oneof" json:"cpu,omitempty"`
	// 内存容量，单位：`GB`。
	Memory *int64 `protobuf:"varint,6,opt,name=memory,proto3,oneof" json:"memory,omitempty"`
	// FPGA核数，单位：核。
	Fpga *int64 `protobuf:"varint,7,opt,name=fpga,proto3,oneof" json:"fpga,omitempty"`
}

func (x *ListInstanceTypesResponse_InstanceType) Reset() {
	*x = ListInstanceTypesResponse_InstanceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_instance_v1_instance_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypesResponse_InstanceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypesResponse_InstanceType) ProtoMessage() {}

func (x *ListInstanceTypesResponse_InstanceType) ProtoReflect() protoreflect.Message {
	mi := &file_api_instance_v1_instance_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypesResponse_InstanceType.ProtoReflect.Descriptor instead.
func (*ListInstanceTypesResponse_InstanceType) Descriptor() ([]byte, []int) {
	return file_api_instance_v1_instance_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ListInstanceTypesResponse_InstanceType) GetZone() string {
	if x != nil && x.Zone != nil {
		return *x.Zone
	}
	return ""
}

func (x *ListInstanceTypesResponse_InstanceType) GetInstanceType() string {
	if x != nil && x.InstanceType != nil {
		return *x.InstanceType
	}
	return ""
}

func (x *ListInstanceTypesResponse_InstanceType) GetInstanceFamily() string {
	if x != nil && x.InstanceFamily != nil {
		return *x.InstanceFamily
	}
	return ""
}

func (x *ListInstanceTypesResponse_InstanceType) GetGpu() int64 {
	if x != nil && x.Gpu != nil {
		return *x.Gpu
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetCpu() int64 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetMemory() int64 {
	if x != nil && x.Memory != nil {
		return *x.Memory
	}
	return 0
}

func (x *ListInstanceTypesResponse_InstanceType) GetFpga() int64 {
	if x != nil && x.Fpga != nil {
		return *x.Fpga
	}
	return 0
}

var File_api_instance_v1_instance_proto protoreflect.FileDescriptor

var file_api_instance_v1_instance_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x04, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52,
	0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x35, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09,
	0xfa, 0x42, 0x06, 0x22, 0x04, 0x18, 0x64, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e,
	0x22, 0x76, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x53, 0x65, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x1f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x0a, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06,
	0x63, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05,
	0x63, 0x64, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x22,
	0xe5, 0x1d, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x1a, 0x93, 0x1c, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x03, 0x63, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12,
	0x1b, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x0a, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x57, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x73, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x77, 0x0a, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x13, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x12, 0x1e, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x46, 0x6c, 0x61,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73,
	0x12, 0x64, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c,
	0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0f, 0x52, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x41, 0x0a, 0x1a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x18, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0d,
	0x63, 0x61, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x52, 0x6f, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x68, 0x70, 0x63, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52,
	0x0c, 0x68, 0x70, 0x63, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x64, 0x6d, 0x61, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x64, 0x6d,
	0x61, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0f,
	0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0e, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x08, 0x67, 0x70,
	0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x50,
	0x55, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x67, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xbe,
	0x01, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x73, 0x12, 0x1c,
	0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x1a,
	0xe8, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x20, 0x0a, 0x09,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x16, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x15, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06,
	0x63, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05,
	0x63, 0x64, 0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x63, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x1a, 0xc5, 0x01, 0x0a, 0x12, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x35, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x1a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x17,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6f,
	0x75, 0x74, 0x1a, 0xa6, 0x02, 0x0a, 0x13, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x70,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x73, 0x5f, 0x76,
	0x70, 0x63, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x0c, 0x61, 0x73, 0x56, 0x70, 0x63, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x03, 0x52, 0x10, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x70, 0x63,
	0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x9a, 0x01, 0x0a, 0x0d,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x07, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x6b, 0x65, 0x65, 0x70, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x49, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12,
	0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x7d, 0x0a, 0x07, 0x47, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20,
	0x0a, 0x09, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x08, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x06, 0x67, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x70, 0x75, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x67, 0x70, 0x75,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x67, 0x70, 0x75, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x70, 0x75, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x61, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x68, 0x70, 0x63, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xe7, 0x02, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x1a, 0x9f, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x32, 0x04, 0x18, 0x64, 0x20,
	0x00, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0xce, 0x06, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x8b, 0x05, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22,
	0xe7, 0x03, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x1a, 0xb6, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x03, 0x52, 0x03, 0x67, 0x70, 0x75, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x70,
	0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x03, 0x63, 0x70, 0x75, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x05, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x66, 0x70, 0x67, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x04,
	0x66, 0x70, 0x67, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x7a, 0x6f, 0x6e, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x70, 0x75, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x63, 0x70, 0x75, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x70, 0x67, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x22, 0x91, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a,
	0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12,
	0x20, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x4c, 0x0a, 0x17, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xaa, 0x01,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x4c, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x83, 0x09, 0x0a, 0x08, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x1a, 0x14, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a, 0x0d, 0x53, 0x74, 0x6f,
	0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x1a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x1a, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x1a, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x2f,
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x50, 0x01, 0x5a, 0x1a, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_instance_v1_instance_proto_rawDescOnce sync.Once
	file_api_instance_v1_instance_proto_rawDescData = file_api_instance_v1_instance_proto_rawDesc
)

func file_api_instance_v1_instance_proto_rawDescGZIP() []byte {
	file_api_instance_v1_instance_proto_rawDescOnce.Do(func() {
		file_api_instance_v1_instance_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_instance_v1_instance_proto_rawDescData)
	})
	return file_api_instance_v1_instance_proto_rawDescData
}

var file_api_instance_v1_instance_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_api_instance_v1_instance_proto_goTypes = []interface{}{
	(*CreateInstancesRequest)(nil),                             // 0: api.instance.v1.CreateInstancesRequest
	(*CreateInstancesResponse)(nil),                            // 1: api.instance.v1.CreateInstancesResponse
	(*ListInstancesRequest)(nil),                               // 2: api.instance.v1.ListInstancesRequest
	(*SystemDisk)(nil),                                         // 3: api.instance.v1.SystemDisk
	(*ListInstancesResponse)(nil),                              // 4: api.instance.v1.ListInstancesResponse
	(*ListRegionsRequest)(nil),                                 // 5: api.instance.v1.ListRegionsRequest
	(*ListRegionsResponse)(nil),                                // 6: api.instance.v1.ListRegionsResponse
	(*ListImagesRequest)(nil),                                  // 7: api.instance.v1.ListImagesRequest
	(*ListImagesResponse)(nil),                                 // 8: api.instance.v1.ListImagesResponse
	(*ListInstanceTypesRequest)(nil),                           // 9: api.instance.v1.ListInstanceTypesRequest
	(*ListInstanceTypesResponse)(nil),                          // 10: api.instance.v1.ListInstanceTypesResponse
	(*StartInstancesRequest)(nil),                              // 11: api.instance.v1.StartInstancesRequest
	(*StartInstancesResponse)(nil),                             // 12: api.instance.v1.StartInstancesResponse
	(*StopInstancesRequest)(nil),                               // 13: api.instance.v1.StopInstancesRequest
	(*StopInstancesResponse)(nil),                              // 14: api.instance.v1.StopInstancesResponse
	(*RebootInstancesRequest)(nil),                             // 15: api.instance.v1.RebootInstancesRequest
	(*RebootInstancesResponse)(nil),                            // 16: api.instance.v1.RebootInstancesResponse
	(*DeleteInstancesRequest)(nil),                             // 17: api.instance.v1.DeleteInstancesRequest
	(*DeleteInstancesResponse)(nil),                            // 18: api.instance.v1.DeleteInstancesResponse
	(*ListInstancesResponse_Instance)(nil),                     // 19: api.instance.v1.ListInstancesResponse.Instance
	(*ListInstancesResponse_Instance_Placement)(nil),           // 20: api.instance.v1.ListInstancesResponse.Instance.Placement
	(*ListInstancesResponse_Instance_DataDisk)(nil),            // 21: api.instance.v1.ListInstancesResponse.Instance.DataDisk
	(*ListInstancesResponse_Instance_InternetAccessible)(nil),  // 22: api.instance.v1.ListInstancesResponse.Instance.InternetAccessible
	(*ListInstancesResponse_Instance_VirtualPrivateCloud)(nil), // 23: api.instance.v1.ListInstancesResponse.Instance.VirtualPrivateCloud
	(*ListInstancesResponse_Instance_LoginSettings)(nil),       // 24: api.instance.v1.ListInstancesResponse.Instance.LoginSettings
	(*ListInstancesResponse_Instance_Tag)(nil),                 // 25: api.instance.v1.ListInstancesResponse.Instance.Tag
	(*ListInstancesResponse_Instance_GPUInfo)(nil),             // 26: api.instance.v1.ListInstancesResponse.Instance.GPUInfo
	(*ListRegionsResponse_Region)(nil),                         // 27: api.instance.v1.ListRegionsResponse.Region
	(*ListImagesResponse_Image)(nil),                           // 28: api.instance.v1.ListImagesResponse.Image
	(*ListInstanceTypesResponse_InstanceType)(nil),             // 29: api.instance.v1.ListInstanceTypesResponse.InstanceType
}
var file_api_instance_v1_instance_proto_depIdxs = []int32{
	3,  // 0: api.instance.v1.CreateInstancesRequest.system_disk:type_name -> api.instance.v1.SystemDisk
	19, // 1: api.instance.v1.ListInstancesResponse.instances:type_name -> api.instance.v1.ListInstancesResponse.Instance
	27, // 2: api.instance.v1.ListRegionsResponse.regions:type_name -> api.instance.v1.ListRegionsResponse.Region
	28, // 3: api.instance.v1.ListImagesResponse.images:type_name -> api.instance.v1.ListImagesResponse.Image
	29, // 4: api.instance.v1.ListInstanceTypesResponse.instance_types:type_name -> api.instance.v1.ListInstanceTypesResponse.InstanceType
	20, // 5: api.instance.v1.ListInstancesResponse.Instance.placement:type_name -> api.instance.v1.ListInstancesResponse.Instance.Placement
	3,  // 6: api.instance.v1.ListInstancesResponse.Instance.system_disk:type_name -> api.instance.v1.SystemDisk
	21, // 7: api.instance.v1.ListInstancesResponse.Instance.data_disks:type_name -> api.instance.v1.ListInstancesResponse.Instance.DataDisk
	22, // 8: api.instance.v1.ListInstancesResponse.Instance.internet_accessible:type_name -> api.instance.v1.ListInstancesResponse.Instance.InternetAccessible
	23, // 9: api.instance.v1.ListInstancesResponse.Instance.virtual_private_cloud:type_name -> api.instance.v1.ListInstancesResponse.Instance.VirtualPrivateCloud
	24, // 10: api.instance.v1.ListInstancesResponse.Instance.login_settings:type_name -> api.instance.v1.ListInstancesResponse.Instance.LoginSettings
	25, // 11: api.instance.v1.ListInstancesResponse.Instance.tags:type_name -> api.instance.v1.ListInstancesResponse.Instance.Tag
	26, // 12: api.instance.v1.ListInstancesResponse.Instance.gpu_info:type_name -> api.instance.v1.ListInstancesResponse.Instance.GPUInfo
	5,  // 13: api.instance.v1.Instance.ListRegions:input_type -> api.instance.v1.ListRegionsRequest
	7,  // 14: api.instance.v1.Instance.ListImages:input_type -> api.instance.v1.ListImagesRequest
	9,  // 15: api.instance.v1.Instance.ListInstanceTypes:input_type -> api.instance.v1.ListInstanceTypesRequest
	0,  // 16: api.instance.v1.Instance.CreateInstances:input_type -> api.instance.v1.CreateInstancesRequest
	2,  // 17: api.instance.v1.Instance.ListInstances:input_type -> api.instance.v1.ListInstancesRequest
	11, // 18: api.instance.v1.Instance.StartInstances:input_type -> api.instance.v1.StartInstancesRequest
	13, // 19: api.instance.v1.Instance.StopInstances:input_type -> api.instance.v1.StopInstancesRequest
	15, // 20: api.instance.v1.Instance.RebootInstances:input_type -> api.instance.v1.RebootInstancesRequest
	17, // 21: api.instance.v1.Instance.DeleteInstances:input_type -> api.instance.v1.DeleteInstancesRequest
	6,  // 22: api.instance.v1.Instance.ListRegions:output_type -> api.instance.v1.ListRegionsResponse
	8,  // 23: api.instance.v1.Instance.ListImages:output_type -> api.instance.v1.ListImagesResponse
	10, // 24: api.instance.v1.Instance.ListInstanceTypes:output_type -> api.instance.v1.ListInstanceTypesResponse
	1,  // 25: api.instance.v1.Instance.CreateInstances:output_type -> api.instance.v1.CreateInstancesResponse
	4,  // 26: api.instance.v1.Instance.ListInstances:output_type -> api.instance.v1.ListInstancesResponse
	12, // 27: api.instance.v1.Instance.StartInstances:output_type -> api.instance.v1.StartInstancesResponse
	14, // 28: api.instance.v1.Instance.StopInstances:output_type -> api.instance.v1.StopInstancesResponse
	16, // 29: api.instance.v1.Instance.RebootInstances:output_type -> api.instance.v1.RebootInstancesResponse
	18, // 30: api.instance.v1.Instance.DeleteInstances:output_type -> api.instance.v1.DeleteInstancesResponse
	22, // [22:31] is the sub-list for method output_type
	13, // [13:22] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_api_instance_v1_instance_proto_init() }
func file_api_instance_v1_instance_proto_init() {
	if File_api_instance_v1_instance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_instance_v1_instance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstancesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_Placement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_DataDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_InternetAccessible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_VirtualPrivateCloud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_LoginSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstancesResponse_Instance_GPUInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegionsResponse_Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImagesResponse_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_instance_v1_instance_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypesResponse_InstanceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_instance_v1_instance_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[26].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_api_instance_v1_instance_proto_msgTypes[29].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_instance_v1_instance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_instance_v1_instance_proto_goTypes,
		DependencyIndexes: file_api_instance_v1_instance_proto_depIdxs,
		MessageInfos:      file_api_instance_v1_instance_proto_msgTypes,
	}.Build()
	File_api_instance_v1_instance_proto = out.File
	file_api_instance_v1_instance_proto_rawDesc = nil
	file_api_instance_v1_instance_proto_goTypes = nil
	file_api_instance_v1_instance_proto_depIdxs = nil
}
