syntax = "proto3";

package api.instance.v1;

option go_package = "tencent/api/instance/v1;v1";
option java_multiple_files = true;
option java_package = "api.instance.v1";

service Instance {
  // 可使用的地域
  rpc ListRegion (ListRegionRequest) returns (ListRegionResponse);
  // 选择镜像
  rpc ListImage (ListImageRequest) returns (ListImageResponse);
  // 选择实例规格
  rpc ListInstanceType(ListInstanceTypeRequest) returns (ListInstanceTypeResponse);
  // 创建实例
  rpc CreateInstance (CreateInstanceRequest) returns (CreateInstanceResponse);
  // 实例列表
  rpc ListInstance (ListInstanceRequest) returns (ListInstanceResponse);
  // 开机
  rpc StartInstance(StartInstanceRequest) returns (StartInstanceResponse);
  // 关机
  rpc StopInstance(StopInstanceRequest) returns (StopInstanceResponse);
  // 重启
  rpc RebootInstance(RebootInstanceRequest) returns (RebootInstanceResponse);
  // 删除实例
  rpc DeleteInstance(DeleteInstanceRequest) returns (DeleteInstanceResponse);
}

message CreateInstanceRequest {
  string secret_id = 1;
  string secret_key = 2;
  string region = 3;
  // 区域id
  string region_id = 4;
  // 镜像id
  string image_id = 5;
  // 实例名称
  string name = 6;
  // 实例规格
  string instance_type = 7;
  // 系统盘大小，单位GB
  string system_disk_size = 8;
  // 是否为instance_name自动添加有序后缀（默认false）
  bool unique_suffix = 9;
  // 创建数量(1-100，默认1)
  uint32 amount = 10;
  // 实例密码
  string password = 11;
}

message CreateInstanceResponse {
  // 请求id
  string request_id = 1;
  // 订单id，该参数只有创建包年包月ECS实例（请求参数InstanceChargeType=PrePaid）时有返回值
  string order_id = 2;
  // 订单成交价
  float trade_price = 3;
  // 实例id列表
  repeated string instance_id_sets = 4;
}

message ListInstanceRequest {
  string secret_id = 1;
  string secret_key = 2;
  string region = 3;
  // 实例状态列表的页码，起始值1，默认值1
  uint32 page_number = 5;
  // 分页查询时设置的每页行数
  uint32 page_size = 6;
}

message ListInstanceResponse {
  string request_id = 1;
  // 查询到的实例总数
  uint32 total_count = 2;
  message Instance {
    // 实例ID
    string instance_id = 1;
    // 实例名称
    string instance_name = 2;
    // 实例规格
    string instance_type = 3;
    // 实例的计费方式
    string instance_charge_type = 4;
    // vCPU数
    uint32 cpu = 5;
    // 实例操作系统的英文名称
    string os_name = 6;
    // 实例状态
    string status = 7;
    // 实例创建时间，UTC+0时间
    string created_time = 8;
    // 内存大小，单位为MiB
    uint32 memory = 9;
    // 实例GPU信息
    message GpuInfo {
      float gpu_count = 1;
      repeated string gpu_id = 2;
      string gpu_type = 3;
    }
    GpuInfo gpu_info = 10;
    // 过期时间
    string expired_time = 11;
    // 系统盘信息
    message SystemDisk {
      // 系统盘类型
      string disk_type =1;
      // 系统盘ID
      string disk_id = 2;
      // 系统盘大小，单位：GB
      uint32 disk_size = 3;
      // 所属的独享集群ID
      string cd_cid = 4;
    }
    SystemDisk system_disk = 12;
    // 数据盘信息
    message DataDisk {
      // 	数据盘大小，单位：GB
      uint32 disk_size = 1;
      // 数据盘类型
      string disk_type = 2;
      // 数据盘ID
      string disk_id = 3;
      // 所属的独享集群ID
      string cd_cid = 4;
    }
    repeated DataDisk data_disk = 13;
    // 实例主网卡的内网IP列表
    repeated string private_ip_addresses = 14;
    // 实例主网卡的公网IP列表
    repeated string public_ip_addresses = 15;
    // 实例带宽信息
    message InternetAccessible {
      // 网络计费类型
      string internet_charge_type = 1;
      // 公网出带宽上限
      uint32 internet_max_bandwidth_out = 2;
      // 是否分配公网IP
      bool public_ip_assigned = 3;
      // 带宽包ID
      string bandwidth_package_id = 4;
    }
    InternetAccessible internetAccessible = 16;
    // 实例所属虚拟私有网络信息
    message VirtualPrivateCloud {
      // 私有网络ID
      string vpc_id = 1;
      // 私有网络子网ID
      string subnet_id = 2;
      // 是否用作公网网关
      bool as_vpc_gateway = 3;
      // 私有网络子网 IP 数组
      repeated string private_ip_addresses = 4;
      // 为弹性网卡指定随机生成的 IPv6 地址数量
      uint32 ipv6_address_count = 5;
    }
    VirtualPrivateCloud virtualPrivateCloud = 17;
    // 实例运行的镜像ID
    string image_id = 18;
  }
  // 实例信息
  repeated Instance instances = 3;
}

message ListRegionRequest {
  string secret_id = 1;
  string secret_key = 2;
}

message ListRegionResponse {
  message Region {
    string region = 1;
    string region_name = 2;
    string region_state = 3;
  }
  repeated Region regions = 1;
}

message ListImageRequest {
  string secret_id = 1;
  string secret_key = 2;
  string region = 3;
  // 实例状态列表的页码，起始值1，默认值1
  uint32 page_number = 4;
  // 分页查询时设置的每页行数
  uint32 page_size = 5;
}

message ListImageResponse {
  message Image {
    string image_id = 1;
    string image_name = 2;
    string image_description = 3;
    string os_name = 4;
    string architecture = 5;
    string platform = 6;
  }
  repeated Image images = 1;
  int32 total_count = 2;
  string request_id = 3;
}

message ListInstanceTypeRequest {
  string secret_id = 1;
  string secret_key = 2;
  string region = 3;
}

message ListInstanceTypeResponse {
  message InstanceType {
    string instance_type_id = 1;
    string instance_type_family = 2;
    float memory_size = 3;
    int32 cpu_core_count = 4;
    string gpu_sec = 5;
  }
  repeated InstanceType instance_types = 1;
}

message StartInstanceRequest {
  string secret_id = 1;
  string secret_key = 2;
  string region = 3;
  repeated string instance_ids = 4;
}

message StartInstanceResponse {
  // 请求ID
  string request_id = 1;
}

message StopInstanceRequest {
  string secret_id = 1;
  string secret_key = 2;
  string region = 3;
  repeated string instance_ids = 4;
}

message StopInstanceResponse {
  string request_id = 1;
}

message RebootInstanceRequest {
  string secret_id = 1;
  string secret_key = 2;
  string region = 3;
  repeated string instance_id = 4;
}

message RebootInstanceResponse {
  string request_id = 1;
}

message DeleteInstanceRequest {
  string secret_id = 1;
  string secret_key = 2;
  string region = 3;
  repeated string instance_id = 4;
}

message DeleteInstanceResponse {
  string request_id = 1;
}