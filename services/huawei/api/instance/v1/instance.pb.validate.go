// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/instance/v1/instance.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstancesRequestMultiError, or nil if none found.
func (m *CreateInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := CreateInstancesRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := CreateInstancesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := CreateInstancesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := CreateInstancesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetImageId()) < 1 {
		err := CreateInstancesRequestValidationError{
			field:  "ImageId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for InstanceType

	// no validation rules for VpcId

	for idx, item := range m.GetNics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateInstancesRequestValidationError{
						field:  fmt.Sprintf("Nics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateInstancesRequestValidationError{
						field:  fmt.Sprintf("Nics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateInstancesRequestValidationError{
					field:  fmt.Sprintf("Nics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRootVolume()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInstancesRequestValidationError{
					field:  "RootVolume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInstancesRequestValidationError{
					field:  "RootVolume",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRootVolume()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstancesRequestValidationError{
				field:  "RootVolume",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Count != nil {
		// no validation rules for Count
	}

	if m.Password != nil {
		// no validation rules for Password
	}

	if m.DryRun != nil {
		// no validation rules for DryRun
	}

	if len(errors) > 0 {
		return CreateInstancesRequestMultiError(errors)
	}

	return nil
}

// CreateInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by CreateInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstancesRequestMultiError) AllErrors() []error { return m }

// CreateInstancesRequestValidationError is the validation error returned by
// CreateInstancesRequest.Validate if the designated constraints aren't met.
type CreateInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstancesRequestValidationError) ErrorName() string {
	return "CreateInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstancesRequestValidationError{}

// Validate checks the field values on CreateInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstancesResponseMultiError, or nil if none found.
func (m *CreateInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateInstancesResponseMultiError(errors)
	}

	return nil
}

// CreateInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by CreateInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstancesResponseMultiError) AllErrors() []error { return m }

// CreateInstancesResponseValidationError is the validation error returned by
// CreateInstancesResponse.Validate if the designated constraints aren't met.
type CreateInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstancesResponseValidationError) ErrorName() string {
	return "CreateInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstancesResponseValidationError{}

// Validate checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesRequestMultiError, or nil if none found.
func (m *ListInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := ListInstancesRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := ListInstancesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := ListInstancesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := ListInstancesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if m.Offset != nil {
		// no validation rules for Offset
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListInstancesRequestMultiError(errors)
	}

	return nil
}

// ListInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by ListInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesRequestMultiError) AllErrors() []error { return m }

// ListInstancesRequestValidationError is the validation error returned by
// ListInstancesRequest.Validate if the designated constraints aren't met.
type ListInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesRequestValidationError) ErrorName() string {
	return "ListInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesRequestValidationError{}

// Validate checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesResponseMultiError, or nil if none found.
func (m *ListInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListInstancesResponseMultiError(errors)
	}

	return nil
}

// ListInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by ListInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponseMultiError) AllErrors() []error { return m }

// ListInstancesResponseValidationError is the validation error returned by
// ListInstancesResponse.Validate if the designated constraints aren't met.
type ListInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponseValidationError) ErrorName() string {
	return "ListInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponseValidationError{}

// Validate checks the field values on ListRegionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegionsRequestMultiError, or nil if none found.
func (m *ListRegionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RegionType

	if len(errors) > 0 {
		return ListRegionsRequestMultiError(errors)
	}

	return nil
}

// ListRegionsRequestMultiError is an error wrapping multiple validation errors
// returned by ListRegionsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRegionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegionsRequestMultiError) AllErrors() []error { return m }

// ListRegionsRequestValidationError is the validation error returned by
// ListRegionsRequest.Validate if the designated constraints aren't met.
type ListRegionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsRequestValidationError) ErrorName() string {
	return "ListRegionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsRequestValidationError{}

// Validate checks the field values on ListRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegionsResponseMultiError, or nil if none found.
func (m *ListRegionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRegionsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRegionsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRegionsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRegionsResponseMultiError(errors)
	}

	return nil
}

// ListRegionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListRegionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRegionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegionsResponseMultiError) AllErrors() []error { return m }

// ListRegionsResponseValidationError is the validation error returned by
// ListRegionsResponse.Validate if the designated constraints aren't met.
type ListRegionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsResponseValidationError) ErrorName() string {
	return "ListRegionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsResponseValidationError{}

// Validate checks the field values on ListImagesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListImagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImagesRequestMultiError, or nil if none found.
func (m *ListImagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := ListImagesRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := ListImagesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := ListImagesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Limit != nil {
		// no validation rules for Limit
	}

	if m.Marker != nil {
		// no validation rules for Marker
	}

	if len(errors) > 0 {
		return ListImagesRequestMultiError(errors)
	}

	return nil
}

// ListImagesRequestMultiError is an error wrapping multiple validation errors
// returned by ListImagesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListImagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImagesRequestMultiError) AllErrors() []error { return m }

// ListImagesRequestValidationError is the validation error returned by
// ListImagesRequest.Validate if the designated constraints aren't met.
type ListImagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImagesRequestValidationError) ErrorName() string {
	return "ListImagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListImagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImagesRequestValidationError{}

// Validate checks the field values on ListImagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListImagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImagesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImagesResponseMultiError, or nil if none found.
func (m *ListImagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListImagesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListImagesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListImagesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListImagesResponseMultiError(errors)
	}

	return nil
}

// ListImagesResponseMultiError is an error wrapping multiple validation errors
// returned by ListImagesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListImagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImagesResponseMultiError) AllErrors() []error { return m }

// ListImagesResponseValidationError is the validation error returned by
// ListImagesResponse.Validate if the designated constraints aren't met.
type ListImagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImagesResponseValidationError) ErrorName() string {
	return "ListImagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListImagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImagesResponseValidationError{}

// Validate checks the field values on ListInstanceTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstanceTypesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstanceTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstanceTypesRequestMultiError, or nil if none found.
func (m *ListInstanceTypesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstanceTypesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := ListInstanceTypesRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := ListInstanceTypesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := ListInstanceTypesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := ListInstanceTypesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListInstanceTypesRequestMultiError(errors)
	}

	return nil
}

// ListInstanceTypesRequestMultiError is an error wrapping multiple validation
// errors returned by ListInstanceTypesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInstanceTypesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstanceTypesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstanceTypesRequestMultiError) AllErrors() []error { return m }

// ListInstanceTypesRequestValidationError is the validation error returned by
// ListInstanceTypesRequest.Validate if the designated constraints aren't met.
type ListInstanceTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstanceTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstanceTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstanceTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstanceTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstanceTypesRequestValidationError) ErrorName() string {
	return "ListInstanceTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstanceTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstanceTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstanceTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstanceTypesRequestValidationError{}

// Validate checks the field values on ListInstanceTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstanceTypesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstanceTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstanceTypesResponseMultiError, or nil if none found.
func (m *ListInstanceTypesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstanceTypesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInstanceTypesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInstanceTypesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstanceTypesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListInstanceTypesResponseMultiError(errors)
	}

	return nil
}

// ListInstanceTypesResponseMultiError is an error wrapping multiple validation
// errors returned by ListInstanceTypesResponse.ValidateAll() if the
// designated constraints aren't met.
type ListInstanceTypesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstanceTypesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstanceTypesResponseMultiError) AllErrors() []error { return m }

// ListInstanceTypesResponseValidationError is the validation error returned by
// ListInstanceTypesResponse.Validate if the designated constraints aren't met.
type ListInstanceTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstanceTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstanceTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstanceTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstanceTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstanceTypesResponseValidationError) ErrorName() string {
	return "ListInstanceTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstanceTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstanceTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstanceTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstanceTypesResponseValidationError{}

// Validate checks the field values on StartInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartInstancesRequestMultiError, or nil if none found.
func (m *StartInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := StartInstancesRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := StartInstancesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := StartInstancesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := StartInstancesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StartInstancesRequestValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StartInstancesRequestValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StartInstancesRequestValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StartInstancesRequestMultiError(errors)
	}

	return nil
}

// StartInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by StartInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type StartInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartInstancesRequestMultiError) AllErrors() []error { return m }

// StartInstancesRequestValidationError is the validation error returned by
// StartInstancesRequest.Validate if the designated constraints aren't met.
type StartInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartInstancesRequestValidationError) ErrorName() string {
	return "StartInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartInstancesRequestValidationError{}

// Validate checks the field values on StartInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartInstancesResponseMultiError, or nil if none found.
func (m *StartInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartInstancesResponseMultiError(errors)
	}

	return nil
}

// StartInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by StartInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type StartInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartInstancesResponseMultiError) AllErrors() []error { return m }

// StartInstancesResponseValidationError is the validation error returned by
// StartInstancesResponse.Validate if the designated constraints aren't met.
type StartInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartInstancesResponseValidationError) ErrorName() string {
	return "StartInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartInstancesResponseValidationError{}

// Validate checks the field values on StopInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopInstancesRequestMultiError, or nil if none found.
func (m *StopInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := StopInstancesRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := StopInstancesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := StopInstancesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := StopInstancesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StopInstancesRequestValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StopInstancesRequestValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StopInstancesRequestValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for StopType

	if len(errors) > 0 {
		return StopInstancesRequestMultiError(errors)
	}

	return nil
}

// StopInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by StopInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type StopInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopInstancesRequestMultiError) AllErrors() []error { return m }

// StopInstancesRequestValidationError is the validation error returned by
// StopInstancesRequest.Validate if the designated constraints aren't met.
type StopInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopInstancesRequestValidationError) ErrorName() string {
	return "StopInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopInstancesRequestValidationError{}

// Validate checks the field values on StopInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StopInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopInstancesResponseMultiError, or nil if none found.
func (m *StopInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StopInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StopInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StopInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StopInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StopInstancesResponseMultiError(errors)
	}

	return nil
}

// StopInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by StopInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type StopInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopInstancesResponseMultiError) AllErrors() []error { return m }

// StopInstancesResponseValidationError is the validation error returned by
// StopInstancesResponse.Validate if the designated constraints aren't met.
type StopInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopInstancesResponseValidationError) ErrorName() string {
	return "StopInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StopInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopInstancesResponseValidationError{}

// Validate checks the field values on RebootInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RebootInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RebootInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RebootInstancesRequestMultiError, or nil if none found.
func (m *RebootInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RebootInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := RebootInstancesRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := RebootInstancesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := RebootInstancesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := RebootInstancesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RebootInstancesRequestValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RebootInstancesRequestValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RebootInstancesRequestValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RestartType

	if len(errors) > 0 {
		return RebootInstancesRequestMultiError(errors)
	}

	return nil
}

// RebootInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by RebootInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type RebootInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootInstancesRequestMultiError) AllErrors() []error { return m }

// RebootInstancesRequestValidationError is the validation error returned by
// RebootInstancesRequest.Validate if the designated constraints aren't met.
type RebootInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootInstancesRequestValidationError) ErrorName() string {
	return "RebootInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RebootInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRebootInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootInstancesRequestValidationError{}

// Validate checks the field values on RebootInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RebootInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RebootInstancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RebootInstancesResponseMultiError, or nil if none found.
func (m *RebootInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RebootInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RebootInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RebootInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RebootInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RebootInstancesResponseMultiError(errors)
	}

	return nil
}

// RebootInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by RebootInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type RebootInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RebootInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RebootInstancesResponseMultiError) AllErrors() []error { return m }

// RebootInstancesResponseValidationError is the validation error returned by
// RebootInstancesResponse.Validate if the designated constraints aren't met.
type RebootInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RebootInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RebootInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RebootInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RebootInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RebootInstancesResponseValidationError) ErrorName() string {
	return "RebootInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RebootInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRebootInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RebootInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RebootInstancesResponseValidationError{}

// Validate checks the field values on ServerId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerIdMultiError, or nil
// if none found.
func (m *ServerId) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ServerIdMultiError(errors)
	}

	return nil
}

// ServerIdMultiError is an error wrapping multiple validation errors returned
// by ServerId.ValidateAll() if the designated constraints aren't met.
type ServerIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerIdMultiError) AllErrors() []error { return m }

// ServerIdValidationError is the validation error returned by
// ServerId.Validate if the designated constraints aren't met.
type ServerIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerIdValidationError) ErrorName() string { return "ServerIdValidationError" }

// Error satisfies the builtin error interface
func (e ServerIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerIdValidationError{}

// Validate checks the field values on DeleteInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInstancesRequestMultiError, or nil if none found.
func (m *DeleteInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := DeleteInstancesRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := DeleteInstancesRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := DeleteInstancesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := DeleteInstancesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetServers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteInstancesRequestValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteInstancesRequestValidationError{
						field:  fmt.Sprintf("Servers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteInstancesRequestValidationError{
					field:  fmt.Sprintf("Servers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletePublicIp != nil {
		// no validation rules for DeletePublicIp
	}

	if m.DeleteVolume != nil {
		// no validation rules for DeleteVolume
	}

	if len(errors) > 0 {
		return DeleteInstancesRequestMultiError(errors)
	}

	return nil
}

// DeleteInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInstancesRequestMultiError) AllErrors() []error { return m }

// DeleteInstancesRequestValidationError is the validation error returned by
// DeleteInstancesRequest.Validate if the designated constraints aren't met.
type DeleteInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstancesRequestValidationError) ErrorName() string {
	return "DeleteInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstancesRequestValidationError{}

// Validate checks the field values on DeleteInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInstancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInstancesResponseMultiError, or nil if none found.
func (m *DeleteInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteInstancesResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteInstancesResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteInstancesResponseMultiError(errors)
	}

	return nil
}

// DeleteInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInstancesResponseMultiError) AllErrors() []error { return m }

// DeleteInstancesResponseValidationError is the validation error returned by
// DeleteInstancesResponse.Validate if the designated constraints aren't met.
type DeleteInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstancesResponseValidationError) ErrorName() string {
	return "DeleteInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstancesResponseValidationError{}

// Validate checks the field values on CreateVpcRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateVpcRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVpcRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVpcRequestMultiError, or nil if none found.
func (m *CreateVpcRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVpcRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := CreateVpcRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := CreateVpcRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := CreateVpcRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := CreateVpcRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Cidr != nil {
		// no validation rules for Cidr
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.EnterpriseProjectId != nil {
		// no validation rules for EnterpriseProjectId
	}

	if len(errors) > 0 {
		return CreateVpcRequestMultiError(errors)
	}

	return nil
}

// CreateVpcRequestMultiError is an error wrapping multiple validation errors
// returned by CreateVpcRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateVpcRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVpcRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVpcRequestMultiError) AllErrors() []error { return m }

// CreateVpcRequestValidationError is the validation error returned by
// CreateVpcRequest.Validate if the designated constraints aren't met.
type CreateVpcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVpcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVpcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVpcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVpcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVpcRequestValidationError) ErrorName() string { return "CreateVpcRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateVpcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVpcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVpcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVpcRequestValidationError{}

// Validate checks the field values on CreateVpcResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateVpcResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVpcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVpcResponseMultiError, or nil if none found.
func (m *CreateVpcResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVpcResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateVpcResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateVpcResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateVpcResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateVpcResponseMultiError(errors)
	}

	return nil
}

// CreateVpcResponseMultiError is an error wrapping multiple validation errors
// returned by CreateVpcResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateVpcResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVpcResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVpcResponseMultiError) AllErrors() []error { return m }

// CreateVpcResponseValidationError is the validation error returned by
// CreateVpcResponse.Validate if the designated constraints aren't met.
type CreateVpcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVpcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVpcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVpcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVpcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVpcResponseValidationError) ErrorName() string {
	return "CreateVpcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVpcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVpcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVpcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVpcResponseValidationError{}

// Validate checks the field values on ListVpcsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListVpcsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVpcsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVpcsRequestMultiError, or nil if none found.
func (m *ListVpcsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVpcsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := ListVpcsRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := ListVpcsRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := ListVpcsRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := ListVpcsRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Id != nil {
		// no validation rules for Id
	}

	if m.EnterpriseProjectId != nil {
		// no validation rules for EnterpriseProjectId
	}

	if len(errors) > 0 {
		return ListVpcsRequestMultiError(errors)
	}

	return nil
}

// ListVpcsRequestMultiError is an error wrapping multiple validation errors
// returned by ListVpcsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListVpcsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVpcsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVpcsRequestMultiError) AllErrors() []error { return m }

// ListVpcsRequestValidationError is the validation error returned by
// ListVpcsRequest.Validate if the designated constraints aren't met.
type ListVpcsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVpcsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVpcsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVpcsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVpcsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVpcsRequestValidationError) ErrorName() string { return "ListVpcsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListVpcsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVpcsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVpcsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVpcsRequestValidationError{}

// Validate checks the field values on ListVpcsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListVpcsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVpcsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVpcsResponseMultiError, or nil if none found.
func (m *ListVpcsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVpcsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListVpcsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListVpcsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListVpcsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListVpcsResponseMultiError(errors)
	}

	return nil
}

// ListVpcsResponseMultiError is an error wrapping multiple validation errors
// returned by ListVpcsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListVpcsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVpcsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVpcsResponseMultiError) AllErrors() []error { return m }

// ListVpcsResponseValidationError is the validation error returned by
// ListVpcsResponse.Validate if the designated constraints aren't met.
type ListVpcsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVpcsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVpcsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVpcsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVpcsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVpcsResponseValidationError) ErrorName() string { return "ListVpcsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListVpcsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVpcsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVpcsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVpcsResponseValidationError{}

// Validate checks the field values on VpcRoute with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VpcRoute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VpcRoute with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VpcRouteMultiError, or nil
// if none found.
func (m *VpcRoute) ValidateAll() error {
	return m.validate(true)
}

func (m *VpcRoute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Destination != nil {
		// no validation rules for Destination
	}

	if m.NextHop != nil {
		// no validation rules for NextHop
	}

	if len(errors) > 0 {
		return VpcRouteMultiError(errors)
	}

	return nil
}

// VpcRouteMultiError is an error wrapping multiple validation errors returned
// by VpcRoute.ValidateAll() if the designated constraints aren't met.
type VpcRouteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VpcRouteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VpcRouteMultiError) AllErrors() []error { return m }

// VpcRouteValidationError is the validation error returned by
// VpcRoute.Validate if the designated constraints aren't met.
type VpcRouteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VpcRouteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VpcRouteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VpcRouteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VpcRouteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VpcRouteValidationError) ErrorName() string { return "VpcRouteValidationError" }

// Error satisfies the builtin error interface
func (e VpcRouteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVpcRoute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VpcRouteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VpcRouteValidationError{}

// Validate checks the field values on UpdateVpcRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateVpcRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVpcRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVpcRequestMultiError, or nil if none found.
func (m *UpdateVpcRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVpcRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := UpdateVpcRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := UpdateVpcRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := UpdateVpcRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := UpdateVpcRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for VpcId

	for idx, item := range m.GetRoutes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateVpcRequestValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateVpcRequestValidationError{
						field:  fmt.Sprintf("Routes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateVpcRequestValidationError{
					field:  fmt.Sprintf("Routes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Cidr != nil {
		// no validation rules for Cidr
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if len(errors) > 0 {
		return UpdateVpcRequestMultiError(errors)
	}

	return nil
}

// UpdateVpcRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateVpcRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateVpcRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVpcRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVpcRequestMultiError) AllErrors() []error { return m }

// UpdateVpcRequestValidationError is the validation error returned by
// UpdateVpcRequest.Validate if the designated constraints aren't met.
type UpdateVpcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVpcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVpcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVpcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVpcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVpcRequestValidationError) ErrorName() string { return "UpdateVpcRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateVpcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVpcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVpcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVpcRequestValidationError{}

// Validate checks the field values on UpdateVpcResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateVpcResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVpcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVpcResponseMultiError, or nil if none found.
func (m *UpdateVpcResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVpcResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateVpcResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateVpcResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateVpcResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateVpcResponseMultiError(errors)
	}

	return nil
}

// UpdateVpcResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateVpcResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateVpcResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVpcResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVpcResponseMultiError) AllErrors() []error { return m }

// UpdateVpcResponseValidationError is the validation error returned by
// UpdateVpcResponse.Validate if the designated constraints aren't met.
type UpdateVpcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVpcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVpcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVpcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVpcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVpcResponseValidationError) ErrorName() string {
	return "UpdateVpcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVpcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVpcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVpcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVpcResponseValidationError{}

// Validate checks the field values on DeleteVpcRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteVpcRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVpcRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteVpcRequestMultiError, or nil if none found.
func (m *DeleteVpcRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVpcRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := DeleteVpcRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := DeleteVpcRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := DeleteVpcRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := DeleteVpcRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVpcId()) < 1 {
		err := DeleteVpcRequestValidationError{
			field:  "VpcId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteVpcRequestMultiError(errors)
	}

	return nil
}

// DeleteVpcRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteVpcRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteVpcRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVpcRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVpcRequestMultiError) AllErrors() []error { return m }

// DeleteVpcRequestValidationError is the validation error returned by
// DeleteVpcRequest.Validate if the designated constraints aren't met.
type DeleteVpcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVpcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVpcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVpcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVpcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVpcRequestValidationError) ErrorName() string { return "DeleteVpcRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteVpcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVpcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVpcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVpcRequestValidationError{}

// Validate checks the field values on DeleteVpcResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteVpcResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVpcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteVpcResponseMultiError, or nil if none found.
func (m *DeleteVpcResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVpcResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteVpcResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteVpcResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteVpcResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteVpcResponseMultiError(errors)
	}

	return nil
}

// DeleteVpcResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteVpcResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteVpcResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVpcResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVpcResponseMultiError) AllErrors() []error { return m }

// DeleteVpcResponseValidationError is the validation error returned by
// DeleteVpcResponse.Validate if the designated constraints aren't met.
type DeleteVpcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVpcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVpcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVpcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVpcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVpcResponseValidationError) ErrorName() string {
	return "DeleteVpcResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVpcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVpcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVpcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVpcResponseValidationError{}

// Validate checks the field values on ShowVpcRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShowVpcRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowVpcRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowVpcRequestMultiError,
// or nil if none found.
func (m *ShowVpcRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowVpcRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := ShowVpcRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := ShowVpcRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := ShowVpcRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := ShowVpcRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetVpcId()) < 1 {
		err := ShowVpcRequestValidationError{
			field:  "VpcId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShowVpcRequestMultiError(errors)
	}

	return nil
}

// ShowVpcRequestMultiError is an error wrapping multiple validation errors
// returned by ShowVpcRequest.ValidateAll() if the designated constraints
// aren't met.
type ShowVpcRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowVpcRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowVpcRequestMultiError) AllErrors() []error { return m }

// ShowVpcRequestValidationError is the validation error returned by
// ShowVpcRequest.Validate if the designated constraints aren't met.
type ShowVpcRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowVpcRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowVpcRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowVpcRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowVpcRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowVpcRequestValidationError) ErrorName() string { return "ShowVpcRequestValidationError" }

// Error satisfies the builtin error interface
func (e ShowVpcRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowVpcRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowVpcRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowVpcRequestValidationError{}

// Validate checks the field values on ShowVpcResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShowVpcResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowVpcResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowVpcResponseMultiError, or nil if none found.
func (m *ShowVpcResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowVpcResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowVpcResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowVpcResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowVpcResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShowVpcResponseMultiError(errors)
	}

	return nil
}

// ShowVpcResponseMultiError is an error wrapping multiple validation errors
// returned by ShowVpcResponse.ValidateAll() if the designated constraints
// aren't met.
type ShowVpcResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowVpcResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowVpcResponseMultiError) AllErrors() []error { return m }

// ShowVpcResponseValidationError is the validation error returned by
// ShowVpcResponse.Validate if the designated constraints aren't met.
type ShowVpcResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowVpcResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowVpcResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowVpcResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowVpcResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowVpcResponseValidationError) ErrorName() string { return "ShowVpcResponseValidationError" }

// Error satisfies the builtin error interface
func (e ShowVpcResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowVpcResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowVpcResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowVpcResponseValidationError{}

// Validate checks the field values on ExtraDhcpOpts with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExtraDhcpOpts) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtraDhcpOpts with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtraDhcpOptsMultiError, or
// nil if none found.
func (m *ExtraDhcpOpts) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtraDhcpOpts) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OptName

	// no validation rules for OptValue

	if len(errors) > 0 {
		return ExtraDhcpOptsMultiError(errors)
	}

	return nil
}

// ExtraDhcpOptsMultiError is an error wrapping multiple validation errors
// returned by ExtraDhcpOpts.ValidateAll() if the designated constraints
// aren't met.
type ExtraDhcpOptsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtraDhcpOptsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtraDhcpOptsMultiError) AllErrors() []error { return m }

// ExtraDhcpOptsValidationError is the validation error returned by
// ExtraDhcpOpts.Validate if the designated constraints aren't met.
type ExtraDhcpOptsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtraDhcpOptsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtraDhcpOptsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtraDhcpOptsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtraDhcpOptsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtraDhcpOptsValidationError) ErrorName() string { return "ExtraDhcpOptsValidationError" }

// Error satisfies the builtin error interface
func (e ExtraDhcpOptsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtraDhcpOpts.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtraDhcpOptsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtraDhcpOptsValidationError{}

// Validate checks the field values on CreateSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubnetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubnetRequestMultiError, or nil if none found.
func (m *CreateSubnetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubnetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := CreateSubnetRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := CreateSubnetRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := CreateSubnetRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := CreateSubnetRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Cidr

	// no validation rules for Name

	// no validation rules for VpcId

	// no validation rules for GatewayIp

	for idx, item := range m.GetExtraDhcpOpts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateSubnetRequestValidationError{
						field:  fmt.Sprintf("ExtraDhcpOpts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateSubnetRequestValidationError{
						field:  fmt.Sprintf("ExtraDhcpOpts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateSubnetRequestValidationError{
					field:  fmt.Sprintf("ExtraDhcpOpts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Ipv6Enable != nil {
		// no validation rules for Ipv6Enable
	}

	if m.DhcpEnable != nil {
		// no validation rules for DhcpEnable
	}

	if m.PrimaryDns != nil {
		// no validation rules for PrimaryDns
	}

	if m.SecondaryDns != nil {
		// no validation rules for SecondaryDns
	}

	if m.AvailabilityZone != nil {
		// no validation rules for AvailabilityZone
	}

	if len(errors) > 0 {
		return CreateSubnetRequestMultiError(errors)
	}

	return nil
}

// CreateSubnetRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSubnetRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSubnetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubnetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubnetRequestMultiError) AllErrors() []error { return m }

// CreateSubnetRequestValidationError is the validation error returned by
// CreateSubnetRequest.Validate if the designated constraints aren't met.
type CreateSubnetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubnetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubnetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubnetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubnetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubnetRequestValidationError) ErrorName() string {
	return "CreateSubnetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubnetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubnetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubnetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubnetRequestValidationError{}

// Validate checks the field values on CreateSubnetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubnetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubnetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubnetResponseMultiError, or nil if none found.
func (m *CreateSubnetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubnetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSubnetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSubnetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSubnetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSubnetResponseMultiError(errors)
	}

	return nil
}

// CreateSubnetResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSubnetResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSubnetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubnetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubnetResponseMultiError) AllErrors() []error { return m }

// CreateSubnetResponseValidationError is the validation error returned by
// CreateSubnetResponse.Validate if the designated constraints aren't met.
type CreateSubnetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubnetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubnetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubnetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubnetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubnetResponseValidationError) ErrorName() string {
	return "CreateSubnetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubnetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubnetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubnetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubnetResponseValidationError{}

// Validate checks the field values on ListSubnetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubnetsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubnetsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubnetsRequestMultiError, or nil if none found.
func (m *ListSubnetsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubnetsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := ListSubnetsRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := ListSubnetsRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := ListSubnetsRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := ListSubnetsRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.VpcId != nil {
		// no validation rules for VpcId
	}

	if len(errors) > 0 {
		return ListSubnetsRequestMultiError(errors)
	}

	return nil
}

// ListSubnetsRequestMultiError is an error wrapping multiple validation errors
// returned by ListSubnetsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSubnetsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubnetsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubnetsRequestMultiError) AllErrors() []error { return m }

// ListSubnetsRequestValidationError is the validation error returned by
// ListSubnetsRequest.Validate if the designated constraints aren't met.
type ListSubnetsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubnetsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubnetsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubnetsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubnetsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubnetsRequestValidationError) ErrorName() string {
	return "ListSubnetsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubnetsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubnetsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubnetsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubnetsRequestValidationError{}

// Validate checks the field values on ListSubnetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubnetsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubnetsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubnetsResponseMultiError, or nil if none found.
func (m *ListSubnetsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubnetsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubnetsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubnetsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubnetsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSubnetsResponseMultiError(errors)
	}

	return nil
}

// ListSubnetsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSubnetsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSubnetsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubnetsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubnetsResponseMultiError) AllErrors() []error { return m }

// ListSubnetsResponseValidationError is the validation error returned by
// ListSubnetsResponse.Validate if the designated constraints aren't met.
type ListSubnetsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubnetsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubnetsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubnetsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubnetsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubnetsResponseValidationError) ErrorName() string {
	return "ListSubnetsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubnetsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubnetsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubnetsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubnetsResponseValidationError{}

// Validate checks the field values on UpdateSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubnetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubnetRequestMultiError, or nil if none found.
func (m *UpdateSubnetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubnetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := UpdateSubnetRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := UpdateSubnetRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := UpdateSubnetRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := UpdateSubnetRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for VpcId

	// no validation rules for SubnetId

	// no validation rules for Name

	for idx, item := range m.GetExtraDhcpOpts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateSubnetRequestValidationError{
						field:  fmt.Sprintf("ExtraDhcpOpts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateSubnetRequestValidationError{
						field:  fmt.Sprintf("ExtraDhcpOpts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateSubnetRequestValidationError{
					field:  fmt.Sprintf("ExtraDhcpOpts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Ipv6Enable != nil {
		// no validation rules for Ipv6Enable
	}

	if m.DhcpEnable != nil {
		// no validation rules for DhcpEnable
	}

	if m.PrimaryDns != nil {
		// no validation rules for PrimaryDns
	}

	if m.SecondaryDns != nil {
		// no validation rules for SecondaryDns
	}

	if len(errors) > 0 {
		return UpdateSubnetRequestMultiError(errors)
	}

	return nil
}

// UpdateSubnetRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSubnetRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSubnetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubnetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubnetRequestMultiError) AllErrors() []error { return m }

// UpdateSubnetRequestValidationError is the validation error returned by
// UpdateSubnetRequest.Validate if the designated constraints aren't met.
type UpdateSubnetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubnetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubnetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubnetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubnetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubnetRequestValidationError) ErrorName() string {
	return "UpdateSubnetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubnetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubnetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubnetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubnetRequestValidationError{}

// Validate checks the field values on UpdateSubnetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSubnetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSubnetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSubnetResponseMultiError, or nil if none found.
func (m *UpdateSubnetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSubnetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSubnetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSubnetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSubnetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSubnetResponseMultiError(errors)
	}

	return nil
}

// UpdateSubnetResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateSubnetResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateSubnetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSubnetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSubnetResponseMultiError) AllErrors() []error { return m }

// UpdateSubnetResponseValidationError is the validation error returned by
// UpdateSubnetResponse.Validate if the designated constraints aren't met.
type UpdateSubnetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSubnetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSubnetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSubnetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSubnetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSubnetResponseValidationError) ErrorName() string {
	return "UpdateSubnetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSubnetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSubnetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSubnetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSubnetResponseValidationError{}

// Validate checks the field values on DeleteSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubnetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubnetRequestMultiError, or nil if none found.
func (m *DeleteSubnetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubnetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := DeleteSubnetRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := DeleteSubnetRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := DeleteSubnetRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := DeleteSubnetRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for VpcId

	// no validation rules for SubnetId

	if len(errors) > 0 {
		return DeleteSubnetRequestMultiError(errors)
	}

	return nil
}

// DeleteSubnetRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSubnetRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSubnetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubnetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubnetRequestMultiError) AllErrors() []error { return m }

// DeleteSubnetRequestValidationError is the validation error returned by
// DeleteSubnetRequest.Validate if the designated constraints aren't met.
type DeleteSubnetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubnetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubnetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubnetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubnetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubnetRequestValidationError) ErrorName() string {
	return "DeleteSubnetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubnetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubnetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubnetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubnetRequestValidationError{}

// Validate checks the field values on DeleteSubnetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSubnetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSubnetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSubnetResponseMultiError, or nil if none found.
func (m *DeleteSubnetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSubnetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteSubnetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteSubnetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteSubnetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteSubnetResponseMultiError(errors)
	}

	return nil
}

// DeleteSubnetResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSubnetResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSubnetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSubnetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSubnetResponseMultiError) AllErrors() []error { return m }

// DeleteSubnetResponseValidationError is the validation error returned by
// DeleteSubnetResponse.Validate if the designated constraints aren't met.
type DeleteSubnetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSubnetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSubnetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSubnetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSubnetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSubnetResponseValidationError) ErrorName() string {
	return "DeleteSubnetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSubnetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSubnetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSubnetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSubnetResponseValidationError{}

// Validate checks the field values on ShowSubnetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShowSubnetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowSubnetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowSubnetRequestMultiError, or nil if none found.
func (m *ShowSubnetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowSubnetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := ShowSubnetRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := ShowSubnetRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := ShowSubnetRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := ShowSubnetRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SubnetId

	if len(errors) > 0 {
		return ShowSubnetRequestMultiError(errors)
	}

	return nil
}

// ShowSubnetRequestMultiError is an error wrapping multiple validation errors
// returned by ShowSubnetRequest.ValidateAll() if the designated constraints
// aren't met.
type ShowSubnetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowSubnetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowSubnetRequestMultiError) AllErrors() []error { return m }

// ShowSubnetRequestValidationError is the validation error returned by
// ShowSubnetRequest.Validate if the designated constraints aren't met.
type ShowSubnetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowSubnetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowSubnetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowSubnetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowSubnetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowSubnetRequestValidationError) ErrorName() string {
	return "ShowSubnetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShowSubnetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowSubnetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowSubnetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowSubnetRequestValidationError{}

// Validate checks the field values on ShowSubnetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShowSubnetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowSubnetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowSubnetResponseMultiError, or nil if none found.
func (m *ShowSubnetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowSubnetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowSubnetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowSubnetResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowSubnetResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShowSubnetResponseMultiError(errors)
	}

	return nil
}

// ShowSubnetResponseMultiError is an error wrapping multiple validation errors
// returned by ShowSubnetResponse.ValidateAll() if the designated constraints
// aren't met.
type ShowSubnetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowSubnetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowSubnetResponseMultiError) AllErrors() []error { return m }

// ShowSubnetResponseValidationError is the validation error returned by
// ShowSubnetResponse.Validate if the designated constraints aren't met.
type ShowSubnetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowSubnetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowSubnetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowSubnetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowSubnetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowSubnetResponseValidationError) ErrorName() string {
	return "ShowSubnetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShowSubnetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowSubnetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowSubnetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowSubnetResponseValidationError{}

// Validate checks the field values on ShowJobRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShowJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShowJobRequestMultiError,
// or nil if none found.
func (m *ShowJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessKey()) < 1 {
		err := ShowJobRequestValidationError{
			field:  "AccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretKey()) < 1 {
		err := ShowJobRequestValidationError{
			field:  "SecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRegionId()) < 1 {
		err := ShowJobRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		err := ShowJobRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for JobId

	if len(errors) > 0 {
		return ShowJobRequestMultiError(errors)
	}

	return nil
}

// ShowJobRequestMultiError is an error wrapping multiple validation errors
// returned by ShowJobRequest.ValidateAll() if the designated constraints
// aren't met.
type ShowJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowJobRequestMultiError) AllErrors() []error { return m }

// ShowJobRequestValidationError is the validation error returned by
// ShowJobRequest.Validate if the designated constraints aren't met.
type ShowJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowJobRequestValidationError) ErrorName() string { return "ShowJobRequestValidationError" }

// Error satisfies the builtin error interface
func (e ShowJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowJobRequestValidationError{}

// Validate checks the field values on ShowJobResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShowJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowJobResponseMultiError, or nil if none found.
func (m *ShowJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShowJobResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShowJobResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShowJobResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShowJobResponseMultiError(errors)
	}

	return nil
}

// ShowJobResponseMultiError is an error wrapping multiple validation errors
// returned by ShowJobResponse.ValidateAll() if the designated constraints
// aren't met.
type ShowJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowJobResponseMultiError) AllErrors() []error { return m }

// ShowJobResponseValidationError is the validation error returned by
// ShowJobResponse.Validate if the designated constraints aren't met.
type ShowJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowJobResponseValidationError) ErrorName() string { return "ShowJobResponseValidationError" }

// Error satisfies the builtin error interface
func (e ShowJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowJobResponseValidationError{}

// Validate checks the field values on CreateInstancesRequest_Nic with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstancesRequest_Nic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstancesRequest_Nic with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstancesRequest_NicMultiError, or nil if none found.
func (m *CreateInstancesRequest_Nic) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstancesRequest_Nic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubnetId

	if len(errors) > 0 {
		return CreateInstancesRequest_NicMultiError(errors)
	}

	return nil
}

// CreateInstancesRequest_NicMultiError is an error wrapping multiple
// validation errors returned by CreateInstancesRequest_Nic.ValidateAll() if
// the designated constraints aren't met.
type CreateInstancesRequest_NicMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstancesRequest_NicMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstancesRequest_NicMultiError) AllErrors() []error { return m }

// CreateInstancesRequest_NicValidationError is the validation error returned
// by CreateInstancesRequest_Nic.Validate if the designated constraints aren't met.
type CreateInstancesRequest_NicValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstancesRequest_NicValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstancesRequest_NicValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstancesRequest_NicValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstancesRequest_NicValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstancesRequest_NicValidationError) ErrorName() string {
	return "CreateInstancesRequest_NicValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstancesRequest_NicValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstancesRequest_Nic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstancesRequest_NicValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstancesRequest_NicValidationError{}

// Validate checks the field values on CreateInstancesRequest_RootVolume with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateInstancesRequest_RootVolume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstancesRequest_RootVolume
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateInstancesRequest_RootVolumeMultiError, or nil if none found.
func (m *CreateInstancesRequest_RootVolume) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstancesRequest_RootVolume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VolumeType

	if m.Size != nil {
		// no validation rules for Size
	}

	if len(errors) > 0 {
		return CreateInstancesRequest_RootVolumeMultiError(errors)
	}

	return nil
}

// CreateInstancesRequest_RootVolumeMultiError is an error wrapping multiple
// validation errors returned by
// CreateInstancesRequest_RootVolume.ValidateAll() if the designated
// constraints aren't met.
type CreateInstancesRequest_RootVolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstancesRequest_RootVolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstancesRequest_RootVolumeMultiError) AllErrors() []error { return m }

// CreateInstancesRequest_RootVolumeValidationError is the validation error
// returned by CreateInstancesRequest_RootVolume.Validate if the designated
// constraints aren't met.
type CreateInstancesRequest_RootVolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstancesRequest_RootVolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstancesRequest_RootVolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstancesRequest_RootVolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstancesRequest_RootVolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstancesRequest_RootVolumeValidationError) ErrorName() string {
	return "CreateInstancesRequest_RootVolumeValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstancesRequest_RootVolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstancesRequest_RootVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstancesRequest_RootVolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstancesRequest_RootVolumeValidationError{}
