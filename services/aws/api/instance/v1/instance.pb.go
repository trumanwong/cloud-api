// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: services/aws/api/instance/v1/instance.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretKey   string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Region      string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// 镜像id
	ImageId string `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// 实例规格
	InstanceType string `protobuf:"bytes,5,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// The number of CPU cores for the instance.
	CpuCoreCount int32 `protobuf:"varint,6,opt,name=cpu_core_count,json=cpuCoreCount,proto3" json:"cpu_core_count,omitempty"`
	// The number of threads per CPU core. To disable multithreading for the instance, specify a value of 1. Otherwise, specify the default value of 2.
	ThreadsPerCore int32 `protobuf:"varint,7,opt,name=threads_per_core,json=threadsPerCore,proto3" json:"threads_per_core,omitempty"`
	// 系统盘大小
	SystemDiskSize int32 `protobuf:"varint,8,opt,name=system_disk_size,json=systemDiskSize,proto3" json:"system_disk_size,omitempty"`
	// 是否为instance_name自动添加有序后缀（默认false）
	UniqueSuffix bool `protobuf:"varint,9,opt,name=unique_suffix,json=uniqueSuffix,proto3" json:"unique_suffix,omitempty"`
	// 创建数量(1-100，默认1)
	Amount uint32 `protobuf:"varint,10,opt,name=amount,proto3" json:"amount,omitempty"`
	// 实例密码
	Password string `protobuf:"bytes,11,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *CreateInstanceRequest) Reset() {
	*x = CreateInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceRequest) ProtoMessage() {}

func (x *CreateInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceRequest.ProtoReflect.Descriptor instead.
func (*CreateInstanceRequest) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{0}
}

func (x *CreateInstanceRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *CreateInstanceRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *CreateInstanceRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CreateInstanceRequest) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *CreateInstanceRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *CreateInstanceRequest) GetCpuCoreCount() int32 {
	if x != nil {
		return x.CpuCoreCount
	}
	return 0
}

func (x *CreateInstanceRequest) GetThreadsPerCore() int32 {
	if x != nil {
		return x.ThreadsPerCore
	}
	return 0
}

func (x *CreateInstanceRequest) GetSystemDiskSize() int32 {
	if x != nil {
		return x.SystemDiskSize
	}
	return 0
}

func (x *CreateInstanceRequest) GetUniqueSuffix() bool {
	if x != nil {
		return x.UniqueSuffix
	}
	return false
}

func (x *CreateInstanceRequest) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateInstanceRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type CreateInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实例id列表
	InstanceIdSets []string `protobuf:"bytes,1,rep,name=instance_id_sets,json=instanceIdSets,proto3" json:"instance_id_sets,omitempty"`
	// The ID of the AWS account that owns the reservation.
	OwnerId string `protobuf:"bytes,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// The ID of the requester that launched the instances on your behalf (for example, AWS Management Console or Auto Scaling).
	RequesterId string `protobuf:"bytes,3,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	// The ID of the reservation.
	ReservationId string `protobuf:"bytes,4,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
}

func (x *CreateInstanceResponse) Reset() {
	*x = CreateInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateInstanceResponse) ProtoMessage() {}

func (x *CreateInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateInstanceResponse.ProtoReflect.Descriptor instead.
func (*CreateInstanceResponse) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{1}
}

func (x *CreateInstanceResponse) GetInstanceIdSets() []string {
	if x != nil {
		return x.InstanceIdSets
	}
	return nil
}

func (x *CreateInstanceResponse) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *CreateInstanceResponse) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *CreateInstanceResponse) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

type ListInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretKey   string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Region      string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
	MaxResults int32 `protobuf:"varint,4,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// The token to request the next page of results.
	NextToken string `protobuf:"bytes,5,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
}

func (x *ListInstanceRequest) Reset() {
	*x = ListInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceRequest) ProtoMessage() {}

func (x *ListInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceRequest) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{2}
}

func (x *ListInstanceRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *ListInstanceRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ListInstanceRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListInstanceRequest) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (x *ListInstanceRequest) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

type GroupIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupId   string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
}

func (x *GroupIdentifier) Reset() {
	*x = GroupIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupIdentifier) ProtoMessage() {}

func (x *GroupIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupIdentifier.ProtoReflect.Descriptor instead.
func (*GroupIdentifier) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{3}
}

func (x *GroupIdentifier) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

func (x *GroupIdentifier) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

type InstanceObj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The AMI launch index, which can be used to find this instance in the launch group.
	AmiLaunchIndex int32 `protobuf:"varint,1,opt,name=ami_launch_index,json=amiLaunchIndex,proto3" json:"ami_launch_index,omitempty"`
	// The architecture of the image.
	// Valid Values: i386 | x86_64 | arm64 | x86_64_mac
	Architecture string `protobuf:"bytes,2,opt,name=architecture,proto3" json:"architecture,omitempty"`
	// The boot mode of the instance. For more information, see Boot modes in the Amazon EC2 User Guide.
	BootMode string `protobuf:"bytes,3,opt,name=boot_mode,json=bootMode,proto3" json:"boot_mode,omitempty"`
	// The CPU options for the instance.
	CpuOptions *InstanceObj_CpuOptions `protobuf:"bytes,4,opt,name=cpu_options,json=cpuOptions,proto3" json:"cpu_options,omitempty"`
	// Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.
	EbsOptimized bool `protobuf:"varint,5,opt,name=ebs_optimized,json=ebsOptimized,proto3" json:"ebs_optimized,omitempty"`
	// Specifies whether enhanced networking with ENA is enabled.
	EnaSupport bool `protobuf:"varint,6,opt,name=ena_support,json=enaSupport,proto3" json:"ena_support,omitempty"`
	// The hypervisor type of the instance. The value xen is used for both Xen and Nitro hypervisors.
	// Valid Values: ovm | xen
	Hypervisor string `protobuf:"bytes,7,opt,name=hypervisor,proto3" json:"hypervisor,omitempty"`
	// The ID of the AMI used to launch the instance.
	ImageId string `protobuf:"bytes,8,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// The ID of the instance.
	InstanceId string `protobuf:"bytes,9,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Indicates whether this is a Spot Instance or a Scheduled Instance.
	// Valid Values: spot | scheduled
	InstanceLifecycle string `protobuf:"bytes,10,opt,name=instance_lifecycle,json=instanceLifecycle,proto3" json:"instance_lifecycle,omitempty"`
	// The current state of the instance.
	InstanceState *InstanceState `protobuf:"bytes,11,opt,name=instance_state,json=instanceState,proto3" json:"instance_state,omitempty"`
	// The instance type.
	InstanceType string `protobuf:"bytes,12,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// The public IPv4 address, or the Carrier IP address assigned to the instance, if applicable.
	Ipv4Address string `protobuf:"bytes,13,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	// The IPv6 address assigned to the instance.
	Ipv6Address string `protobuf:"bytes,14,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	// The kernel associated with this instance, if applicable.
	KernelId string `protobuf:"bytes,15,opt,name=kernel_id,json=kernelId,proto3" json:"kernel_id,omitempty"`
	// The name of the key pair, if this instance was launched with an associated key pair.
	KeyName string `protobuf:"bytes,16,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	// The time the instance was launched.
	LaunchTime string `protobuf:"bytes,17,opt,name=launch_time,json=launchTime,proto3" json:"launch_time,omitempty"`
	// The monitoring for the instance.
	Monitoring *InstanceObj_Monitoring `protobuf:"bytes,18,opt,name=monitoring,proto3" json:"monitoring,omitempty"`
	// The value is Windows for Windows instances; otherwise blank.
	Platform string `protobuf:"bytes,19,opt,name=platform,proto3" json:"platform,omitempty"`
	// The platform details value for the instance. For more information, see AMI billing information fields in the Amazon EC2 User Guide.
	PlatformDetails string `protobuf:"bytes,20,opt,name=platform_details,json=platformDetails,proto3" json:"platform_details,omitempty"`
	// (IPv4 only) The private DNS hostname name assigned to the instance. This DNS hostname can only be used inside the Amazon EC2 network. This name is not available until the instance enters the running state.
	PrivateDnsName string `protobuf:"bytes,21,opt,name=private_dns_name,json=privateDnsName,proto3" json:"private_dns_name,omitempty"`
	// The options for the instance hostname.
	PrivateDnsNameOptionsResponse *InstanceObj_PrivateDnsNameOptionsResponse `protobuf:"bytes,22,opt,name=privateDnsNameOptionsResponse,proto3" json:"privateDnsNameOptionsResponse,omitempty"`
	// The private IPv4 address assigned to the instance.
	PrivateIpAddress string `protobuf:"bytes,23,opt,name=privateIpAddress,proto3" json:"privateIpAddress,omitempty"`
	// The RAM disk associated with this instance, if applicable.
	RamdiskId string `protobuf:"bytes,24,opt,name=ramdisk_id,json=ramdiskId,proto3" json:"ramdisk_id,omitempty"`
	// The device name of the root device volume (for example, /dev/sda1).
	RootDeviceName string `protobuf:"bytes,25,opt,name=root_device_name,json=rootDeviceName,proto3" json:"root_device_name,omitempty"`
	// The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
	RootDeviceType string `protobuf:"bytes,26,opt,name=root_device_type,json=rootDeviceType,proto3" json:"root_device_type,omitempty"`
}

func (x *InstanceObj) Reset() {
	*x = InstanceObj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceObj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceObj) ProtoMessage() {}

func (x *InstanceObj) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceObj.ProtoReflect.Descriptor instead.
func (*InstanceObj) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{4}
}

func (x *InstanceObj) GetAmiLaunchIndex() int32 {
	if x != nil {
		return x.AmiLaunchIndex
	}
	return 0
}

func (x *InstanceObj) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *InstanceObj) GetBootMode() string {
	if x != nil {
		return x.BootMode
	}
	return ""
}

func (x *InstanceObj) GetCpuOptions() *InstanceObj_CpuOptions {
	if x != nil {
		return x.CpuOptions
	}
	return nil
}

func (x *InstanceObj) GetEbsOptimized() bool {
	if x != nil {
		return x.EbsOptimized
	}
	return false
}

func (x *InstanceObj) GetEnaSupport() bool {
	if x != nil {
		return x.EnaSupport
	}
	return false
}

func (x *InstanceObj) GetHypervisor() string {
	if x != nil {
		return x.Hypervisor
	}
	return ""
}

func (x *InstanceObj) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *InstanceObj) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceObj) GetInstanceLifecycle() string {
	if x != nil {
		return x.InstanceLifecycle
	}
	return ""
}

func (x *InstanceObj) GetInstanceState() *InstanceState {
	if x != nil {
		return x.InstanceState
	}
	return nil
}

func (x *InstanceObj) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *InstanceObj) GetIpv4Address() string {
	if x != nil {
		return x.Ipv4Address
	}
	return ""
}

func (x *InstanceObj) GetIpv6Address() string {
	if x != nil {
		return x.Ipv6Address
	}
	return ""
}

func (x *InstanceObj) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

func (x *InstanceObj) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *InstanceObj) GetLaunchTime() string {
	if x != nil {
		return x.LaunchTime
	}
	return ""
}

func (x *InstanceObj) GetMonitoring() *InstanceObj_Monitoring {
	if x != nil {
		return x.Monitoring
	}
	return nil
}

func (x *InstanceObj) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *InstanceObj) GetPlatformDetails() string {
	if x != nil {
		return x.PlatformDetails
	}
	return ""
}

func (x *InstanceObj) GetPrivateDnsName() string {
	if x != nil {
		return x.PrivateDnsName
	}
	return ""
}

func (x *InstanceObj) GetPrivateDnsNameOptionsResponse() *InstanceObj_PrivateDnsNameOptionsResponse {
	if x != nil {
		return x.PrivateDnsNameOptionsResponse
	}
	return nil
}

func (x *InstanceObj) GetPrivateIpAddress() string {
	if x != nil {
		return x.PrivateIpAddress
	}
	return ""
}

func (x *InstanceObj) GetRamdiskId() string {
	if x != nil {
		return x.RamdiskId
	}
	return ""
}

func (x *InstanceObj) GetRootDeviceName() string {
	if x != nil {
		return x.RootDeviceName
	}
	return ""
}

func (x *InstanceObj) GetRootDeviceType() string {
	if x != nil {
		return x.RootDeviceType
	}
	return ""
}

type ListInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
	NextToken string `protobuf:"bytes,1,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
	// Information about the reservations.
	ReservationSet []*ListInstanceResponse_Reservation `protobuf:"bytes,2,rep,name=reservation_set,json=reservationSet,proto3" json:"reservation_set,omitempty"`
}

func (x *ListInstanceResponse) Reset() {
	*x = ListInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceResponse) ProtoMessage() {}

func (x *ListInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceResponse) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{5}
}

func (x *ListInstanceResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *ListInstanceResponse) GetReservationSet() []*ListInstanceResponse_Reservation {
	if x != nil {
		return x.ReservationSet
	}
	return nil
}

type ListRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretKey   string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
}

func (x *ListRegionRequest) Reset() {
	*x = ListRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionRequest) ProtoMessage() {}

func (x *ListRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionRequest.ProtoReflect.Descriptor instead.
func (*ListRegionRequest) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{6}
}

func (x *ListRegionRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *ListRegionRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type ListRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Regions []*ListRegionResponse_Region `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *ListRegionResponse) Reset() {
	*x = ListRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionResponse) ProtoMessage() {}

func (x *ListRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionResponse.ProtoReflect.Descriptor instead.
func (*ListRegionResponse) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{7}
}

func (x *ListRegionResponse) GetRegions() []*ListRegionResponse_Region {
	if x != nil {
		return x.Regions
	}
	return nil
}

type ListImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretKey   string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Region      string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *ListImageRequest) Reset() {
	*x = ListImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageRequest) ProtoMessage() {}

func (x *ListImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageRequest.ProtoReflect.Descriptor instead.
func (*ListImageRequest) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{8}
}

func (x *ListImageRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *ListImageRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ListImageRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type ListImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*ListImageResponse_Image `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *ListImageResponse) Reset() {
	*x = ListImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageResponse) ProtoMessage() {}

func (x *ListImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageResponse.ProtoReflect.Descriptor instead.
func (*ListImageResponse) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{9}
}

func (x *ListImageResponse) GetImages() []*ListImageResponse_Image {
	if x != nil {
		return x.Images
	}
	return nil
}

type ListInstanceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId string `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretKey   string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Region      string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value.
	// Valid Range: Minimum value of 5. Maximum value of 100.
	MaxResults int32 `protobuf:"varint,4,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
	// The token to retrieve the next page of results.
	NextToken string `protobuf:"bytes,5,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
}

func (x *ListInstanceTypeRequest) Reset() {
	*x = ListInstanceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeRequest) ProtoMessage() {}

func (x *ListInstanceTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeRequest.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeRequest) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{10}
}

func (x *ListInstanceTypeRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *ListInstanceTypeRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *ListInstanceTypeRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *ListInstanceTypeRequest) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

func (x *ListInstanceTypeRequest) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

type ListInstanceTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceTypes []*ListInstanceTypeResponse_InstanceType `protobuf:"bytes,1,rep,name=instance_types,json=instanceTypes,proto3" json:"instance_types,omitempty"`
	// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
	NextToken string `protobuf:"bytes,2,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
	// The ID of the request.
	RequestId string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *ListInstanceTypeResponse) Reset() {
	*x = ListInstanceTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse) ProtoMessage() {}

func (x *ListInstanceTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11}
}

func (x *ListInstanceTypeResponse) GetInstanceTypes() []*ListInstanceTypeResponse_InstanceType {
	if x != nil {
		return x.InstanceTypes
	}
	return nil
}

func (x *ListInstanceTypeResponse) GetNextToken() string {
	if x != nil {
		return x.NextToken
	}
	return ""
}

func (x *ListInstanceTypeResponse) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type StartInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId string   `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretKey   string   `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Region      string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	InstanceIds []string `protobuf:"bytes,4,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
}

func (x *StartInstanceRequest) Reset() {
	*x = StartInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstanceRequest) ProtoMessage() {}

func (x *StartInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstanceRequest.ProtoReflect.Descriptor instead.
func (*StartInstanceRequest) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{12}
}

func (x *StartInstanceRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *StartInstanceRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *StartInstanceRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *StartInstanceRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

type InstanceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The state of the instance as a 16-bit unsigned integer.
	// The high byte is all of the bits between 2^8 and (2^16)-1, which equals decimal values between 256 and 65,535. These numerical values are used for internal purposes and should be ignored.
	// The low byte is all of the bits between 2^0 and (2^8)-1, which equals decimal values between 0 and 255.
	// The valid values for instance-state-code will all be in the range of the low byte and they are:
	// 0 : pending
	// 16 : running
	// 32 : shutting-down
	// 48 : terminated
	// 64 : stopping
	// 80 : stopped
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// The current state of the instance.
	// Valid Values: pending | running | shutting-down | terminated | stopping | stopped
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *InstanceState) Reset() {
	*x = InstanceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceState) ProtoMessage() {}

func (x *InstanceState) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceState.ProtoReflect.Descriptor instead.
func (*InstanceState) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{13}
}

func (x *InstanceState) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *InstanceState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type InstanceStateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The current state of the instance.
	CurrentState *InstanceState `protobuf:"bytes,1,opt,name=current_state,json=currentState,proto3" json:"current_state,omitempty"`
	// The ID of the instance.
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// The previous state of the instance.
	PreviousState *InstanceState `protobuf:"bytes,3,opt,name=previous_state,json=previousState,proto3" json:"previous_state,omitempty"`
}

func (x *InstanceStateChange) Reset() {
	*x = InstanceStateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStateChange) ProtoMessage() {}

func (x *InstanceStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStateChange.ProtoReflect.Descriptor instead.
func (*InstanceStateChange) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{14}
}

func (x *InstanceStateChange) GetCurrentState() *InstanceState {
	if x != nil {
		return x.CurrentState
	}
	return nil
}

func (x *InstanceStateChange) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceStateChange) GetPreviousState() *InstanceState {
	if x != nil {
		return x.PreviousState
	}
	return nil
}

type StartInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the started instances.
	InstanceStateChanges []*InstanceStateChange `protobuf:"bytes,1,rep,name=instance_state_changes,json=instanceStateChanges,proto3" json:"instance_state_changes,omitempty"`
}

func (x *StartInstanceResponse) Reset() {
	*x = StartInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartInstanceResponse) ProtoMessage() {}

func (x *StartInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartInstanceResponse.ProtoReflect.Descriptor instead.
func (*StartInstanceResponse) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{15}
}

func (x *StartInstanceResponse) GetInstanceStateChanges() []*InstanceStateChange {
	if x != nil {
		return x.InstanceStateChanges
	}
	return nil
}

type StopInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId string   `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretKey   string   `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Region      string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	InstanceIds []string `protobuf:"bytes,4,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
}

func (x *StopInstanceRequest) Reset() {
	*x = StopInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInstanceRequest) ProtoMessage() {}

func (x *StopInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInstanceRequest.ProtoReflect.Descriptor instead.
func (*StopInstanceRequest) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{16}
}

func (x *StopInstanceRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *StopInstanceRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *StopInstanceRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *StopInstanceRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

type StopInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the stopped instances.
	InstanceStateChanges []*InstanceStateChange `protobuf:"bytes,1,rep,name=instance_state_changes,json=instanceStateChanges,proto3" json:"instance_state_changes,omitempty"`
}

func (x *StopInstanceResponse) Reset() {
	*x = StopInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopInstanceResponse) ProtoMessage() {}

func (x *StopInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopInstanceResponse.ProtoReflect.Descriptor instead.
func (*StopInstanceResponse) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{17}
}

func (x *StopInstanceResponse) GetInstanceStateChanges() []*InstanceStateChange {
	if x != nil {
		return x.InstanceStateChanges
	}
	return nil
}

type RebootInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId string   `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretKey   string   `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Region      string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	InstanceIds []string `protobuf:"bytes,4,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
}

func (x *RebootInstanceRequest) Reset() {
	*x = RebootInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootInstanceRequest) ProtoMessage() {}

func (x *RebootInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootInstanceRequest.ProtoReflect.Descriptor instead.
func (*RebootInstanceRequest) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{18}
}

func (x *RebootInstanceRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *RebootInstanceRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *RebootInstanceRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *RebootInstanceRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

type RebootInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RebootInstanceResponse) Reset() {
	*x = RebootInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootInstanceResponse) ProtoMessage() {}

func (x *RebootInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootInstanceResponse.ProtoReflect.Descriptor instead.
func (*RebootInstanceResponse) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{19}
}

type DeleteInstanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessKeyId string   `protobuf:"bytes,1,opt,name=access_key_id,json=accessKeyId,proto3" json:"access_key_id,omitempty"`
	SecretKey   string   `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	Region      string   `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	InstanceIds []string `protobuf:"bytes,4,rep,name=instance_ids,json=instanceIds,proto3" json:"instance_ids,omitempty"`
}

func (x *DeleteInstanceRequest) Reset() {
	*x = DeleteInstanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceRequest) ProtoMessage() {}

func (x *DeleteInstanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceRequest.ProtoReflect.Descriptor instead.
func (*DeleteInstanceRequest) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteInstanceRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *DeleteInstanceRequest) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *DeleteInstanceRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *DeleteInstanceRequest) GetInstanceIds() []string {
	if x != nil {
		return x.InstanceIds
	}
	return nil
}

type DeleteInstanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the terminated instances.
	InstanceStateChanges []*InstanceStateChange `protobuf:"bytes,1,rep,name=instance_state_changes,json=instanceStateChanges,proto3" json:"instance_state_changes,omitempty"`
}

func (x *DeleteInstanceResponse) Reset() {
	*x = DeleteInstanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInstanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInstanceResponse) ProtoMessage() {}

func (x *DeleteInstanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInstanceResponse.ProtoReflect.Descriptor instead.
func (*DeleteInstanceResponse) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteInstanceResponse) GetInstanceStateChanges() []*InstanceStateChange {
	if x != nil {
		return x.InstanceStateChanges
	}
	return nil
}

type InstanceObj_CpuOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of CPU cores for the instance.
	CoreCount int32 `protobuf:"varint,1,opt,name=core_count,json=coreCount,proto3" json:"core_count,omitempty"`
	// The number of threads per CPU core.
	ThreadsPerCount int32 `protobuf:"varint,2,opt,name=threads_per_count,json=threadsPerCount,proto3" json:"threads_per_count,omitempty"`
}

func (x *InstanceObj_CpuOptions) Reset() {
	*x = InstanceObj_CpuOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceObj_CpuOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceObj_CpuOptions) ProtoMessage() {}

func (x *InstanceObj_CpuOptions) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceObj_CpuOptions.ProtoReflect.Descriptor instead.
func (*InstanceObj_CpuOptions) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{4, 0}
}

func (x *InstanceObj_CpuOptions) GetCoreCount() int32 {
	if x != nil {
		return x.CoreCount
	}
	return 0
}

func (x *InstanceObj_CpuOptions) GetThreadsPerCount() int32 {
	if x != nil {
		return x.ThreadsPerCount
	}
	return 0
}

// The monitoring for the instance.
type InstanceObj_Monitoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *InstanceObj_Monitoring) Reset() {
	*x = InstanceObj_Monitoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceObj_Monitoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceObj_Monitoring) ProtoMessage() {}

func (x *InstanceObj_Monitoring) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceObj_Monitoring.ProtoReflect.Descriptor instead.
func (*InstanceObj_Monitoring) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{4, 1}
}

func (x *InstanceObj_Monitoring) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type InstanceObj_PrivateDnsNameOptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
	EnableResourceNameDnsAaaaRecord bool `protobuf:"varint,1,opt,name=enable_resource_name_dns_aaaa_record,json=enableResourceNameDnsAaaaRecord,proto3" json:"enable_resource_name_dns_aaaa_record,omitempty"`
	// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
	EnableResourceNameDnsARecord bool `protobuf:"varint,2,opt,name=enable_resource_name_dns_a_record,json=enableResourceNameDnsARecord,proto3" json:"enable_resource_name_dns_a_record,omitempty"`
	// The type of hostname to assign to an instance.
	// Valid Values: ip-name | resource-name
	HostnameType string `protobuf:"bytes,3,opt,name=hostname_type,json=hostnameType,proto3" json:"hostname_type,omitempty"`
}

func (x *InstanceObj_PrivateDnsNameOptionsResponse) Reset() {
	*x = InstanceObj_PrivateDnsNameOptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceObj_PrivateDnsNameOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceObj_PrivateDnsNameOptionsResponse) ProtoMessage() {}

func (x *InstanceObj_PrivateDnsNameOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceObj_PrivateDnsNameOptionsResponse.ProtoReflect.Descriptor instead.
func (*InstanceObj_PrivateDnsNameOptionsResponse) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{4, 2}
}

func (x *InstanceObj_PrivateDnsNameOptionsResponse) GetEnableResourceNameDnsAaaaRecord() bool {
	if x != nil {
		return x.EnableResourceNameDnsAaaaRecord
	}
	return false
}

func (x *InstanceObj_PrivateDnsNameOptionsResponse) GetEnableResourceNameDnsARecord() bool {
	if x != nil {
		return x.EnableResourceNameDnsARecord
	}
	return false
}

func (x *InstanceObj_PrivateDnsNameOptionsResponse) GetHostnameType() string {
	if x != nil {
		return x.HostnameType
	}
	return ""
}

type ListInstanceResponse_Reservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// [EC2-Classic only] The security groups.
	GroupSet []*GroupIdentifier `protobuf:"bytes,1,rep,name=group_set,json=groupSet,proto3" json:"group_set,omitempty"`
	// The instances.
	InstancesSet []*InstanceObj `protobuf:"bytes,2,rep,name=instancesSet,proto3" json:"instancesSet,omitempty"`
	// The ID of the AWS account that owns the reservation.
	OwnerId string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	// The ID of the requester that launched the instances on your behalf (for example, AWS Management Console or Auto Scaling).
	RequesterId string `protobuf:"bytes,4,opt,name=requester_id,json=requesterId,proto3" json:"requester_id,omitempty"`
	// The ID of the reservation.
	ReservationId string `protobuf:"bytes,5,opt,name=reservation_id,json=reservationId,proto3" json:"reservation_id,omitempty"`
}

func (x *ListInstanceResponse_Reservation) Reset() {
	*x = ListInstanceResponse_Reservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceResponse_Reservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceResponse_Reservation) ProtoMessage() {}

func (x *ListInstanceResponse_Reservation) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceResponse_Reservation.ProtoReflect.Descriptor instead.
func (*ListInstanceResponse_Reservation) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ListInstanceResponse_Reservation) GetGroupSet() []*GroupIdentifier {
	if x != nil {
		return x.GroupSet
	}
	return nil
}

func (x *ListInstanceResponse_Reservation) GetInstancesSet() []*InstanceObj {
	if x != nil {
		return x.InstancesSet
	}
	return nil
}

func (x *ListInstanceResponse_Reservation) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *ListInstanceResponse_Reservation) GetRequesterId() string {
	if x != nil {
		return x.RequesterId
	}
	return ""
}

func (x *ListInstanceResponse_Reservation) GetReservationId() string {
	if x != nil {
		return x.ReservationId
	}
	return ""
}

type ListRegionResponse_Region struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptInStatus    string `protobuf:"bytes,1,opt,name=opt_in_status,json=optInStatus,proto3" json:"opt_in_status,omitempty"`
	RegionEndPoint string `protobuf:"bytes,2,opt,name=region_end_point,json=regionEndPoint,proto3" json:"region_end_point,omitempty"`
	RegionName     string `protobuf:"bytes,3,opt,name=region_name,json=regionName,proto3" json:"region_name,omitempty"`
}

func (x *ListRegionResponse_Region) Reset() {
	*x = ListRegionResponse_Region{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRegionResponse_Region) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRegionResponse_Region) ProtoMessage() {}

func (x *ListRegionResponse_Region) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRegionResponse_Region.ProtoReflect.Descriptor instead.
func (*ListRegionResponse_Region) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListRegionResponse_Region) GetOptInStatus() string {
	if x != nil {
		return x.OptInStatus
	}
	return ""
}

func (x *ListRegionResponse_Region) GetRegionEndPoint() string {
	if x != nil {
		return x.RegionEndPoint
	}
	return ""
}

func (x *ListRegionResponse_Region) GetRegionName() string {
	if x != nil {
		return x.RegionName
	}
	return ""
}

type ListImageResponse_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The architecture of the image.
	// Valid Values: i386 | x86_64 | arm64 | x86_64_mac
	Architecture string `protobuf:"bytes,1,opt,name=architecture,proto3" json:"architecture,omitempty"`
	// The boot mode of the image
	// Valid Values: legacy-bios | uefi
	BootMode string `protobuf:"bytes,2,opt,name=boot_mode,json=bootMode,proto3" json:"boot_mode,omitempty"`
	// The date and time the image was created.
	CreationDate string `protobuf:"bytes,3,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	// The date and time to deprecate the AMI, in UTC, in the following format: YYYY-MM-DDTHH:MM:SSZ.
	DeprecationTime string `protobuf:"bytes,4,opt,name=deprecation_time,json=deprecationTime,proto3" json:"deprecation_time,omitempty"`
	// The description of the AMI that was provided during image creation.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Specifies whether enhanced networking with ENA is enabled.
	EnaSupport bool `protobuf:"varint,6,opt,name=ena_support,json=enaSupport,proto3" json:"ena_support,omitempty"`
	// The hypervisor type of the image.
	// Valid Values: ovm | xen
	Hypervisor string `protobuf:"bytes,7,opt,name=hypervisor,proto3" json:"hypervisor,omitempty"`
	// The ID of the AMI.
	ImageId string `protobuf:"bytes,8,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	// The location of the AMI.
	ImageLocation string `protobuf:"bytes,9,opt,name=image_location,json=imageLocation,proto3" json:"image_location,omitempty"`
	// The AWS account alias (for example, amazon, self) or the AWS account ID of the AMI owner.
	ImageOwnerAlias string `protobuf:"bytes,10,opt,name=image_owner_alias,json=imageOwnerAlias,proto3" json:"image_owner_alias,omitempty"`
	// The ID of the AWS account that owns the image.
	ImageOwnerId string `protobuf:"bytes,11,opt,name=image_owner_id,json=imageOwnerId,proto3" json:"image_owner_id,omitempty"`
	// The current state of the AMI. If the state is available, the image is successfully registered and can be used to launch an instance.
	// Valid Values: pending | available | invalid | deregistered | transient | failed | error
	ImageState string `protobuf:"bytes,12,opt,name=image_state,json=imageState,proto3" json:"image_state,omitempty"`
	// The type of image.
	// Valid Values: machine | kernel | ramdisk
	ImageType string `protobuf:"bytes,13,opt,name=image_type,json=imageType,proto3" json:"image_type,omitempty"`
	// Indicates whether the image has public launch permissions. The value is true if this image has public launch permissions or false if it has only implicit and explicit launch permissions.
	IsPublic bool `protobuf:"varint,14,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	// The kernel associated with the image, if any. Only applicable for machine images.
	KernelId string `protobuf:"bytes,15,opt,name=kernel_id,json=kernelId,proto3" json:"kernel_id,omitempty"`
	// The name of the AMI that was provided during image creation.
	Name string `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	// This value is set to windows for Windows AMIs; otherwise, it is blank.
	// Valid Values: Windows
	Platform string `protobuf:"bytes,17,opt,name=platform,proto3" json:"platform,omitempty"`
	// The platform details associated with the billing code of the AMI.
	PlatformDetail string `protobuf:"bytes,18,opt,name=platform_detail,json=platformDetail,proto3" json:"platform_detail,omitempty"`
}

func (x *ListImageResponse_Image) Reset() {
	*x = ListImageResponse_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImageResponse_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageResponse_Image) ProtoMessage() {}

func (x *ListImageResponse_Image) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageResponse_Image.ProtoReflect.Descriptor instead.
func (*ListImageResponse_Image) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListImageResponse_Image) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *ListImageResponse_Image) GetBootMode() string {
	if x != nil {
		return x.BootMode
	}
	return ""
}

func (x *ListImageResponse_Image) GetCreationDate() string {
	if x != nil {
		return x.CreationDate
	}
	return ""
}

func (x *ListImageResponse_Image) GetDeprecationTime() string {
	if x != nil {
		return x.DeprecationTime
	}
	return ""
}

func (x *ListImageResponse_Image) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListImageResponse_Image) GetEnaSupport() bool {
	if x != nil {
		return x.EnaSupport
	}
	return false
}

func (x *ListImageResponse_Image) GetHypervisor() string {
	if x != nil {
		return x.Hypervisor
	}
	return ""
}

func (x *ListImageResponse_Image) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *ListImageResponse_Image) GetImageLocation() string {
	if x != nil {
		return x.ImageLocation
	}
	return ""
}

func (x *ListImageResponse_Image) GetImageOwnerAlias() string {
	if x != nil {
		return x.ImageOwnerAlias
	}
	return ""
}

func (x *ListImageResponse_Image) GetImageOwnerId() string {
	if x != nil {
		return x.ImageOwnerId
	}
	return ""
}

func (x *ListImageResponse_Image) GetImageState() string {
	if x != nil {
		return x.ImageState
	}
	return ""
}

func (x *ListImageResponse_Image) GetImageType() string {
	if x != nil {
		return x.ImageType
	}
	return ""
}

func (x *ListImageResponse_Image) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

func (x *ListImageResponse_Image) GetKernelId() string {
	if x != nil {
		return x.KernelId
	}
	return ""
}

func (x *ListImageResponse_Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListImageResponse_Image) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ListImageResponse_Image) GetPlatformDetail() string {
	if x != nil {
		return x.PlatformDetail
	}
	return ""
}

type ListInstanceTypeResponse_InstanceType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether auto recovery is supported.
	AutoRecoverySupported bool `protobuf:"varint,1,opt,name=auto_recovery_supported,json=autoRecoverySupported,proto3" json:"auto_recovery_supported,omitempty"`
	// Indicates whether the instance is a bare metal instance type.
	BareMetal bool `protobuf:"varint,2,opt,name=bare_metal,json=bareMetal,proto3" json:"bare_metal,omitempty"`
	// Indicates whether the instance type is a burstable performance instance type.
	BurstablePerformanceSupported bool `protobuf:"varint,3,opt,name=burstable_performance_supported,json=burstablePerformanceSupported,proto3" json:"burstable_performance_supported,omitempty"`
	// Indicates whether the instance type is current generation.
	CurrentGeneration bool `protobuf:"varint,4,opt,name=current_generation,json=currentGeneration,proto3" json:"current_generation,omitempty"`
	// Indicates whether Dedicated Hosts are supported on the instance type.
	DedicatedHostsSupported bool `protobuf:"varint,5,opt,name=dedicated_hosts_supported,json=dedicatedHostsSupported,proto3" json:"dedicated_hosts_supported,omitempty"`
	// Indicates whether On-Demand hibernation is supported.
	HibernationSupported bool `protobuf:"varint,6,opt,name=hibernation_supported,json=hibernationSupported,proto3" json:"hibernation_supported,omitempty"`
	// The hypervisor for the instance type.
	// Valid Values: nitro | xen
	Hypervisor string `protobuf:"bytes,7,opt,name=hypervisor,proto3" json:"hypervisor,omitempty"`
	// Describes the Inference accelerator settings for the instance type.
	InferenceAcceleratorInfo *ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo `protobuf:"bytes,8,opt,name=inferenceAcceleratorInfo,proto3" json:"inferenceAcceleratorInfo,omitempty"`
	// Describes the instance storage for the instance type.
	InstanceStorageInfo *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo `protobuf:"bytes,9,opt,name=instance_storage_info,json=instanceStorageInfo,proto3" json:"instance_storage_info,omitempty"`
	// Indicates whether instance storage is supported.
	InstanceStorageSupported bool `protobuf:"varint,10,opt,name=instance_storage_supported,json=instanceStorageSupported,proto3" json:"instance_storage_supported,omitempty"`
	// The instance type.
	InstanceType string `protobuf:"bytes,11,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	// Describes the memory for the instance type.
	MemoryInfo *ListInstanceTypeResponse_InstanceType_MemoryInfo `protobuf:"bytes,12,opt,name=memory_info,json=memoryInfo,proto3" json:"memory_info,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType) Reset() {
	*x = ListInstanceTypeResponse_InstanceType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ListInstanceTypeResponse_InstanceType) GetAutoRecoverySupported() bool {
	if x != nil {
		return x.AutoRecoverySupported
	}
	return false
}

func (x *ListInstanceTypeResponse_InstanceType) GetBareMetal() bool {
	if x != nil {
		return x.BareMetal
	}
	return false
}

func (x *ListInstanceTypeResponse_InstanceType) GetBurstablePerformanceSupported() bool {
	if x != nil {
		return x.BurstablePerformanceSupported
	}
	return false
}

func (x *ListInstanceTypeResponse_InstanceType) GetCurrentGeneration() bool {
	if x != nil {
		return x.CurrentGeneration
	}
	return false
}

func (x *ListInstanceTypeResponse_InstanceType) GetDedicatedHostsSupported() bool {
	if x != nil {
		return x.DedicatedHostsSupported
	}
	return false
}

func (x *ListInstanceTypeResponse_InstanceType) GetHibernationSupported() bool {
	if x != nil {
		return x.HibernationSupported
	}
	return false
}

func (x *ListInstanceTypeResponse_InstanceType) GetHypervisor() string {
	if x != nil {
		return x.Hypervisor
	}
	return ""
}

func (x *ListInstanceTypeResponse_InstanceType) GetInferenceAcceleratorInfo() *ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo {
	if x != nil {
		return x.InferenceAcceleratorInfo
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType) GetInstanceStorageInfo() *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo {
	if x != nil {
		return x.InstanceStorageInfo
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType) GetInstanceStorageSupported() bool {
	if x != nil {
		return x.InstanceStorageSupported
	}
	return false
}

func (x *ListInstanceTypeResponse_InstanceType) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *ListInstanceTypeResponse_InstanceType) GetMemoryInfo() *ListInstanceTypeResponse_InstanceType_MemoryInfo {
	if x != nil {
		return x.MemoryInfo
	}
	return nil
}

type ListInstanceTypeResponse_InstanceType_GpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the GPU accelerators for the instance type.
	Gpus []*ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo `protobuf:"bytes,6,rep,name=gpus,proto3" json:"gpus,omitempty"`
	// The total size of the memory for the GPU accelerators for the instance type, in MiB.
	TotalGpuMemoryInMib int32 `protobuf:"varint,7,opt,name=total_gpu_memory_in_mib,json=totalGpuMemoryInMib,proto3" json:"total_gpu_memory_in_mib,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_GpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_GpuInfo) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_GpuInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_GpuInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 0}
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo) GetGpus() []*ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo {
	if x != nil {
		return x.Gpus
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo) GetTotalGpuMemoryInMib() int32 {
	if x != nil {
		return x.TotalGpuMemoryInMib
	}
	return 0
}

type ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the Inference accelerators for the instance type.
	Accelerators []*ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo `protobuf:"bytes,1,rep,name=accelerators,proto3" json:"accelerators,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 1}
}

func (x *ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo) GetAccelerators() []*ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo {
	if x != nil {
		return x.Accelerators
	}
	return nil
}

type ListInstanceTypeResponse_InstanceType_InstanceStorageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the disks that are available for the instance type.
	Disks []*ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"`
	// Indicates whether data is encrypted at rest.
	// Valid Values: unsupported | required
	EncryptionSupport string `protobuf:"bytes,2,opt,name=encryption_support,json=encryptionSupport,proto3" json:"encryption_support,omitempty"`
	// Indicates whether non-volatile memory express (NVMe) is supported.
	// Valid Values: unsupported | supported | required
	NvmeSupport string `protobuf:"bytes,3,opt,name=nvme_support,json=nvmeSupport,proto3" json:"nvme_support,omitempty"`
	// The total size of the disks, in GB.
	TotalSizeInGb int64 `protobuf:"varint,4,opt,name=total_size_in_gb,json=totalSizeInGb,proto3" json:"total_size_in_gb,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_InstanceStorageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_InstanceStorageInfo) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_InstanceStorageInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_InstanceStorageInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 2}
}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo) GetDisks() []*ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo) GetEncryptionSupport() string {
	if x != nil {
		return x.EncryptionSupport
	}
	return ""
}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo) GetNvmeSupport() string {
	if x != nil {
		return x.NvmeSupport
	}
	return ""
}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo) GetTotalSizeInGb() int64 {
	if x != nil {
		return x.TotalSizeInGb
	}
	return 0
}

type ListInstanceTypeResponse_InstanceType_MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeInMib int64 `protobuf:"varint,1,opt,name=size_in_mib,json=sizeInMib,proto3" json:"size_in_mib,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_MemoryInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_MemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_MemoryInfo) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType_MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_MemoryInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_MemoryInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 3}
}

func (x *ListInstanceTypeResponse_InstanceType_MemoryInfo) GetSizeInMib() int64 {
	if x != nil {
		return x.SizeInMib
	}
	return 0
}

type ListInstanceTypeResponse_InstanceType_NetworkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the default network card, starting at 0.
	DefaultNetworkCardIndex int32 `protobuf:"varint,1,opt,name=default_network_card_index,json=defaultNetworkCardIndex,proto3" json:"default_network_card_index,omitempty"`
	// Describes the Elastic Fabric Adapters for the instance type.
	EfaInfo *ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo `protobuf:"bytes,2,opt,name=efa_info,json=efaInfo,proto3" json:"efa_info,omitempty"`
	// Indicates whether Elastic Fabric Adapter (EFA) is supported.
	EfaSupported bool `protobuf:"varint,3,opt,name=efa_supported,json=efaSupported,proto3" json:"efa_supported,omitempty"`
	// Indicates whether Elastic Network Adapter (ENA) is supported.
	// Valid Values: unsupported | supported | required
	EnaSupport string `protobuf:"bytes,4,opt,name=ena_support,json=enaSupport,proto3" json:"ena_support,omitempty"`
	// Indicates whether the instance type automatically encrypts in-transit traffic between instances.
	EncryptionInTransitSupported bool `protobuf:"varint,5,opt,name=encryption_in_transit_supported,json=encryptionInTransitSupported,proto3" json:"encryption_in_transit_supported,omitempty"`
	// The maximum number of IPv4 addresses per network interface.
	Ipv4AddressesPerInterface int32 `protobuf:"varint,6,opt,name=ipv4_addresses_per_interface,json=ipv4AddressesPerInterface,proto3" json:"ipv4_addresses_per_interface,omitempty"`
	// The maximum number of IPv6 addresses per network interface.
	Ipv6AddressesPerInterface int32 `protobuf:"varint,7,opt,name=ipv6_addresses_per_interface,json=ipv6AddressesPerInterface,proto3" json:"ipv6_addresses_per_interface,omitempty"`
	// Indicates whether IPv6 is supported.
	Ipv6Supported bool `protobuf:"varint,8,opt,name=ipv6_supported,json=ipv6Supported,proto3" json:"ipv6_supported,omitempty"`
	// The maximum number of physical network cards that can be allocated to the instance.
	MaximumNetworkCards int32 `protobuf:"varint,9,opt,name=maximum_network_cards,json=maximumNetworkCards,proto3" json:"maximum_network_cards,omitempty"`
	// The maximum number of network interfaces for the instance type.
	MaximumNetworkInterfaces int32 `protobuf:"varint,10,opt,name=maximum_network_interfaces,json=maximumNetworkInterfaces,proto3" json:"maximum_network_interfaces,omitempty"`
	// Describes the network settings for the instance type.
	NetworkInfo *ListInstanceTypeResponse_InstanceType_NetworkInfo `protobuf:"bytes,11,opt,name=networkInfo,proto3" json:"networkInfo,omitempty"`
	// Describes the placement group settings for the instance type.
	PlacementGroupInfo *ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo `protobuf:"bytes,12,opt,name=placement_group_info,json=placementGroupInfo,proto3" json:"placement_group_info,omitempty"`
	// Describes the processor.
	ProcessorInfo *ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo `protobuf:"bytes,13,opt,name=processor_info,json=processorInfo,proto3" json:"processor_info,omitempty"`
	// The supported boot modes. For more information
	// Valid Values: legacy-bios | uefi
	SupportedBootModes []string `protobuf:"bytes,14,rep,name=supported_boot_modes,json=supportedBootModes,proto3" json:"supported_boot_modes,omitempty"`
	// The supported root device types.
	// Valid Values: ebs | instance-store
	SupportedRootDeviceTypes []string `protobuf:"bytes,15,rep,name=supported_root_device_types,json=supportedRootDeviceTypes,proto3" json:"supported_root_device_types,omitempty"`
	// Indicates whether the instance type is offered for spot or On-Demand.
	// Valid Values: spot | on-demand
	SupportedUsageClasses []string `protobuf:"bytes,16,rep,name=supported_usage_classes,json=supportedUsageClasses,proto3" json:"supported_usage_classes,omitempty"`
	// The supported virtualization types.
	// Valid Values: hvm | paravirtual
	SupportedVirtualizationTypes []string `protobuf:"bytes,17,rep,name=supported_virtualization_types,json=supportedVirtualizationTypes,proto3" json:"supported_virtualization_types,omitempty"`
	// Describes the vCPU configurations for the instance type.
	VCpuInfo *ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo `protobuf:"bytes,18,opt,name=v_cpu_info,json=vCpuInfo,proto3" json:"v_cpu_info,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_NetworkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_NetworkInfo) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_NetworkInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_NetworkInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 4}
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetDefaultNetworkCardIndex() int32 {
	if x != nil {
		return x.DefaultNetworkCardIndex
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetEfaInfo() *ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo {
	if x != nil {
		return x.EfaInfo
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetEfaSupported() bool {
	if x != nil {
		return x.EfaSupported
	}
	return false
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetEnaSupport() string {
	if x != nil {
		return x.EnaSupport
	}
	return ""
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetEncryptionInTransitSupported() bool {
	if x != nil {
		return x.EncryptionInTransitSupported
	}
	return false
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetIpv4AddressesPerInterface() int32 {
	if x != nil {
		return x.Ipv4AddressesPerInterface
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetIpv6AddressesPerInterface() int32 {
	if x != nil {
		return x.Ipv6AddressesPerInterface
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetIpv6Supported() bool {
	if x != nil {
		return x.Ipv6Supported
	}
	return false
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetMaximumNetworkCards() int32 {
	if x != nil {
		return x.MaximumNetworkCards
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetMaximumNetworkInterfaces() int32 {
	if x != nil {
		return x.MaximumNetworkInterfaces
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetNetworkInfo() *ListInstanceTypeResponse_InstanceType_NetworkInfo {
	if x != nil {
		return x.NetworkInfo
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetPlacementGroupInfo() *ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo {
	if x != nil {
		return x.PlacementGroupInfo
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetProcessorInfo() *ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo {
	if x != nil {
		return x.ProcessorInfo
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetSupportedBootModes() []string {
	if x != nil {
		return x.SupportedBootModes
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetSupportedRootDeviceTypes() []string {
	if x != nil {
		return x.SupportedRootDeviceTypes
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetSupportedUsageClasses() []string {
	if x != nil {
		return x.SupportedUsageClasses
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetSupportedVirtualizationTypes() []string {
	if x != nil {
		return x.SupportedVirtualizationTypes
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo) GetVCpuInfo() *ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo {
	if x != nil {
		return x.VCpuInfo
	}
	return nil
}

type ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of GPUs for the instance type.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The manufacturer of the GPU accelerator.
	Manufacturer string `protobuf:"bytes,2,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// Describes the memory available to the GPU accelerator.
	MemoryInfo *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo `protobuf:"bytes,3,opt,name=memory_info,json=memoryInfo,proto3" json:"memory_info,omitempty"`
	// The name of the GPU accelerator.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 0, 0}
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo) GetMemoryInfo() *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo {
	if x != nil {
		return x.MemoryInfo
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeInMib int32 `protobuf:"varint,1,opt,name=size_in_mib,json=sizeInMib,proto3" json:"size_in_mib,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo) ProtoMessage() {
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 0, 0, 0}
}

func (x *ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo) GetSizeInMib() int32 {
	if x != nil {
		return x.SizeInMib
	}
	return 0
}

type ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of Inference accelerators for the instance type.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The manufacturer of the Inference accelerator.
	Manufacturer string `protobuf:"bytes,2,opt,name=manufacturer,proto3" json:"manufacturer,omitempty"`
	// The name of the Inference accelerator.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo) ProtoMessage() {
}

func (x *ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 1, 0}
}

func (x *ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of disks with this configuration.
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The size of the disk in GB.
	SizeInGb int64 `protobuf:"varint,2,opt,name=size_in_gb,json=sizeInGb,proto3" json:"size_in_gb,omitempty"`
	// The type of disk.
	// Valid Values: hdd | ssd
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 2, 0}
}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo) GetSizeInGb() int64 {
	if x != nil {
		return x.SizeInGb
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of Elastic Fabric Adapters for the instance type.
	MaximumEfaInterfaces int32 `protobuf:"varint,1,opt,name=maximum_efa_interfaces,json=maximumEfaInterfaces,proto3" json:"maximum_efa_interfaces,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 4, 0}
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo) GetMaximumEfaInterfaces() int32 {
	if x != nil {
		return x.MaximumEfaInterfaces
	}
	return 0
}

type ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of network interfaces for the network card.
	MaximumNetworkInterfaces int32 `protobuf:"varint,1,opt,name=maximum_network_interfaces,json=maximumNetworkInterfaces,proto3" json:"maximum_network_interfaces,omitempty"`
	// The index of the network card.
	NetworkCardIndex int32 `protobuf:"varint,2,opt,name=network_card_index,json=networkCardIndex,proto3" json:"network_card_index,omitempty"`
	// The network performance of the network card.
	NetworkPerformance string `protobuf:"bytes,3,opt,name=network_performance,json=networkPerformance,proto3" json:"network_performance,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 4, 1}
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo) GetMaximumNetworkInterfaces() int32 {
	if x != nil {
		return x.MaximumNetworkInterfaces
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo) GetNetworkCardIndex() int32 {
	if x != nil {
		return x.NetworkCardIndex
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo) GetNetworkPerformance() string {
	if x != nil {
		return x.NetworkPerformance
	}
	return ""
}

type ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The supported placement group types.
	// Valid Values: cluster | partition | spread
	SupportedStrategies []string `protobuf:"bytes,1,rep,name=supported_strategies,json=supportedStrategies,proto3" json:"supported_strategies,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 4, 2}
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo) GetSupportedStrategies() []string {
	if x != nil {
		return x.SupportedStrategies
	}
	return nil
}

type ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The architectures supported by the instance type.
	// Valid Values: i386 | x86_64 | arm64 | x86_64_mac
	SupportedArchitectures []string `protobuf:"bytes,1,rep,name=supported_architectures,json=supportedArchitectures,proto3" json:"supported_architectures,omitempty"`
	// The speed of the processor, in GHz.
	SustainedClockSpeedInGhz float32 `protobuf:"fixed32,2,opt,name=sustained_clock_speed_in_ghz,json=sustainedClockSpeedInGhz,proto3" json:"sustained_clock_speed_in_ghz,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 4, 3}
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo) GetSupportedArchitectures() []string {
	if x != nil {
		return x.SupportedArchitectures
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo) GetSustainedClockSpeedInGhz() float32 {
	if x != nil {
		return x.SustainedClockSpeedInGhz
	}
	return 0
}

// Describes the vCPU configurations for the instance type.
type ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default number of cores for the instance type.
	DefaultCores int32 `protobuf:"varint,1,opt,name=default_cores,json=defaultCores,proto3" json:"default_cores,omitempty"`
	// The default number of threads per core for the instance type.
	DefaultThreadsPerCore int32 `protobuf:"varint,2,opt,name=default_threads_per_core,json=defaultThreadsPerCore,proto3" json:"default_threads_per_core,omitempty"`
	// The default number of vCPUs for the instance type.
	DefaultVCpus int32 `protobuf:"varint,3,opt,name=default_v_cpus,json=defaultVCpus,proto3" json:"default_v_cpus,omitempty"`
	// The valid number of cores that can be configured for the instance type.
	ValidCores []int32 `protobuf:"varint,4,rep,packed,name=valid_cores,json=validCores,proto3" json:"valid_cores,omitempty"`
	// The valid number of threads per core that can be configured for the instance type.
	ValidThreadsPercOre []int32 `protobuf:"varint,5,rep,packed,name=valid_threads_perc_ore,json=validThreadsPercOre,proto3" json:"valid_threads_perc_ore,omitempty"`
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo) Reset() {
	*x = ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo) ProtoMessage() {}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_services_aws_api_instance_v1_instance_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo.ProtoReflect.Descriptor instead.
func (*ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo) Descriptor() ([]byte, []int) {
	return file_services_aws_api_instance_v1_instance_proto_rawDescGZIP(), []int{11, 0, 4, 4}
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo) GetDefaultCores() int32 {
	if x != nil {
		return x.DefaultCores
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo) GetDefaultThreadsPerCore() int32 {
	if x != nil {
		return x.DefaultThreadsPerCore
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo) GetDefaultVCpus() int32 {
	if x != nil {
		return x.DefaultVCpus
	}
	return 0
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo) GetValidCores() []int32 {
	if x != nil {
		return x.ValidCores
	}
	return nil
}

func (x *ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo) GetValidThreadsPercOre() []int32 {
	if x != nil {
		return x.ValidThreadsPercOre
	}
	return nil
}

var File_services_aws_api_instance_v1_instance_proto protoreflect.FileDescriptor

var file_services_aws_api_instance_v1_instance_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x77, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61,
	0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x22, 0x85,
	0x03, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x70, 0x75,
	0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x50, 0x65, 0x72, 0x43,
	0x6f, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x69,
	0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xa7, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x53, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xb0, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x4b, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xd6, 0x0b, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x62, 0x6a,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x6d, 0x69, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x6d, 0x69, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x63,
	0x70, 0x75, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x2e, 0x43,
	0x70, 0x75, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x62, 0x73, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x62,
	0x73, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x61, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x65, 0x6e, 0x61, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76,
	0x36, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x47, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4f, 0x62, 0x6a, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6e, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1d,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x62,
	0x6a, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x1d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61,
	0x6d, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x61, 0x6d, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x6f, 0x6f, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x57, 0x0a,
	0x0a, 0x43, 0x70, 0x75, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x50, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x22, 0x0a, 0x0a, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0xdc, 0x01, 0x0a, 0x1d, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x24,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x61, 0x61, 0x61, 0x61, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x6e,
	0x73, 0x41, 0x61, 0x61, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x47, 0x0a, 0x21, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x61, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x6e, 0x73, 0x41, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x87, 0x03, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x5a, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x1a, 0xf3, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0c,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4f, 0x62, 0x6a,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x53, 0x65, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xd3, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x77, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x49, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x6d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x22, 0xba, 0x05, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x1a, 0xe2, 0x04, 0x0a, 0x05, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x61, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xb4, 0x01,
	0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x93, 0x20, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x1a, 0xd9,
	0x1e, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x72, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x61, 0x72,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x1f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1d, 0x62, 0x75, 0x72, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x19, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x68, 0x69, 0x62,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x68, 0x69, 0x62, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x8b,
	0x01, 0x0a, 0x18, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x18, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x7e, 0x0a, 0x15,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x1a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x62, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0xbc, 0x03, 0x0a, 0x07, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x60, 0x0a, 0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x70,
	0x75, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x67, 0x70, 0x75,
	0x73, 0x12, 0x34, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x62, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x49, 0x6e, 0x4d, 0x69, 0x62, 0x1a, 0x98, 0x02, 0x0a, 0x0d, 0x47, 0x70, 0x75, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x12, 0x81, 0x01, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x60, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x47, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x70, 0x75, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x47, 0x70, 0x75, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x35, 0x0a, 0x13, 0x47,
	0x70, 0x75, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x4d,
	0x69, 0x62, 0x1a, 0x89, 0x02, 0x0a, 0x18, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x87, 0x01, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x63, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x63, 0x0a, 0x13, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0xcf,
	0x02, 0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x69, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x53, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x76, 0x6d, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x76, 0x6d, 0x65, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x1a, 0x52, 0x0a, 0x08,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x62, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x1a, 0x2c, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x69, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x4d, 0x69, 0x62, 0x1a, 0xc9,
	0x0f, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b,
	0x0a, 0x1a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x65, 0x0a, 0x08, 0x65,
	0x66, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x45, 0x66, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x66, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x66, 0x61, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x66, 0x61, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e,
	0x61, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x1c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x1a,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x18, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x0b, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x87, 0x01, 0x0a, 0x14, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x55, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x77, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x50, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1e,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x1c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x69, 0x0a, 0x0a, 0x76, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x43, 0x70, 0x75, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x76, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3f, 0x0a,
	0x07, 0x45, 0x66, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x65, 0x66, 0x61, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x45, 0x66, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x1a, 0xae,
	0x01, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2f,
	0x0a, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x1a,
	0x47, 0x0a, 0x12, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x1a, 0x88, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x73, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f,
	0x67, 0x68, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x73, 0x75, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x49, 0x6e,
	0x47, 0x68, 0x7a, 0x1a, 0xe4, 0x01, 0x0a, 0x08, 0x56, 0x43, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x5f, 0x63, 0x70, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56,
	0x43, 0x70, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x5f, 0x6f, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x50, 0x65, 0x72, 0x63, 0x4f, 0x72, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x14, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x73, 0x22, 0x37, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x13, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x73, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x72, 0x0a, 0x14, 0x53, 0x74,
	0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x95,
	0x01, 0x0a, 0x15, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x95, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x73, 0x22, 0x74, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x32, 0xe1,
	0x06, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x61, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5e, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5b, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e,
	0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x61, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x2b, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x16, 0x61, 0x77, 0x73, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_aws_api_instance_v1_instance_proto_rawDescOnce sync.Once
	file_services_aws_api_instance_v1_instance_proto_rawDescData = file_services_aws_api_instance_v1_instance_proto_rawDesc
)

func file_services_aws_api_instance_v1_instance_proto_rawDescGZIP() []byte {
	file_services_aws_api_instance_v1_instance_proto_rawDescOnce.Do(func() {
		file_services_aws_api_instance_v1_instance_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_aws_api_instance_v1_instance_proto_rawDescData)
	})
	return file_services_aws_api_instance_v1_instance_proto_rawDescData
}

var file_services_aws_api_instance_v1_instance_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_services_aws_api_instance_v1_instance_proto_goTypes = []interface{}{
	(*CreateInstanceRequest)(nil),                                          // 0: api.instance.v1.CreateInstanceRequest
	(*CreateInstanceResponse)(nil),                                         // 1: api.instance.v1.CreateInstanceResponse
	(*ListInstanceRequest)(nil),                                            // 2: api.instance.v1.ListInstanceRequest
	(*GroupIdentifier)(nil),                                                // 3: api.instance.v1.GroupIdentifier
	(*InstanceObj)(nil),                                                    // 4: api.instance.v1.InstanceObj
	(*ListInstanceResponse)(nil),                                           // 5: api.instance.v1.ListInstanceResponse
	(*ListRegionRequest)(nil),                                              // 6: api.instance.v1.ListRegionRequest
	(*ListRegionResponse)(nil),                                             // 7: api.instance.v1.ListRegionResponse
	(*ListImageRequest)(nil),                                               // 8: api.instance.v1.ListImageRequest
	(*ListImageResponse)(nil),                                              // 9: api.instance.v1.ListImageResponse
	(*ListInstanceTypeRequest)(nil),                                        // 10: api.instance.v1.ListInstanceTypeRequest
	(*ListInstanceTypeResponse)(nil),                                       // 11: api.instance.v1.ListInstanceTypeResponse
	(*StartInstanceRequest)(nil),                                           // 12: api.instance.v1.StartInstanceRequest
	(*InstanceState)(nil),                                                  // 13: api.instance.v1.InstanceState
	(*InstanceStateChange)(nil),                                            // 14: api.instance.v1.InstanceStateChange
	(*StartInstanceResponse)(nil),                                          // 15: api.instance.v1.StartInstanceResponse
	(*StopInstanceRequest)(nil),                                            // 16: api.instance.v1.StopInstanceRequest
	(*StopInstanceResponse)(nil),                                           // 17: api.instance.v1.StopInstanceResponse
	(*RebootInstanceRequest)(nil),                                          // 18: api.instance.v1.RebootInstanceRequest
	(*RebootInstanceResponse)(nil),                                         // 19: api.instance.v1.RebootInstanceResponse
	(*DeleteInstanceRequest)(nil),                                          // 20: api.instance.v1.DeleteInstanceRequest
	(*DeleteInstanceResponse)(nil),                                         // 21: api.instance.v1.DeleteInstanceResponse
	(*InstanceObj_CpuOptions)(nil),                                         // 22: api.instance.v1.InstanceObj.CpuOptions
	(*InstanceObj_Monitoring)(nil),                                         // 23: api.instance.v1.InstanceObj.Monitoring
	(*InstanceObj_PrivateDnsNameOptionsResponse)(nil),                      // 24: api.instance.v1.InstanceObj.PrivateDnsNameOptionsResponse
	(*ListInstanceResponse_Reservation)(nil),                               // 25: api.instance.v1.ListInstanceResponse.Reservation
	(*ListRegionResponse_Region)(nil),                                      // 26: api.instance.v1.ListRegionResponse.Region
	(*ListImageResponse_Image)(nil),                                        // 27: api.instance.v1.ListImageResponse.Image
	(*ListInstanceTypeResponse_InstanceType)(nil),                          // 28: api.instance.v1.ListInstanceTypeResponse.InstanceType
	(*ListInstanceTypeResponse_InstanceType_GpuInfo)(nil),                  // 29: api.instance.v1.ListInstanceTypeResponse.InstanceType.GpuInfo
	(*ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo)(nil), // 30: api.instance.v1.ListInstanceTypeResponse.InstanceType.InferenceAcceleratorInfo
	(*ListInstanceTypeResponse_InstanceType_InstanceStorageInfo)(nil),      // 31: api.instance.v1.ListInstanceTypeResponse.InstanceType.InstanceStorageInfo
	(*ListInstanceTypeResponse_InstanceType_MemoryInfo)(nil),               // 32: api.instance.v1.ListInstanceTypeResponse.InstanceType.MemoryInfo
	(*ListInstanceTypeResponse_InstanceType_NetworkInfo)(nil),              // 33: api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo
	(*ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo)(nil),    // 34: api.instance.v1.ListInstanceTypeResponse.InstanceType.GpuInfo.GpuDeviceInfo
	(*ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo)(nil),    // 35: api.instance.v1.ListInstanceTypeResponse.InstanceType.GpuInfo.GpuDeviceInfo.GpuDeviceMemoryInfo
	(*ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo)(nil), // 36: api.instance.v1.ListInstanceTypeResponse.InstanceType.InferenceAcceleratorInfo.InferenceDeviceInfo
	(*ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo)(nil),                 // 37: api.instance.v1.ListInstanceTypeResponse.InstanceType.InstanceStorageInfo.DiskInfo
	(*ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo)(nil),                          // 38: api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.EfaInfo
	(*ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo)(nil),                  // 39: api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.NetworkCardInfo
	(*ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo)(nil),               // 40: api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.PlacementGroupInfo
	(*ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo)(nil),                    // 41: api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.ProcessorInfo
	(*ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo)(nil),                         // 42: api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.VCpuInfo
}
var file_services_aws_api_instance_v1_instance_proto_depIdxs = []int32{
	22, // 0: api.instance.v1.InstanceObj.cpu_options:type_name -> api.instance.v1.InstanceObj.CpuOptions
	13, // 1: api.instance.v1.InstanceObj.instance_state:type_name -> api.instance.v1.InstanceState
	23, // 2: api.instance.v1.InstanceObj.monitoring:type_name -> api.instance.v1.InstanceObj.Monitoring
	24, // 3: api.instance.v1.InstanceObj.privateDnsNameOptionsResponse:type_name -> api.instance.v1.InstanceObj.PrivateDnsNameOptionsResponse
	25, // 4: api.instance.v1.ListInstanceResponse.reservation_set:type_name -> api.instance.v1.ListInstanceResponse.Reservation
	26, // 5: api.instance.v1.ListRegionResponse.regions:type_name -> api.instance.v1.ListRegionResponse.Region
	27, // 6: api.instance.v1.ListImageResponse.images:type_name -> api.instance.v1.ListImageResponse.Image
	28, // 7: api.instance.v1.ListInstanceTypeResponse.instance_types:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType
	13, // 8: api.instance.v1.InstanceStateChange.current_state:type_name -> api.instance.v1.InstanceState
	13, // 9: api.instance.v1.InstanceStateChange.previous_state:type_name -> api.instance.v1.InstanceState
	14, // 10: api.instance.v1.StartInstanceResponse.instance_state_changes:type_name -> api.instance.v1.InstanceStateChange
	14, // 11: api.instance.v1.StopInstanceResponse.instance_state_changes:type_name -> api.instance.v1.InstanceStateChange
	14, // 12: api.instance.v1.DeleteInstanceResponse.instance_state_changes:type_name -> api.instance.v1.InstanceStateChange
	3,  // 13: api.instance.v1.ListInstanceResponse.Reservation.group_set:type_name -> api.instance.v1.GroupIdentifier
	4,  // 14: api.instance.v1.ListInstanceResponse.Reservation.instancesSet:type_name -> api.instance.v1.InstanceObj
	30, // 15: api.instance.v1.ListInstanceTypeResponse.InstanceType.inferenceAcceleratorInfo:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType.InferenceAcceleratorInfo
	31, // 16: api.instance.v1.ListInstanceTypeResponse.InstanceType.instance_storage_info:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType.InstanceStorageInfo
	32, // 17: api.instance.v1.ListInstanceTypeResponse.InstanceType.memory_info:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType.MemoryInfo
	34, // 18: api.instance.v1.ListInstanceTypeResponse.InstanceType.GpuInfo.gpus:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType.GpuInfo.GpuDeviceInfo
	36, // 19: api.instance.v1.ListInstanceTypeResponse.InstanceType.InferenceAcceleratorInfo.accelerators:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType.InferenceAcceleratorInfo.InferenceDeviceInfo
	37, // 20: api.instance.v1.ListInstanceTypeResponse.InstanceType.InstanceStorageInfo.disks:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType.InstanceStorageInfo.DiskInfo
	38, // 21: api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.efa_info:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.EfaInfo
	33, // 22: api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.networkInfo:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo
	40, // 23: api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.placement_group_info:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.PlacementGroupInfo
	41, // 24: api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.processor_info:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.ProcessorInfo
	42, // 25: api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.v_cpu_info:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType.NetworkInfo.VCpuInfo
	35, // 26: api.instance.v1.ListInstanceTypeResponse.InstanceType.GpuInfo.GpuDeviceInfo.memory_info:type_name -> api.instance.v1.ListInstanceTypeResponse.InstanceType.GpuInfo.GpuDeviceInfo.GpuDeviceMemoryInfo
	6,  // 27: api.instance.v1.Instance.ListRegion:input_type -> api.instance.v1.ListRegionRequest
	8,  // 28: api.instance.v1.Instance.ListImage:input_type -> api.instance.v1.ListImageRequest
	10, // 29: api.instance.v1.Instance.ListInstanceType:input_type -> api.instance.v1.ListInstanceTypeRequest
	0,  // 30: api.instance.v1.Instance.CreateInstance:input_type -> api.instance.v1.CreateInstanceRequest
	2,  // 31: api.instance.v1.Instance.ListInstance:input_type -> api.instance.v1.ListInstanceRequest
	12, // 32: api.instance.v1.Instance.StartInstance:input_type -> api.instance.v1.StartInstanceRequest
	16, // 33: api.instance.v1.Instance.StopInstance:input_type -> api.instance.v1.StopInstanceRequest
	18, // 34: api.instance.v1.Instance.RebootInstance:input_type -> api.instance.v1.RebootInstanceRequest
	20, // 35: api.instance.v1.Instance.DeleteInstance:input_type -> api.instance.v1.DeleteInstanceRequest
	7,  // 36: api.instance.v1.Instance.ListRegion:output_type -> api.instance.v1.ListRegionResponse
	9,  // 37: api.instance.v1.Instance.ListImage:output_type -> api.instance.v1.ListImageResponse
	11, // 38: api.instance.v1.Instance.ListInstanceType:output_type -> api.instance.v1.ListInstanceTypeResponse
	1,  // 39: api.instance.v1.Instance.CreateInstance:output_type -> api.instance.v1.CreateInstanceResponse
	5,  // 40: api.instance.v1.Instance.ListInstance:output_type -> api.instance.v1.ListInstanceResponse
	15, // 41: api.instance.v1.Instance.StartInstance:output_type -> api.instance.v1.StartInstanceResponse
	17, // 42: api.instance.v1.Instance.StopInstance:output_type -> api.instance.v1.StopInstanceResponse
	19, // 43: api.instance.v1.Instance.RebootInstance:output_type -> api.instance.v1.RebootInstanceResponse
	21, // 44: api.instance.v1.Instance.DeleteInstance:output_type -> api.instance.v1.DeleteInstanceResponse
	36, // [36:45] is the sub-list for method output_type
	27, // [27:36] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_services_aws_api_instance_v1_instance_proto_init() }
func file_services_aws_api_instance_v1_instance_proto_init() {
	if File_services_aws_api_instance_v1_instance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_aws_api_instance_v1_instance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceObj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceStateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebootInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInstanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceObj_CpuOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceObj_Monitoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceObj_PrivateDnsNameOptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceResponse_Reservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRegionResponse_Region); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImageResponse_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_GpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_InstanceStorageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_MemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_NetworkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_GpuInfo_GpuDeviceInfo_GpuDeviceMemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_InferenceAcceleratorInfo_InferenceDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_InstanceStorageInfo_DiskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_NetworkInfo_EfaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_NetworkInfo_NetworkCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_NetworkInfo_PlacementGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_NetworkInfo_ProcessorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_aws_api_instance_v1_instance_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInstanceTypeResponse_InstanceType_NetworkInfo_VCpuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_aws_api_instance_v1_instance_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_aws_api_instance_v1_instance_proto_goTypes,
		DependencyIndexes: file_services_aws_api_instance_v1_instance_proto_depIdxs,
		MessageInfos:      file_services_aws_api_instance_v1_instance_proto_msgTypes,
	}.Build()
	File_services_aws_api_instance_v1_instance_proto = out.File
	file_services_aws_api_instance_v1_instance_proto_rawDesc = nil
	file_services_aws_api_instance_v1_instance_proto_goTypes = nil
	file_services_aws_api_instance_v1_instance_proto_depIdxs = nil
}
